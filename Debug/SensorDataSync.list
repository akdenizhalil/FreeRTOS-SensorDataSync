
SensorDataSync.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800ccf4  0800ccf4  0001ccf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf18  0800cf18  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf18  0800cf18  0001cf18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf20  0800cf20  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf20  0800cf20  0001cf20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf24  0800cf24  0001cf24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800cf28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00013780  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013810  20013810  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000230c6  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000053dd  00000000  00000000  000431c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e90  00000000  00000000  000485a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017bc  00000000  00000000  0004a438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027b6d  00000000  00000000  0004bbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000273c6  00000000  00000000  00073761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e11f1  00000000  00000000  0009ab27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008ce0  00000000  00000000  0017bd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  001849f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ccdc 	.word	0x0800ccdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800ccdc 	.word	0x0800ccdc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	 srand((unsigned)time(NULL));
 8000582:	2000      	movs	r0, #0
 8000584:	f00b fbda 	bl	800bd3c <time>
 8000588:	4602      	mov	r2, r0
 800058a:	460b      	mov	r3, r1
 800058c:	4613      	mov	r3, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f00b fa4c 	bl	800ba2c <srand>

	 xSensorDataSemaphore = xSemaphoreCreateCounting(MAX_SENSOR_READINGS, 0);
 8000594:	2100      	movs	r1, #0
 8000596:	200a      	movs	r0, #10
 8000598:	f008 fcd5 	bl	8008f46 <xQueueCreateCountingSemaphore>
 800059c:	4603      	mov	r3, r0
 800059e:	4a20      	ldr	r2, [pc, #128]	; (8000620 <main+0xa4>)
 80005a0:	6013      	str	r3, [r2, #0]
	     if( xSensorDataSemaphore == NULL )
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <main+0xa4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d103      	bne.n	80005b2 <main+0x36>
	     {
	         UART_Print("Sensor data counting semaphore olusturulamadi!\r\n");
 80005aa:	481e      	ldr	r0, [pc, #120]	; (8000624 <main+0xa8>)
 80005ac:	f000 fa6e 	bl	8000a8c <UART_Print>
	         while(1);
 80005b0:	e7fe      	b.n	80005b0 <main+0x34>
	     }

	     xSensorMutex = xSemaphoreCreateMutex();
 80005b2:	2001      	movs	r0, #1
 80005b4:	f008 fcaf 	bl	8008f16 <xQueueCreateMutex>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <main+0xac>)
 80005bc:	6013      	str	r3, [r2, #0]
	         if( xSensorMutex == NULL )
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <main+0xac>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d103      	bne.n	80005ce <main+0x52>
	         {
	             UART_Print("Sensor mutex olusturulamadi!\r\n");
 80005c6:	4819      	ldr	r0, [pc, #100]	; (800062c <main+0xb0>)
 80005c8:	f000 fa60 	bl	8000a8c <UART_Print>
	             while(1);
 80005cc:	e7fe      	b.n	80005cc <main+0x50>
	         }


	         // Yüksek öncelikli: Veri alma işlemi
	         xTaskCreate(vSensorAcquisitionTask, "SensorAcq", configMINIMAL_STACK_SIZE, NULL,3, NULL);
 80005ce:	2300      	movs	r3, #0
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2303      	movs	r3, #3
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	2282      	movs	r2, #130	; 0x82
 80005da:	4915      	ldr	r1, [pc, #84]	; (8000630 <main+0xb4>)
 80005dc:	4815      	ldr	r0, [pc, #84]	; (8000634 <main+0xb8>)
 80005de:	f009 f967 	bl	80098b0 <xTaskCreate>
	         //  daha düşük öncelikli: Veri işleme işlemi
	         xTaskCreate(vSensorProcessingTask, "SensorProc", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80005e2:	2300      	movs	r3, #0
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2302      	movs	r3, #2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	2282      	movs	r2, #130	; 0x82
 80005ee:	4912      	ldr	r1, [pc, #72]	; (8000638 <main+0xbc>)
 80005f0:	4812      	ldr	r0, [pc, #72]	; (800063c <main+0xc0>)
 80005f2:	f009 f95d 	bl	80098b0 <xTaskCreate>

	         vTaskStartScheduler();
 80005f6:	f009 faf9 	bl	8009bec <vTaskStartScheduler>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fe15 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f81f 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f945 	bl	8000890 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000606:	f000 f885 	bl	8000714 <MX_I2C1_Init>
  MX_I2S3_Init();
 800060a:	f000 f8b1 	bl	8000770 <MX_I2S3_Init>
  MX_SPI1_Init();
 800060e:	f000 f8df 	bl	80007d0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000612:	f007 ffcd 	bl	80085b0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000616:	f000 f911 	bl	800083c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800061a:	f007 ffef 	bl	80085fc <MX_USB_HOST_Process>
 800061e:	e7fc      	b.n	800061a <main+0x9e>
 8000620:	200001e4 	.word	0x200001e4
 8000624:	0800ccf4 	.word	0x0800ccf4
 8000628:	200001e8 	.word	0x200001e8
 800062c:	0800cd28 	.word	0x0800cd28
 8000630:	0800cd48 	.word	0x0800cd48
 8000634:	08000ab5 	.word	0x08000ab5
 8000638:	0800cd54 	.word	0x0800cd54
 800063c:	08000b5d 	.word	0x08000b5d

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00b fb6b 	bl	800bd2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fa9a 	bl	8003c00 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006d2:	f000 fa7b 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2105      	movs	r1, #5
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fcfb 	bl	80040f0 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000700:	f000 fa64 	bl	8000bcc <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	; 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2C1_Init+0x50>)
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <MX_I2C1_Init+0x54>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_I2C1_Init+0x50>)
 8000720:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_I2C1_Init+0x58>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_I2C1_Init+0x50>)
 8000732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_I2C1_Init+0x50>)
 8000752:	f002 fc71 	bl	8003038 <HAL_I2C_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800075c:	f000 fa36 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000ac 	.word	0x200000ac
 8000768:	40005400 	.word	0x40005400
 800076c:	000186a0 	.word	0x000186a0

08000770 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <MX_I2S3_Init+0x58>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2S3_Init+0x54>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_I2S3_Init+0x54>)
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <MX_I2S3_Init+0x5c>)
 800079a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2S3_Init+0x54>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_I2S3_Init+0x54>)
 80007b0:	f002 fd86 	bl	80032c0 <HAL_I2S_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ba:	f000 fa07 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000100 	.word	0x20000100
 80007c8:	40003c00 	.word	0x40003c00
 80007cc:	00017700 	.word	0x00017700

080007d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_SPI1_Init+0x64>)
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <MX_SPI1_Init+0x68>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI1_Init+0x64>)
 80007fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000800:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI1_Init+0x64>)
 800081c:	220a      	movs	r2, #10
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_SPI1_Init+0x64>)
 8000822:	f003 fff7 	bl	8004814 <HAL_SPI_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800082c:	f000 f9ce 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000148 	.word	0x20000148
 8000838:	40013000 	.word	0x40013000

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_USART2_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000874:	f004 fb04 	bl	8004e80 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 f9a5 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200001a0 	.word	0x200001a0
 800088c:	40004400 	.word	0x40004400

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	4b72      	ldr	r3, [pc, #456]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a71      	ldr	r2, [pc, #452]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b6f      	ldr	r3, [pc, #444]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b6b      	ldr	r3, [pc, #428]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a6a      	ldr	r2, [pc, #424]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b68      	ldr	r3, [pc, #416]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b64      	ldr	r3, [pc, #400]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a63      	ldr	r2, [pc, #396]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b61      	ldr	r3, [pc, #388]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b5d      	ldr	r3, [pc, #372]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a5c      	ldr	r2, [pc, #368]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b5a      	ldr	r3, [pc, #360]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b56      	ldr	r3, [pc, #344]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a55      	ldr	r2, [pc, #340]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b53      	ldr	r3, [pc, #332]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a4e      	ldr	r2, [pc, #312]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b4c      	ldr	r3, [pc, #304]	; (8000a74 <MX_GPIO_Init+0x1e4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	4849      	ldr	r0, [pc, #292]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 8000954:	f000 ff4c 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4847      	ldr	r0, [pc, #284]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 800095e:	f000 ff47 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000962:	2200      	movs	r2, #0
 8000964:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000968:	4845      	ldr	r0, [pc, #276]	; (8000a80 <MX_GPIO_Init+0x1f0>)
 800096a:	f000 ff41 	bl	80017f0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800096e:	2308      	movs	r3, #8
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	483c      	ldr	r0, [pc, #240]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 8000986:	f000 fd97 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800098a:	2301      	movs	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4836      	ldr	r0, [pc, #216]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 80009a2:	f000 fd89 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009a6:	2308      	movs	r3, #8
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b6:	2305      	movs	r3, #5
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	482e      	ldr	r0, [pc, #184]	; (8000a7c <MX_GPIO_Init+0x1ec>)
 80009c2:	f000 fd79 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	482a      	ldr	r0, [pc, #168]	; (8000a84 <MX_GPIO_Init+0x1f4>)
 80009dc:	f000 fd6c 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009e0:	2304      	movs	r3, #4
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4825      	ldr	r0, [pc, #148]	; (8000a88 <MX_GPIO_Init+0x1f8>)
 80009f4:	f000 fd60 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_GPIO_Init+0x1f8>)
 8000a16:	f000 fd4f 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a1a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a1e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_GPIO_Init+0x1f0>)
 8000a34:	f000 fd40 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_GPIO_Init+0x1f0>)
 8000a4c:	f000 fd34 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a54:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_GPIO_Init+0x1e8>)
 8000a66:	f000 fd27 	bl	80014b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	; 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020400 	.word	0x40020400

08000a8c <UART_Print>:

/* USER CODE BEGIN 4 */

void UART_Print(const char *message)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 100);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fb9b 	bl	80001d0 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	2364      	movs	r3, #100	; 0x64
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <UART_Print+0x24>)
 8000aa4:	f004 fa39 	bl	8004f1a <HAL_UART_Transmit>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200001a0 	.word	0x200001a0

08000ab4 <vSensorAcquisitionTask>:

/* Sensör verisini alan görev (Sensor Acquisition) */
void vSensorAcquisitionTask(void *pvParameters)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09c      	sub	sp, #112	; 0x70
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    for( ;; )
    {
        /* Sensöre eşzamanlı erişimi engellemek için mutex alınır.
           xSensorMutex, xSemaphoreCreateMutex() ile oluşturulduğu için
           başlangıçta otomatik olarak "verili" durumdadır. */
        if( xSemaphoreTake(xSensorMutex, portMAX_DELAY) == pdTRUE )
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <vSensorAcquisitionTask+0x90>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f008 fc4b 	bl	8009360 <xQueueSemaphoreTake>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d12a      	bne.n	8000b26 <vSensorAcquisitionTask+0x72>
        {
            /* Gerçek sensör okuması yerine, 20 ile 30 arasında rastgele bir sıcaklık değeri simüle ediliyor */
            globalSensorReading = 20 + (rand() % 11);
 8000ad0:	f00a ffda 	bl	800ba88 <rand>
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <vSensorAcquisitionTask+0x94>)
 8000ad8:	fb83 2301 	smull	r2, r3, r3, r1
 8000adc:	105a      	asrs	r2, r3, #1
 8000ade:	17cb      	asrs	r3, r1, #31
 8000ae0:	1ad2      	subs	r2, r2, r3
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4413      	add	r3, r2
 8000aec:	1aca      	subs	r2, r1, r3
 8000aee:	f102 0314 	add.w	r3, r2, #20
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <vSensorAcquisitionTask+0x98>)
 8000af4:	6013      	str	r3, [r2, #0]
            sprintf(buffer, "Sensor Acquisition: Yeni sicaklik olcum alindi: %d°C\r\n", globalSensorReading);
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <vSensorAcquisitionTask+0x98>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	4914      	ldr	r1, [pc, #80]	; (8000b50 <vSensorAcquisitionTask+0x9c>)
 8000b00:	4618      	mov	r0, r3
 8000b02:	f00b f8af 	bl	800bc64 <siprintf>
            UART_Print(buffer);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffbe 	bl	8000a8c <UART_Print>

            /* Sensör okuma süresini simüle etmek için kısa bir gecikme */
            vTaskDelay(pdMS_TO_TICKS(300));
 8000b10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b14:	f009 f836 	bl	8009b84 <vTaskDelay>

            /* Mutex serbest bırakılarak sensör donanımına diğer görevlerin erişimine izin verilir */
            xSemaphoreGive(xSensorMutex);
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <vSensorAcquisitionTask+0x90>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	f008 fa3f 	bl	8008fa4 <xQueueGenericSend>
        }

        /* Yeni veri alındığını belirtmek için counting semaphore'un sayacı artırılır */
        xSemaphoreGive(xSensorDataSemaphore);
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <vSensorAcquisitionTask+0xa0>)
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f008 fa38 	bl	8008fa4 <xQueueGenericSend>
        UART_Print("Sensor Acquisition: Veri paketi sayaci artirildi.\r\n");
 8000b34:	4808      	ldr	r0, [pc, #32]	; (8000b58 <vSensorAcquisitionTask+0xa4>)
 8000b36:	f7ff ffa9 	bl	8000a8c <UART_Print>

        /* Bir sonraki ölçüm öncesi bekleme süresi */
        vTaskDelay(pdMS_TO_TICKS(800));
 8000b3a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b3e:	f009 f821 	bl	8009b84 <vTaskDelay>
        if( xSemaphoreTake(xSensorMutex, portMAX_DELAY) == pdTRUE )
 8000b42:	e7bb      	b.n	8000abc <vSensorAcquisitionTask+0x8>
 8000b44:	200001e8 	.word	0x200001e8
 8000b48:	2e8ba2e9 	.word	0x2e8ba2e9
 8000b4c:	200001ec 	.word	0x200001ec
 8000b50:	0800cd60 	.word	0x0800cd60
 8000b54:	200001e4 	.word	0x200001e4
 8000b58:	0800cd98 	.word	0x0800cd98

08000b5c <vSensorProcessingTask>:
}


/* Alınan sensör verisini işleyen görev (Sensor Processing) */
void vSensorProcessingTask(void *pvParameters)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b09c      	sub	sp, #112	; 0x70
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    char buffer[100];
    for( ;; )
    {
        /* Mevcut veri paketlerinin sayısını takip eden semaphore'u bekleriz.
           Eğer sayaç sıfırdan büyükse, bir veri var demektir. */
        if( xSemaphoreTake(xSensorDataSemaphore, portMAX_DELAY) == pdTRUE )
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <vSensorProcessingTask+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f008 fbf7 	bl	8009360 <xQueueSemaphoreTake>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d1f5      	bne.n	8000b64 <vSensorProcessingTask+0x8>
        {
            sprintf(buffer, "Sensor Processing: Isleniyor - Sicaklik degeri: %d°C\r\n", globalSensorReading);
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <vSensorProcessingTask+0x44>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <vSensorProcessingTask+0x48>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f00b f86e 	bl	800bc64 <siprintf>
            UART_Print(buffer);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff7d 	bl	8000a8c <UART_Print>

            /* Veri işleme süresi simülasyonu */
            vTaskDelay(pdMS_TO_TICKS(500));
 8000b92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b96:	f008 fff5 	bl	8009b84 <vTaskDelay>
        if( xSemaphoreTake(xSensorDataSemaphore, portMAX_DELAY) == pdTRUE )
 8000b9a:	e7e3      	b.n	8000b64 <vSensorProcessingTask+0x8>
 8000b9c:	200001e4 	.word	0x200001e4
 8000ba0:	200001ec 	.word	0x200001ec
 8000ba4:	0800cdcc 	.word	0x0800cdcc

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d101      	bne.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bba:	f000 fb57 	bl	800126c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40001000 	.word	0x40001000

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <HAL_I2C_MspInit+0x84>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12c      	bne.n	8000ca4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c66:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6c:	2312      	movs	r3, #18
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <HAL_I2C_MspInit+0x8c>)
 8000c84:	f000 fc18 	bl	80014b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a31      	ldr	r2, [pc, #196]	; (8000da8 <HAL_I2S_MspInit+0xf0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d15a      	bne.n	8000d9e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cec:	23c0      	movs	r3, #192	; 0xc0
 8000cee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fc4b 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d04:	f7ff ff62 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <HAL_I2S_MspInit+0xf4>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a26      	ldr	r2, [pc, #152]	; (8000dac <HAL_I2S_MspInit+0xf4>)
 8000d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <HAL_I2S_MspInit+0xf4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_I2S_MspInit+0xf4>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	4a1f      	ldr	r2, [pc, #124]	; (8000dac <HAL_I2S_MspInit+0xf4>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6313      	str	r3, [r2, #48]	; 0x30
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <HAL_I2S_MspInit+0xf4>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_I2S_MspInit+0xf4>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a18      	ldr	r2, [pc, #96]	; (8000dac <HAL_I2S_MspInit+0xf4>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_I2S_MspInit+0xf4>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	480e      	ldr	r0, [pc, #56]	; (8000db0 <HAL_I2S_MspInit+0xf8>)
 8000d78:	f000 fb9e 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d7c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d8e:	2306      	movs	r3, #6
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <HAL_I2S_MspInit+0xfc>)
 8000d9a:	f000 fb8d 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3738      	adds	r7, #56	; 0x38
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40003c00 	.word	0x40003c00
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020800 	.word	0x40020800

08000db8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <HAL_SPI_MspInit+0x84>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d12b      	bne.n	8000e32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_SPI_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e12:	23e0      	movs	r3, #224	; 0xe0
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e22:	2305      	movs	r3, #5
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_SPI_MspInit+0x8c>)
 8000e2e:	f000 fb43 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40013000 	.word	0x40013000
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_UART_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12b      	bne.n	8000ec2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_UART_MspInit+0x8c>)
 8000ebe:	f000 fafb 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40004400 	.word	0x40004400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <HAL_InitTick+0xe4>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a32      	ldr	r2, [pc, #200]	; (8000fbc <HAL_InitTick+0xe4>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <HAL_InitTick+0xe4>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f04:	f107 0210 	add.w	r2, r7, #16
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fb0e 	bl	8004530 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d103      	bne.n	8000f26 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f1e:	f003 fadf 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8000f22:	6378      	str	r0, [r7, #52]	; 0x34
 8000f24:	e004      	b.n	8000f30 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f26:	f003 fadb 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f32:	4a23      	ldr	r2, [pc, #140]	; (8000fc0 <HAL_InitTick+0xe8>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	0c9b      	lsrs	r3, r3, #18
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <HAL_InitTick+0xec>)
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <HAL_InitTick+0xf0>)
 8000f42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <HAL_InitTick+0xec>)
 8000f46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f4a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_InitTick+0xec>)
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <HAL_InitTick+0xec>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_InitTick+0xec>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <HAL_InitTick+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f64:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <HAL_InitTick+0xec>)
 8000f66:	f003 fcde 	bl	8004926 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d11b      	bne.n	8000fb0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f78:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <HAL_InitTick+0xec>)
 8000f7a:	f003 fd2d 	bl	80049d8 <HAL_TIM_Base_Start_IT>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d111      	bne.n	8000fb0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f8c:	2036      	movs	r0, #54	; 0x36
 8000f8e:	f000 fa85 	bl	800149c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d808      	bhi.n	8000faa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	2036      	movs	r0, #54	; 0x36
 8000f9e:	f000 fa61 	bl	8001464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_InitTick+0xf4>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e002      	b.n	8000fb0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3738      	adds	r7, #56	; 0x38
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	431bde83 	.word	0x431bde83
 8000fc4:	200001f0 	.word	0x200001f0
 8000fc8:	40001000 	.word	0x40001000
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <TIM6_DAC_IRQHandler+0x10>)
 8001002:	f003 fd59 	bl	8004ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001f0 	.word	0x200001f0

08001010 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <OTG_FS_IRQHandler+0x10>)
 8001016:	f000 fe6f 	bl	8001cf8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000061c 	.word	0x2000061c

08001024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return 1;
 8001028:	2301      	movs	r3, #1
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_kill>:

int _kill(int pid, int sig)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800103e:	f00a feff 	bl	800be40 <__errno>
 8001042:	4603      	mov	r3, r0
 8001044:	2216      	movs	r2, #22
 8001046:	601a      	str	r2, [r3, #0]
  return -1;
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_exit>:

void _exit (int status)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffe7 	bl	8001034 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001066:	e7fe      	b.n	8001066 <_exit+0x12>

08001068 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e00a      	b.n	8001090 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107a:	f3af 8000 	nop.w
 800107e:	4601      	mov	r1, r0
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	60ba      	str	r2, [r7, #8]
 8001086:	b2ca      	uxtb	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbf0      	blt.n	800107a <_read+0x12>
  }

  return len;
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	e009      	b.n	80010c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf1      	blt.n	80010b4 <_write+0x12>
  }
  return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_close>:

int _close(int file)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001102:	605a      	str	r2, [r3, #4]
  return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_isatty>:

int _isatty(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f00a fe64 	bl	800be40 <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20020000 	.word	0x20020000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	20000238 	.word	0x20000238
 80011ac:	20013810 	.word	0x20013810

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ffd7 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f00a fe23 	bl	800be4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff f9b9 	bl	800057c <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001218:	0800cf28 	.word	0x0800cf28
  ldr r2, =_sbss
 800121c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001220:	20013810 	.word	0x20013810

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f8fc 	bl	800144e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	200f      	movs	r0, #15
 8001258:	f7ff fe3e 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fcbc 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	2000023c 	.word	0x2000023c

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	2000023c 	.word	0x2000023c

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff ffee 	bl	8001294 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffde 	bl	8001294 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4907      	ldr	r1, [pc, #28]	; (8001390 <__NVIC_EnableIRQ+0x38>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ff4c 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001476:	f7ff ff61 	bl	800133c <__NVIC_GetPriorityGrouping>
 800147a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	6978      	ldr	r0, [r7, #20]
 8001482:	f7ff ffb1 	bl	80013e8 <NVIC_EncodePriority>
 8001486:	4602      	mov	r2, r0
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff80 	bl	8001394 <__NVIC_SetPriority>
}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff54 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	e16b      	b.n	80017ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 815a 	bne.w	80017a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d005      	beq.n	800150a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001506:	2b02      	cmp	r3, #2
 8001508:	d130      	bne.n	800156c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d017      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d123      	bne.n	80015fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	69b9      	ldr	r1, [r7, #24]
 80015f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0203 	and.w	r2, r3, #3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80b4 	beq.w	80017a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <HAL_GPIO_Init+0x30c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a5f      	ldr	r2, [pc, #380]	; (80017c4 <HAL_GPIO_Init+0x30c>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <HAL_GPIO_Init+0x30c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165a:	4a5b      	ldr	r2, [pc, #364]	; (80017c8 <HAL_GPIO_Init+0x310>)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a52      	ldr	r2, [pc, #328]	; (80017cc <HAL_GPIO_Init+0x314>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d02b      	beq.n	80016de <HAL_GPIO_Init+0x226>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <HAL_GPIO_Init+0x318>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d025      	beq.n	80016da <HAL_GPIO_Init+0x222>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a50      	ldr	r2, [pc, #320]	; (80017d4 <HAL_GPIO_Init+0x31c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01f      	beq.n	80016d6 <HAL_GPIO_Init+0x21e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4f      	ldr	r2, [pc, #316]	; (80017d8 <HAL_GPIO_Init+0x320>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_GPIO_Init+0x21a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4e      	ldr	r2, [pc, #312]	; (80017dc <HAL_GPIO_Init+0x324>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x216>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4d      	ldr	r2, [pc, #308]	; (80017e0 <HAL_GPIO_Init+0x328>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x212>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4c      	ldr	r2, [pc, #304]	; (80017e4 <HAL_GPIO_Init+0x32c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x20e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4b      	ldr	r2, [pc, #300]	; (80017e8 <HAL_GPIO_Init+0x330>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x20a>
 80016be:	2307      	movs	r3, #7
 80016c0:	e00e      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016c2:	2308      	movs	r3, #8
 80016c4:	e00c      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016c6:	2306      	movs	r3, #6
 80016c8:	e00a      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016ca:	2305      	movs	r3, #5
 80016cc:	e008      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x228>
 80016de:	2300      	movs	r3, #0
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	4093      	lsls	r3, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f0:	4935      	ldr	r1, [pc, #212]	; (80017c8 <HAL_GPIO_Init+0x310>)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_GPIO_Init+0x334>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001722:	4a32      	ldr	r2, [pc, #200]	; (80017ec <HAL_GPIO_Init+0x334>)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001728:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_GPIO_Init+0x334>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800174c:	4a27      	ldr	r2, [pc, #156]	; (80017ec <HAL_GPIO_Init+0x334>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_GPIO_Init+0x334>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001776:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_GPIO_Init+0x334>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_GPIO_Init+0x334>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <HAL_GPIO_Init+0x334>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	f67f ae90 	bls.w	80014d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40013800 	.word	0x40013800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40021400 	.word	0x40021400
 80017e4:	40021800 	.word	0x40021800
 80017e8:	40021c00 	.word	0x40021c00
 80017ec:	40013c00 	.word	0x40013c00

080017f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800180c:	e003      	b.n	8001816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	041a      	lsls	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	619a      	str	r2, [r3, #24]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001824:	b08f      	sub	sp, #60	; 0x3c
 8001826:	af0a      	add	r7, sp, #40	; 0x28
 8001828:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e054      	b.n	80018de <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f006 ff0c 	bl	800866c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2203      	movs	r2, #3
 8001858:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f003 ff38 	bl	80056e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	687e      	ldr	r6, [r7, #4]
 8001880:	466d      	mov	r5, sp
 8001882:	f106 0410 	add.w	r4, r6, #16
 8001886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001892:	e885 0003 	stmia.w	r5, {r0, r1}
 8001896:	1d33      	adds	r3, r6, #4
 8001898:	cb0e      	ldmia	r3, {r1, r2, r3}
 800189a:	6838      	ldr	r0, [r7, #0]
 800189c:	f003 feb2 	bl	8005604 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 ff2f 	bl	800570a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	687e      	ldr	r6, [r7, #4]
 80018b4:	466d      	mov	r5, sp
 80018b6:	f106 0410 	add.w	r4, r6, #16
 80018ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ca:	1d33      	adds	r3, r6, #4
 80018cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ce:	6838      	ldr	r0, [r7, #0]
 80018d0:	f004 f8b8 	bl	8005a44 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80018e6:	b590      	push	{r4, r7, lr}
 80018e8:	b089      	sub	sp, #36	; 0x24
 80018ea:	af04      	add	r7, sp, #16
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	4608      	mov	r0, r1
 80018f0:	4611      	mov	r1, r2
 80018f2:	461a      	mov	r2, r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	70fb      	strb	r3, [r7, #3]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70bb      	strb	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_HCD_HC_Init+0x28>
 800190a:	2302      	movs	r3, #2
 800190c:	e076      	b.n	80019fc <HAL_HCD_HC_Init+0x116>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	333d      	adds	r3, #61	; 0x3d
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3338      	adds	r3, #56	; 0x38
 8001936:	787a      	ldrb	r2, [r7, #1]
 8001938:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	212c      	movs	r1, #44	; 0x2c
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	3340      	adds	r3, #64	; 0x40
 8001948:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800194a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3339      	adds	r3, #57	; 0x39
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	333f      	adds	r3, #63	; 0x3f
 800196c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001970:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	78ba      	ldrb	r2, [r7, #2]
 8001976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800197a:	b2d0      	uxtb	r0, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	333a      	adds	r3, #58	; 0x3a
 8001988:	4602      	mov	r2, r0
 800198a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800198c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001990:	2b00      	cmp	r3, #0
 8001992:	da09      	bge.n	80019a8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	333b      	adds	r3, #59	; 0x3b
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e008      	b.n	80019ba <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	333b      	adds	r3, #59	; 0x3b
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	333c      	adds	r3, #60	; 0x3c
 80019c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019cc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	787c      	ldrb	r4, [r7, #1]
 80019d4:	78ba      	ldrb	r2, [r7, #2]
 80019d6:	78f9      	ldrb	r1, [r7, #3]
 80019d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	4623      	mov	r3, r4
 80019ea:	f004 f9b1 	bl	8005d50 <USB_HC_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}

08001a04 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_HCD_HC_Halt+0x1e>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e00f      	b.n	8001a42 <HAL_HCD_HC_Halt+0x3e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fc01 	bl	800623a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	4608      	mov	r0, r1
 8001a56:	4611      	mov	r1, r2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	70fb      	strb	r3, [r7, #3]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	70bb      	strb	r3, [r7, #2]
 8001a62:	4613      	mov	r3, r2
 8001a64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	333b      	adds	r3, #59	; 0x3b
 8001a74:	78ba      	ldrb	r2, [r7, #2]
 8001a76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	333f      	adds	r3, #63	; 0x3f
 8001a86:	787a      	ldrb	r2, [r7, #1]
 8001a88:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a8a:	7c3b      	ldrb	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d112      	bne.n	8001ab6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	212c      	movs	r1, #44	; 0x2c
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3342      	adds	r3, #66	; 0x42
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	212c      	movs	r1, #44	; 0x2c
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	333d      	adds	r3, #61	; 0x3d
 8001ab0:	7f3a      	ldrb	r2, [r7, #28]
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	e008      	b.n	8001ac8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	212c      	movs	r1, #44	; 0x2c
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3342      	adds	r3, #66	; 0x42
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	f200 80c6 	bhi.w	8001c5c <HAL_HCD_HC_SubmitRequest+0x210>
 8001ad0:	a201      	add	r2, pc, #4	; (adr r2, 8001ad8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad6:	bf00      	nop
 8001ad8:	08001ae9 	.word	0x08001ae9
 8001adc:	08001c49 	.word	0x08001c49
 8001ae0:	08001b4d 	.word	0x08001b4d
 8001ae4:	08001bcb 	.word	0x08001bcb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ae8:	7c3b      	ldrb	r3, [r7, #16]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 80b8 	bne.w	8001c60 <HAL_HCD_HC_SubmitRequest+0x214>
 8001af0:	78bb      	ldrb	r3, [r7, #2]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 80b4 	bne.w	8001c60 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001af8:	8b3b      	ldrh	r3, [r7, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d108      	bne.n	8001b10 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3355      	adds	r3, #85	; 0x55
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3355      	adds	r3, #85	; 0x55
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	3342      	adds	r3, #66	; 0x42
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b36:	e093      	b.n	8001c60 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	212c      	movs	r1, #44	; 0x2c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3342      	adds	r3, #66	; 0x42
 8001b46:	2202      	movs	r2, #2
 8001b48:	701a      	strb	r2, [r3, #0]
      break;
 8001b4a:	e089      	b.n	8001c60 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b4c:	78bb      	ldrb	r3, [r7, #2]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d11d      	bne.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3355      	adds	r3, #85	; 0x55
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3342      	adds	r3, #66	; 0x42
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b78:	e073      	b.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3342      	adds	r3, #66	; 0x42
 8001b88:	2202      	movs	r2, #2
 8001b8a:	701a      	strb	r2, [r3, #0]
      break;
 8001b8c:	e069      	b.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3354      	adds	r3, #84	; 0x54
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	212c      	movs	r1, #44	; 0x2c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	3342      	adds	r3, #66	; 0x42
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
      break;
 8001bb4:	e055      	b.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	212c      	movs	r1, #44	; 0x2c
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3342      	adds	r3, #66	; 0x42
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	701a      	strb	r2, [r3, #0]
      break;
 8001bc8:	e04b      	b.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001bca:	78bb      	ldrb	r3, [r7, #2]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d11d      	bne.n	8001c0c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	212c      	movs	r1, #44	; 0x2c
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3355      	adds	r3, #85	; 0x55
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d109      	bne.n	8001bf8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	212c      	movs	r1, #44	; 0x2c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	3342      	adds	r3, #66	; 0x42
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bf6:	e034      	b.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3342      	adds	r3, #66	; 0x42
 8001c06:	2202      	movs	r2, #2
 8001c08:	701a      	strb	r2, [r3, #0]
      break;
 8001c0a:	e02a      	b.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	212c      	movs	r1, #44	; 0x2c
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	3354      	adds	r3, #84	; 0x54
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	212c      	movs	r1, #44	; 0x2c
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3342      	adds	r3, #66	; 0x42
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
      break;
 8001c32:	e016      	b.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	212c      	movs	r1, #44	; 0x2c
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	3342      	adds	r3, #66	; 0x42
 8001c42:	2202      	movs	r2, #2
 8001c44:	701a      	strb	r2, [r3, #0]
      break;
 8001c46:	e00c      	b.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3342      	adds	r3, #66	; 0x42
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
      break;
 8001c5a:	e002      	b.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c5c:	bf00      	nop
 8001c5e:	e000      	b.n	8001c62 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c60:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	212c      	movs	r1, #44	; 0x2c
 8001c68:	fb01 f303 	mul.w	r3, r1, r3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3344      	adds	r3, #68	; 0x44
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	8b3a      	ldrh	r2, [r7, #24]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	202c      	movs	r0, #44	; 0x2c
 8001c7c:	fb00 f303 	mul.w	r3, r0, r3
 8001c80:	440b      	add	r3, r1
 8001c82:	334c      	adds	r3, #76	; 0x4c
 8001c84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	3360      	adds	r3, #96	; 0x60
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	212c      	movs	r1, #44	; 0x2c
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3350      	adds	r3, #80	; 0x50
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	212c      	movs	r1, #44	; 0x2c
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3339      	adds	r3, #57	; 0x39
 8001cb8:	78fa      	ldrb	r2, [r7, #3]
 8001cba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3361      	adds	r3, #97	; 0x61
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	222c      	movs	r2, #44	; 0x2c
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	3338      	adds	r3, #56	; 0x38
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	18d1      	adds	r1, r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f004 f954 	bl	8005f94 <USB_HC_StartXfer>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop

08001cf8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fe55 	bl	80059be <USB_GetMode>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	f040 80f6 	bne.w	8001f08 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fe39 	bl	8005998 <USB_ReadInterrupts>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80ec 	beq.w	8001f06 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fe30 	bl	8005998 <USB_ReadInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d42:	d104      	bne.n	8001d4e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fe20 	bl	8005998 <USB_ReadInterrupts>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d62:	d104      	bne.n	8001d6e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fe10 	bl	8005998 <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d82:	d104      	bne.n	8001d8e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fe00 	bl	8005998 <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d103      	bne.n	8001daa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2202      	movs	r2, #2
 8001da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fdf2 	bl	8005998 <USB_ReadInterrupts>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dbe:	d11c      	bne.n	8001dfa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001dc8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001dda:	2110      	movs	r1, #16
 8001ddc:	6938      	ldr	r0, [r7, #16]
 8001dde:	f003 fce1 	bl	80057a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001de2:	6938      	ldr	r0, [r7, #16]
 8001de4:	f003 fd12 	bl	800580c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2101      	movs	r1, #1
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fee8 	bl	8005bc4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f006 fcb7 	bl	8008768 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 fdca 	bl	8005998 <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0e:	d102      	bne.n	8001e16 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f001 f89e 	bl	8002f52 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fdbc 	bl	8005998 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d106      	bne.n	8001e38 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f006 fc80 	bl	8008730 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2208      	movs	r2, #8
 8001e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fdab 	bl	8005998 <USB_ReadInterrupts>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d101      	bne.n	8001e50 <HAL_HCD_IRQHandler+0x158>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_HCD_IRQHandler+0x15a>
 8001e50:	2300      	movs	r3, #0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d012      	beq.n	8001e7c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699a      	ldr	r2, [r3, #24]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0210 	bic.w	r2, r2, #16
 8001e64:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 ffa1 	bl	8002dae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0210 	orr.w	r2, r2, #16
 8001e7a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 fd89 	bl	8005998 <USB_ReadInterrupts>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e90:	d13a      	bne.n	8001f08 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 f9be 	bl	8006218 <USB_HC_ReadInterrupt>
 8001e9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e025      	b.n	8001ef0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d018      	beq.n	8001eea <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ece:	d106      	bne.n	8001ede <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8ab 	bl	8002032 <HCD_HC_IN_IRQHandler>
 8001edc:	e005      	b.n	8001eea <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fbf9 	bl	80026dc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3d4      	bcc.n	8001ea4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f02:	615a      	str	r2, [r3, #20]
 8001f04:	e000      	b.n	8001f08 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f06:	bf00      	nop
    }
  }
}
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_HCD_Start+0x16>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e013      	b.n	8001f4c <HAL_HCD_Start+0x3e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 feaa 	bl	8005c8c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fbc2 	bl	80056c6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_HCD_Stop+0x16>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e00d      	b.n	8001f86 <HAL_HCD_Stop+0x32>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 fa98 	bl	80064ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 fe4c 	bl	8005c38 <USB_ResetPort>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3360      	adds	r3, #96	; 0x60
 8001fc4:	781b      	ldrb	r3, [r3, #0]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3350      	adds	r3, #80	; 0x50
 8001fec:	681b      	ldr	r3, [r3, #0]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f003 fe90 	bl	8005d2c <USB_GetCurrentFrame>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f003 fe6b 	bl	8005cfe <USB_GetHostSpeed>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d11a      	bne.n	8002098 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	461a      	mov	r2, r3
 8002070:	2304      	movs	r3, #4
 8002072:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3361      	adds	r3, #97	; 0x61
 8002082:	2206      	movs	r2, #6
 8002084:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f004 f8d2 	bl	800623a <USB_HC_Halt>
 8002096:	e0af      	b.n	80021f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ae:	d11b      	bne.n	80020e8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	461a      	mov	r2, r3
 80020be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3361      	adds	r3, #97	; 0x61
 80020d2:	2207      	movs	r2, #7
 80020d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 f8aa 	bl	800623a <USB_HC_Halt>
 80020e6:	e087      	b.n	80021f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d109      	bne.n	8002112 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	2320      	movs	r3, #32
 800210e:	6093      	str	r3, [r2, #8]
 8002110:	e072      	b.n	80021f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b08      	cmp	r3, #8
 8002126:	d11a      	bne.n	800215e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002134:	461a      	mov	r2, r3
 8002136:	2308      	movs	r3, #8
 8002138:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3361      	adds	r3, #97	; 0x61
 8002148:	2205      	movs	r2, #5
 800214a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f004 f86f 	bl	800623a <USB_HC_Halt>
 800215c:	e04c      	b.n	80021f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002174:	d11b      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002182:	461a      	mov	r2, r3
 8002184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002188:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3361      	adds	r3, #97	; 0x61
 8002198:	2208      	movs	r2, #8
 800219a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 f847 	bl	800623a <USB_HC_Halt>
 80021ac:	e024      	b.n	80021f8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c0:	2b80      	cmp	r3, #128	; 0x80
 80021c2:	d119      	bne.n	80021f8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	461a      	mov	r2, r3
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3361      	adds	r3, #97	; 0x61
 80021e4:	2206      	movs	r2, #6
 80021e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 f821 	bl	800623a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800220e:	d112      	bne.n	8002236 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f004 f80d 	bl	800623a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	461a      	mov	r2, r3
 800222e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002232:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002234:	e24e      	b.n	80026d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	f040 80df 	bne.w	800240c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d019      	beq.n	800228a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	3348      	adds	r3, #72	; 0x48
 8002264:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0159      	lsls	r1, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	440b      	add	r3, r1
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002278:	1ad2      	subs	r2, r2, r3
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	202c      	movs	r0, #44	; 0x2c
 8002280:	fb00 f303 	mul.w	r3, r0, r3
 8002284:	440b      	add	r3, r1
 8002286:	3350      	adds	r3, #80	; 0x50
 8002288:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	3361      	adds	r3, #97	; 0x61
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	335c      	adds	r3, #92	; 0x5c
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ba:	461a      	mov	r2, r3
 80022bc:	2301      	movs	r3, #1
 80022be:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	333f      	adds	r3, #63	; 0x3f
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	212c      	movs	r1, #44	; 0x2c
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	333f      	adds	r3, #63	; 0x3f
 80022e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d111      	bne.n	800230c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 ffa1 	bl	800623a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	461a      	mov	r2, r3
 8002306:	2310      	movs	r3, #16
 8002308:	6093      	str	r3, [r2, #8]
 800230a:	e03a      	b.n	8002382 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	333f      	adds	r3, #63	; 0x3f
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d009      	beq.n	8002334 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	333f      	adds	r3, #63	; 0x3f
 800232e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002330:	2b01      	cmp	r3, #1
 8002332:	d126      	bne.n	8002382 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	0151      	lsls	r1, r2, #5
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	440a      	add	r2, r1
 800234a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800234e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002352:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3360      	adds	r3, #96	; 0x60
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	b2d9      	uxtb	r1, r3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	202c      	movs	r0, #44	; 0x2c
 8002370:	fb00 f303 	mul.w	r3, r0, r3
 8002374:	4413      	add	r3, r2
 8002376:	3360      	adds	r3, #96	; 0x60
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f006 fa01 	bl	8008784 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d12b      	bne.n	80023e2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	3348      	adds	r3, #72	; 0x48
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	202c      	movs	r0, #44	; 0x2c
 80023a0:	fb00 f202 	mul.w	r2, r0, r2
 80023a4:	440a      	add	r2, r1
 80023a6:	3240      	adds	r2, #64	; 0x40
 80023a8:	8812      	ldrh	r2, [r2, #0]
 80023aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 818e 	beq.w	80026d4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3354      	adds	r3, #84	; 0x54
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2d8      	uxtb	r0, r3
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	3354      	adds	r3, #84	; 0x54
 80023dc:	4602      	mov	r2, r0
 80023de:	701a      	strb	r2, [r3, #0]
}
 80023e0:	e178      	b.n	80026d4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	3354      	adds	r3, #84	; 0x54
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f083 0301 	eor.w	r3, r3, #1
 80023f6:	b2d8      	uxtb	r0, r3
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3354      	adds	r3, #84	; 0x54
 8002406:	4602      	mov	r2, r0
 8002408:	701a      	strb	r2, [r3, #0]
}
 800240a:	e163      	b.n	80026d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b02      	cmp	r3, #2
 8002420:	f040 80f6 	bne.w	8002610 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3361      	adds	r3, #97	; 0x61
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d109      	bne.n	800244c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3360      	adds	r3, #96	; 0x60
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e0c9      	b.n	80025e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3361      	adds	r3, #97	; 0x61
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b05      	cmp	r3, #5
 800245e:	d109      	bne.n	8002474 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3360      	adds	r3, #96	; 0x60
 800246e:	2205      	movs	r2, #5
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	e0b5      	b.n	80025e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3361      	adds	r3, #97	; 0x61
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b06      	cmp	r3, #6
 8002486:	d009      	beq.n	800249c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3361      	adds	r3, #97	; 0x61
 8002496:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002498:	2b08      	cmp	r3, #8
 800249a:	d150      	bne.n	800253e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	335c      	adds	r3, #92	; 0x5c
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	202c      	movs	r0, #44	; 0x2c
 80024b4:	fb00 f303 	mul.w	r3, r0, r3
 80024b8:	440b      	add	r3, r1
 80024ba:	335c      	adds	r3, #92	; 0x5c
 80024bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	335c      	adds	r3, #92	; 0x5c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d912      	bls.n	80024f8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	335c      	adds	r3, #92	; 0x5c
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3360      	adds	r3, #96	; 0x60
 80024f2:	2204      	movs	r2, #4
 80024f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024f6:	e073      	b.n	80025e0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	3360      	adds	r3, #96	; 0x60
 8002506:	2202      	movs	r2, #2
 8002508:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002520:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002528:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800253c:	e050      	b.n	80025e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3361      	adds	r3, #97	; 0x61
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b03      	cmp	r3, #3
 8002550:	d122      	bne.n	8002598 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	3360      	adds	r3, #96	; 0x60
 8002560:	2202      	movs	r2, #2
 8002562:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800257a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002582:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	461a      	mov	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e023      	b.n	80025e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	212c      	movs	r1, #44	; 0x2c
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	3361      	adds	r3, #97	; 0x61
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b07      	cmp	r3, #7
 80025aa:	d119      	bne.n	80025e0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	335c      	adds	r3, #92	; 0x5c
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	202c      	movs	r0, #44	; 0x2c
 80025c4:	fb00 f303 	mul.w	r3, r0, r3
 80025c8:	440b      	add	r3, r1
 80025ca:	335c      	adds	r3, #92	; 0x5c
 80025cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	2204      	movs	r2, #4
 80025de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	461a      	mov	r2, r3
 80025ee:	2302      	movs	r3, #2
 80025f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	b2d9      	uxtb	r1, r3
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	202c      	movs	r0, #44	; 0x2c
 80025fc:	fb00 f303 	mul.w	r3, r0, r3
 8002600:	4413      	add	r3, r2
 8002602:	3360      	adds	r3, #96	; 0x60
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f006 f8bb 	bl	8008784 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800260e:	e061      	b.n	80026d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b10      	cmp	r3, #16
 8002624:	d156      	bne.n	80026d4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	333f      	adds	r3, #63	; 0x3f
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d111      	bne.n	800265e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	335c      	adds	r3, #92	; 0x5c
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fdef 	bl	800623a <USB_HC_Halt>
 800265c:	e031      	b.n	80026c2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	333f      	adds	r3, #63	; 0x3f
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	333f      	adds	r3, #63	; 0x3f
 8002680:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002682:	2b02      	cmp	r3, #2
 8002684:	d11d      	bne.n	80026c2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	335c      	adds	r3, #92	; 0x5c
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d110      	bne.n	80026c2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3361      	adds	r3, #97	; 0x61
 80026ae:	2203      	movs	r2, #3
 80026b0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 fdbc 	bl	800623a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	461a      	mov	r2, r3
 80026d0:	2310      	movs	r3, #16
 80026d2:	6093      	str	r3, [r2, #8]
}
 80026d4:	bf00      	nop
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b04      	cmp	r3, #4
 800270a:	d11a      	bne.n	8002742 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	461a      	mov	r2, r3
 800271a:	2304      	movs	r3, #4
 800271c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3361      	adds	r3, #97	; 0x61
 800272c:	2206      	movs	r2, #6
 800272e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fd7d 	bl	800623a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002740:	e331      	b.n	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b20      	cmp	r3, #32
 8002756:	d12e      	bne.n	80027b6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	461a      	mov	r2, r3
 8002766:	2320      	movs	r3, #32
 8002768:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	333d      	adds	r3, #61	; 0x3d
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	f040 8313 	bne.w	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	333d      	adds	r3, #61	; 0x3d
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3360      	adds	r3, #96	; 0x60
 80027a0:	2202      	movs	r2, #2
 80027a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fd43 	bl	800623a <USB_HC_Halt>
}
 80027b4:	e2f7      	b.n	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027cc:	d112      	bne.n	80027f4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fd24 	bl	800623a <USB_HC_Halt>
}
 80027f2:	e2d8      	b.n	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d140      	bne.n	800288c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d111      	bne.n	8002856 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	333d      	adds	r3, #61	; 0x3d
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	461a      	mov	r2, r3
 8002852:	2340      	movs	r3, #64	; 0x40
 8002854:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	2301      	movs	r3, #1
 8002866:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3361      	adds	r3, #97	; 0x61
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fcd8 	bl	800623a <USB_HC_Halt>
}
 800288a:	e28c      	b.n	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d12c      	bne.n	80028fc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3361      	adds	r3, #97	; 0x61
 80028b0:	2204      	movs	r2, #4
 80028b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	333d      	adds	r3, #61	; 0x3d
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	335c      	adds	r3, #92	; 0x5c
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fca9 	bl	800623a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	461a      	mov	r2, r3
 80028f6:	2340      	movs	r3, #64	; 0x40
 80028f8:	6093      	str	r3, [r2, #8]
}
 80028fa:	e254      	b.n	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11a      	bne.n	8002948 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	461a      	mov	r2, r3
 8002920:	2308      	movs	r3, #8
 8002922:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3361      	adds	r3, #97	; 0x61
 8002932:	2205      	movs	r2, #5
 8002934:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f003 fc7a 	bl	800623a <USB_HC_Halt>
}
 8002946:	e22e      	b.n	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b10      	cmp	r3, #16
 800295c:	d140      	bne.n	80029e0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	335c      	adds	r3, #92	; 0x5c
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3361      	adds	r3, #97	; 0x61
 800297e:	2203      	movs	r2, #3
 8002980:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	333d      	adds	r3, #61	; 0x3d
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d112      	bne.n	80029bc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333c      	adds	r3, #60	; 0x3c
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d108      	bne.n	80029bc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	333d      	adds	r3, #61	; 0x3d
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 fc37 	bl	800623a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	461a      	mov	r2, r3
 80029da:	2310      	movs	r3, #16
 80029dc:	6093      	str	r3, [r2, #8]
}
 80029de:	e1e2      	b.n	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b80      	cmp	r3, #128	; 0x80
 80029f4:	d164      	bne.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d111      	bne.n	8002a22 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3361      	adds	r3, #97	; 0x61
 8002a0c:	2206      	movs	r2, #6
 8002a0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fc0d 	bl	800623a <USB_HC_Halt>
 8002a20:	e044      	b.n	8002aac <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	335c      	adds	r3, #92	; 0x5c
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	202c      	movs	r0, #44	; 0x2c
 8002a3a:	fb00 f303 	mul.w	r3, r0, r3
 8002a3e:	440b      	add	r3, r1
 8002a40:	335c      	adds	r3, #92	; 0x5c
 8002a42:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	335c      	adds	r3, #92	; 0x5c
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d920      	bls.n	8002a9a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	335c      	adds	r3, #92	; 0x5c
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3360      	adds	r3, #96	; 0x60
 8002a78:	2204      	movs	r2, #4
 8002a7a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	b2d9      	uxtb	r1, r3
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	202c      	movs	r0, #44	; 0x2c
 8002a86:	fb00 f303 	mul.w	r3, r0, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3360      	adds	r3, #96	; 0x60
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f005 fe76 	bl	8008784 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a98:	e008      	b.n	8002aac <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3360      	adds	r3, #96	; 0x60
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	6093      	str	r3, [r2, #8]
}
 8002abe:	e172      	b.n	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad6:	d11b      	bne.n	8002b10 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 fba0 	bl	800623a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	461a      	mov	r2, r3
 8002b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b0c:	6093      	str	r3, [r2, #8]
}
 8002b0e:	e14a      	b.n	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	f040 813f 	bne.w	8002da6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3361      	adds	r3, #97	; 0x61
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d17d      	bne.n	8002c38 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3360      	adds	r3, #96	; 0x60
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	333f      	adds	r3, #63	; 0x3f
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d00a      	beq.n	8002b78 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	333f      	adds	r3, #63	; 0x3f
 8002b70:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	f040 8100 	bne.w	8002d78 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d113      	bne.n	8002ba8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3355      	adds	r3, #85	; 0x55
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	f083 0301 	eor.w	r3, r3, #1
 8002b94:	b2d8      	uxtb	r0, r3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3355      	adds	r3, #85	; 0x55
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	f040 80e3 	bne.w	8002d78 <HCD_HC_OUT_IRQHandler+0x69c>
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	334c      	adds	r3, #76	; 0x4c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80d8 	beq.w	8002d78 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	334c      	adds	r3, #76	; 0x4c
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	202c      	movs	r0, #44	; 0x2c
 8002bde:	fb00 f202 	mul.w	r2, r0, r2
 8002be2:	440a      	add	r2, r1
 8002be4:	3240      	adds	r2, #64	; 0x40
 8002be6:	8812      	ldrh	r2, [r2, #0]
 8002be8:	4413      	add	r3, r2
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	202c      	movs	r0, #44	; 0x2c
 8002bf2:	fb00 f202 	mul.w	r2, r0, r2
 8002bf6:	440a      	add	r2, r1
 8002bf8:	3240      	adds	r2, #64	; 0x40
 8002bfa:	8812      	ldrh	r2, [r2, #0]
 8002bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80b5 	beq.w	8002d78 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3355      	adds	r3, #85	; 0x55
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f083 0301 	eor.w	r3, r3, #1
 8002c22:	b2d8      	uxtb	r0, r3
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3355      	adds	r3, #85	; 0x55
 8002c32:	4602      	mov	r2, r0
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e09f      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3361      	adds	r3, #97	; 0x61
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d109      	bne.n	8002c60 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3360      	adds	r3, #96	; 0x60
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e08b      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3361      	adds	r3, #97	; 0x61
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d109      	bne.n	8002c88 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3360      	adds	r3, #96	; 0x60
 8002c82:	2202      	movs	r2, #2
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e077      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3361      	adds	r3, #97	; 0x61
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d109      	bne.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	2205      	movs	r2, #5
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e063      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3361      	adds	r3, #97	; 0x61
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d009      	beq.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3361      	adds	r3, #97	; 0x61
 8002cd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d14f      	bne.n	8002d78 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	335c      	adds	r3, #92	; 0x5c
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	202c      	movs	r0, #44	; 0x2c
 8002cf0:	fb00 f303 	mul.w	r3, r0, r3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	335c      	adds	r3, #92	; 0x5c
 8002cf8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	335c      	adds	r3, #92	; 0x5c
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d912      	bls.n	8002d34 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	335c      	adds	r3, #92	; 0x5c
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3360      	adds	r3, #96	; 0x60
 8002d2e:	2204      	movs	r2, #4
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e021      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	3360      	adds	r3, #96	; 0x60
 8002d42:	2202      	movs	r2, #2
 8002d44:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d5c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d64:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	461a      	mov	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	461a      	mov	r2, r3
 8002d86:	2302      	movs	r3, #2
 8002d88:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	b2d9      	uxtb	r1, r3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	202c      	movs	r0, #44	; 0x2c
 8002d94:	fb00 f303 	mul.w	r3, r0, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3360      	adds	r3, #96	; 0x60
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f005 fcef 	bl	8008784 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002da6:	bf00      	nop
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b08a      	sub	sp, #40	; 0x28
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	0c5b      	lsrs	r3, r3, #17
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d004      	beq.n	8002df4 <HCD_RXQLVL_IRQHandler+0x46>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	f000 80a9 	beq.w	8002f44 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002df2:	e0aa      	b.n	8002f4a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80a6 	beq.w	8002f48 <HCD_RXQLVL_IRQHandler+0x19a>
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3344      	adds	r3, #68	; 0x44
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 809b 	beq.w	8002f48 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3350      	adds	r3, #80	; 0x50
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	441a      	add	r2, r3
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	202c      	movs	r0, #44	; 0x2c
 8002e2c:	fb00 f303 	mul.w	r3, r0, r3
 8002e30:	440b      	add	r3, r1
 8002e32:	334c      	adds	r3, #76	; 0x4c
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d87a      	bhi.n	8002f30 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3344      	adds	r3, #68	; 0x44
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	b292      	uxth	r2, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f002 fd48 	bl	80058e8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3344      	adds	r3, #68	; 0x44
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	441a      	add	r2, r3
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	202c      	movs	r0, #44	; 0x2c
 8002e72:	fb00 f303 	mul.w	r3, r0, r3
 8002e76:	440b      	add	r3, r1
 8002e78:	3344      	adds	r3, #68	; 0x44
 8002e7a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3350      	adds	r3, #80	; 0x50
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	441a      	add	r2, r3
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	202c      	movs	r0, #44	; 0x2c
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3350      	adds	r3, #80	; 0x50
 8002e9e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	0cdb      	lsrs	r3, r3, #19
 8002eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3340      	adds	r3, #64	; 0x40
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d13c      	bne.n	8002f48 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d039      	beq.n	8002f48 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ef2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3354      	adds	r3, #84	; 0x54
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	f083 0301 	eor.w	r3, r3, #1
 8002f1a:	b2d8      	uxtb	r0, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3354      	adds	r3, #84	; 0x54
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	701a      	strb	r2, [r3, #0]
      break;
 8002f2e:	e00b      	b.n	8002f48 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3360      	adds	r3, #96	; 0x60
 8002f3e:	2204      	movs	r2, #4
 8002f40:	701a      	strb	r2, [r3, #0]
      break;
 8002f42:	e001      	b.n	8002f48 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f44:	bf00      	nop
 8002f46:	e000      	b.n	8002f4a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f48:	bf00      	nop
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	3728      	adds	r7, #40	; 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f7e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d10b      	bne.n	8002fa2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f005 fbd9 	bl	800874c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d132      	bne.n	8003012 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f043 0308 	orr.w	r3, r3, #8
 8002fb2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d126      	bne.n	800300c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d113      	bne.n	8002fee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fd0:	d106      	bne.n	8002fe0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 fdf3 	bl	8005bc4 <USB_InitFSLSPClkSel>
 8002fde:	e011      	b.n	8003004 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f002 fdec 	bl	8005bc4 <USB_InitFSLSPClkSel>
 8002fec:	e00a      	b.n	8003004 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d106      	bne.n	8003004 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003002:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f005 fbcb 	bl	80087a0 <HAL_HCD_PortEnabled_Callback>
 800300a:	e002      	b.n	8003012 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f005 fbd5 	bl	80087bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b20      	cmp	r3, #32
 800301a:	d103      	bne.n	8003024 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f043 0320 	orr.w	r3, r3, #32
 8003022:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800302a:	461a      	mov	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6013      	str	r3, [r2, #0]
}
 8003030:	bf00      	nop
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e12b      	b.n	80032a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd fde2 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2224      	movs	r2, #36	; 0x24
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800309a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800309c:	f001 fa20 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 80030a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4a81      	ldr	r2, [pc, #516]	; (80032ac <HAL_I2C_Init+0x274>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d807      	bhi.n	80030bc <HAL_I2C_Init+0x84>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a80      	ldr	r2, [pc, #512]	; (80032b0 <HAL_I2C_Init+0x278>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	bf94      	ite	ls
 80030b4:	2301      	movls	r3, #1
 80030b6:	2300      	movhi	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e006      	b.n	80030ca <HAL_I2C_Init+0x92>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4a7d      	ldr	r2, [pc, #500]	; (80032b4 <HAL_I2C_Init+0x27c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	bf94      	ite	ls
 80030c4:	2301      	movls	r3, #1
 80030c6:	2300      	movhi	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e0e7      	b.n	80032a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4a78      	ldr	r2, [pc, #480]	; (80032b8 <HAL_I2C_Init+0x280>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	0c9b      	lsrs	r3, r3, #18
 80030dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a6a      	ldr	r2, [pc, #424]	; (80032ac <HAL_I2C_Init+0x274>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d802      	bhi.n	800310c <HAL_I2C_Init+0xd4>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3301      	adds	r3, #1
 800310a:	e009      	b.n	8003120 <HAL_I2C_Init+0xe8>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003112:	fb02 f303 	mul.w	r3, r2, r3
 8003116:	4a69      	ldr	r2, [pc, #420]	; (80032bc <HAL_I2C_Init+0x284>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	3301      	adds	r3, #1
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003132:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	495c      	ldr	r1, [pc, #368]	; (80032ac <HAL_I2C_Init+0x274>)
 800313c:	428b      	cmp	r3, r1
 800313e:	d819      	bhi.n	8003174 <HAL_I2C_Init+0x13c>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1e59      	subs	r1, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	fbb1 f3f3 	udiv	r3, r1, r3
 800314e:	1c59      	adds	r1, r3, #1
 8003150:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003154:	400b      	ands	r3, r1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_I2C_Init+0x138>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1e59      	subs	r1, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fbb1 f3f3 	udiv	r3, r1, r3
 8003168:	3301      	adds	r3, #1
 800316a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316e:	e051      	b.n	8003214 <HAL_I2C_Init+0x1dc>
 8003170:	2304      	movs	r3, #4
 8003172:	e04f      	b.n	8003214 <HAL_I2C_Init+0x1dc>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d111      	bne.n	80031a0 <HAL_I2C_Init+0x168>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e58      	subs	r0, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	440b      	add	r3, r1
 800318a:	fbb0 f3f3 	udiv	r3, r0, r3
 800318e:	3301      	adds	r3, #1
 8003190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e012      	b.n	80031c6 <HAL_I2C_Init+0x18e>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e58      	subs	r0, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	0099      	lsls	r1, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Init+0x196>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e022      	b.n	8003214 <HAL_I2C_Init+0x1dc>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10e      	bne.n	80031f4 <HAL_I2C_Init+0x1bc>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1e58      	subs	r0, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	440b      	add	r3, r1
 80031e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e8:	3301      	adds	r3, #1
 80031ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f2:	e00f      	b.n	8003214 <HAL_I2C_Init+0x1dc>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e58      	subs	r0, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	0099      	lsls	r1, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	6809      	ldr	r1, [r1, #0]
 8003218:	4313      	orrs	r3, r2
 800321a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003242:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6911      	ldr	r1, [r2, #16]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68d2      	ldr	r2, [r2, #12]
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	430b      	orrs	r3, r1
 8003256:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	000186a0 	.word	0x000186a0
 80032b0:	001e847f 	.word	0x001e847f
 80032b4:	003d08ff 	.word	0x003d08ff
 80032b8:	431bde83 	.word	0x431bde83
 80032bc:	10624dd3 	.word	0x10624dd3

080032c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e128      	b.n	8003524 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a90      	ldr	r2, [pc, #576]	; (800352c <HAL_I2S_Init+0x26c>)
 80032ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7fd fce3 	bl	8000cb8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003308:	f023 030f 	bic.w	r3, r3, #15
 800330c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2202      	movs	r2, #2
 8003314:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d060      	beq.n	80033e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d102      	bne.n	800332c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003326:	2310      	movs	r3, #16
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	e001      	b.n	8003330 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b20      	cmp	r3, #32
 8003336:	d802      	bhi.n	800333e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800333e:	2001      	movs	r0, #1
 8003340:	f001 fa0a 	bl	8004758 <HAL_RCCEx_GetPeriphCLKFreq>
 8003344:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334e:	d125      	bne.n	800339c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	461a      	mov	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	3305      	adds	r3, #5
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	e01f      	b.n	80033ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	fbb2 f2f3 	udiv	r2, r2, r3
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	461a      	mov	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	3305      	adds	r3, #5
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e00e      	b.n	80033ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	461a      	mov	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	3305      	adds	r3, #5
 80033b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4a5c      	ldr	r2, [pc, #368]	; (8003530 <HAL_I2S_Init+0x270>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	08db      	lsrs	r3, r3, #3
 80033c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	e003      	b.n	80033e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033e0:	2302      	movs	r3, #2
 80033e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d902      	bls.n	80033f4 <HAL_I2S_Init+0x134>
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2bff      	cmp	r3, #255	; 0xff
 80033f2:	d907      	bls.n	8003404 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	f043 0210 	orr.w	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e08f      	b.n	8003524 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	ea42 0103 	orr.w	r1, r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	430a      	orrs	r2, r1
 8003416:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003422:	f023 030f 	bic.w	r3, r3, #15
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6851      	ldr	r1, [r2, #4]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6892      	ldr	r2, [r2, #8]
 800342e:	4311      	orrs	r1, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	68d2      	ldr	r2, [r2, #12]
 8003434:	4311      	orrs	r1, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6992      	ldr	r2, [r2, #24]
 800343a:	430a      	orrs	r2, r1
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003446:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d161      	bne.n	8003514 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a38      	ldr	r2, [pc, #224]	; (8003534 <HAL_I2S_Init+0x274>)
 8003454:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a37      	ldr	r2, [pc, #220]	; (8003538 <HAL_I2S_Init+0x278>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_I2S_Init+0x1a4>
 8003460:	4b36      	ldr	r3, [pc, #216]	; (800353c <HAL_I2S_Init+0x27c>)
 8003462:	e001      	b.n	8003468 <HAL_I2S_Init+0x1a8>
 8003464:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	4932      	ldr	r1, [pc, #200]	; (8003538 <HAL_I2S_Init+0x278>)
 8003470:	428a      	cmp	r2, r1
 8003472:	d101      	bne.n	8003478 <HAL_I2S_Init+0x1b8>
 8003474:	4a31      	ldr	r2, [pc, #196]	; (800353c <HAL_I2S_Init+0x27c>)
 8003476:	e001      	b.n	800347c <HAL_I2S_Init+0x1bc>
 8003478:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800347c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003480:	f023 030f 	bic.w	r3, r3, #15
 8003484:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2b      	ldr	r2, [pc, #172]	; (8003538 <HAL_I2S_Init+0x278>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d101      	bne.n	8003494 <HAL_I2S_Init+0x1d4>
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <HAL_I2S_Init+0x27c>)
 8003492:	e001      	b.n	8003498 <HAL_I2S_Init+0x1d8>
 8003494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003498:	2202      	movs	r2, #2
 800349a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a25      	ldr	r2, [pc, #148]	; (8003538 <HAL_I2S_Init+0x278>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_I2S_Init+0x1ea>
 80034a6:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_I2S_Init+0x27c>)
 80034a8:	e001      	b.n	80034ae <HAL_I2S_Init+0x1ee>
 80034aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ba:	d003      	beq.n	80034c4 <HAL_I2S_Init+0x204>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d103      	bne.n	80034cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	e001      	b.n	80034d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034da:	4313      	orrs	r3, r2
 80034dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034ee:	4313      	orrs	r3, r2
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	897b      	ldrh	r3, [r7, #10]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a0d      	ldr	r2, [pc, #52]	; (8003538 <HAL_I2S_Init+0x278>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_I2S_Init+0x24c>
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <HAL_I2S_Init+0x27c>)
 800350a:	e001      	b.n	8003510 <HAL_I2S_Init+0x250>
 800350c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003510:	897a      	ldrh	r2, [r7, #10]
 8003512:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	08003637 	.word	0x08003637
 8003530:	cccccccd 	.word	0xcccccccd
 8003534:	0800374d 	.word	0x0800374d
 8003538:	40003800 	.word	0x40003800
 800353c:	40003400 	.word	0x40003400

08003540 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	881a      	ldrh	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c9a      	adds	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10e      	bne.n	80035d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff ffb8 	bl	8003540 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	b292      	uxth	r2, r2
 80035ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	1c9a      	adds	r2, r3, #2
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10e      	bne.n	800362e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800361e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff93 	bl	8003554 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b04      	cmp	r3, #4
 8003650:	d13a      	bne.n	80036c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d109      	bne.n	8003670 <I2S_IRQHandler+0x3a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d102      	bne.n	8003670 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ffb4 	bl	80035d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d126      	bne.n	80036c8 <I2S_IRQHandler+0x92>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b20      	cmp	r3, #32
 8003686:	d11f      	bne.n	80036c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003696:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f043 0202 	orr.w	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff50 	bl	8003568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d136      	bne.n	8003742 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d109      	bne.n	80036f2 <I2S_IRQHandler+0xbc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	d102      	bne.n	80036f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff45 	bl	800357c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d122      	bne.n	8003742 <I2S_IRQHandler+0x10c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b20      	cmp	r3, #32
 8003708:	d11b      	bne.n	8003742 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003718:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	f043 0204 	orr.w	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff13 	bl	8003568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a92      	ldr	r2, [pc, #584]	; (80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003766:	4b92      	ldr	r3, [pc, #584]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003768:	e001      	b.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800376a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a8b      	ldr	r2, [pc, #556]	; (80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003784:	4b8a      	ldr	r3, [pc, #552]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003786:	e001      	b.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003798:	d004      	beq.n	80037a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 8099 	bne.w	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d107      	bne.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f925 	bl	8003a08 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f9c8 	bl	8003b68 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d13a      	bne.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d035      	beq.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6e      	ldr	r2, [pc, #440]	; (80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d101      	bne.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037f6:	4b6e      	ldr	r3, [pc, #440]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f8:	e001      	b.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4969      	ldr	r1, [pc, #420]	; (80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003806:	428b      	cmp	r3, r1
 8003808:	d101      	bne.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800380a:	4b69      	ldr	r3, [pc, #420]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800380c:	e001      	b.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800380e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003812:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003816:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003826:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f043 0202 	orr.w	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff fe88 	bl	8003568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b08      	cmp	r3, #8
 8003860:	f040 80c3 	bne.w	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80bd 	beq.w	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800387e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a49      	ldr	r2, [pc, #292]	; (80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800388a:	4b49      	ldr	r3, [pc, #292]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800388c:	e001      	b.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800388e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4944      	ldr	r1, [pc, #272]	; (80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800389a:	428b      	cmp	r3, r1
 800389c:	d101      	bne.n	80038a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800389e:	4b44      	ldr	r3, [pc, #272]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a0:	e001      	b.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038ac:	2300      	movs	r3, #0
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f043 0204 	orr.w	r2, r3, #4
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fe4a 	bl	8003568 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038d4:	e089      	b.n	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d107      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8be 	bl	8003a6c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f8fd 	bl	8003b04 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d12f      	bne.n	8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02a      	beq.n	8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800392c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800393a:	e001      	b.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800393c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4919      	ldr	r1, [pc, #100]	; (80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003948:	428b      	cmp	r3, r1
 800394a:	d101      	bne.n	8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800394c:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800394e:	e001      	b.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003954:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003958:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f043 0202 	orr.w	r2, r3, #2
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fdfa 	bl	8003568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b08      	cmp	r3, #8
 800397c:	d136      	bne.n	80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d031      	beq.n	80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003994:	e001      	b.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4902      	ldr	r1, [pc, #8]	; (80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039a2:	428b      	cmp	r3, r1
 80039a4:	d106      	bne.n	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80039a6:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039a8:	e006      	b.n	80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80039aa:	bf00      	nop
 80039ac:	40003800 	.word	0x40003800
 80039b0:	40003400 	.word	0x40003400
 80039b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039bc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f043 0204 	orr.w	r2, r3, #4
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fdc0 	bl	8003568 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039e8:	e000      	b.n	80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039ea:	bf00      	nop
}
 80039ec:	bf00      	nop
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c99      	adds	r1, r3, #2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6251      	str	r1, [r2, #36]	; 0x24
 8003a1a:	881a      	ldrh	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d113      	bne.n	8003a62 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ffc9 	bl	80039f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	1c99      	adds	r1, r3, #2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6251      	str	r1, [r2, #36]	; 0x24
 8003a7e:	8819      	ldrh	r1, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <I2SEx_TxISR_I2SExt+0x90>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <I2SEx_TxISR_I2SExt+0x22>
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <I2SEx_TxISR_I2SExt+0x94>)
 8003a8c:	e001      	b.n	8003a92 <I2SEx_TxISR_I2SExt+0x26>
 8003a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a92:	460a      	mov	r2, r1
 8003a94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d121      	bne.n	8003af2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a12      	ldr	r2, [pc, #72]	; (8003afc <I2SEx_TxISR_I2SExt+0x90>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <I2SEx_TxISR_I2SExt+0x50>
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <I2SEx_TxISR_I2SExt+0x94>)
 8003aba:	e001      	b.n	8003ac0 <I2SEx_TxISR_I2SExt+0x54>
 8003abc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	490d      	ldr	r1, [pc, #52]	; (8003afc <I2SEx_TxISR_I2SExt+0x90>)
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	d101      	bne.n	8003ad0 <I2SEx_TxISR_I2SExt+0x64>
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <I2SEx_TxISR_I2SExt+0x94>)
 8003ace:	e001      	b.n	8003ad4 <I2SEx_TxISR_I2SExt+0x68>
 8003ad0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff81 	bl	80039f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40003800 	.word	0x40003800
 8003b00:	40003400 	.word	0x40003400

08003b04 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68d8      	ldr	r0, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	1c99      	adds	r1, r3, #2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b1c:	b282      	uxth	r2, r0
 8003b1e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d113      	bne.n	8003b60 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b46:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ff4a 	bl	80039f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <I2SEx_RxISR_I2SExt+0x90>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <I2SEx_RxISR_I2SExt+0x16>
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <I2SEx_RxISR_I2SExt+0x94>)
 8003b7c:	e001      	b.n	8003b82 <I2SEx_RxISR_I2SExt+0x1a>
 8003b7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b82:	68d8      	ldr	r0, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	1c99      	adds	r1, r3, #2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b8e:	b282      	uxth	r2, r0
 8003b90:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d121      	bne.n	8003bee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <I2SEx_RxISR_I2SExt+0x90>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <I2SEx_RxISR_I2SExt+0x50>
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <I2SEx_RxISR_I2SExt+0x94>)
 8003bb6:	e001      	b.n	8003bbc <I2SEx_RxISR_I2SExt+0x54>
 8003bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	490d      	ldr	r1, [pc, #52]	; (8003bf8 <I2SEx_RxISR_I2SExt+0x90>)
 8003bc4:	428b      	cmp	r3, r1
 8003bc6:	d101      	bne.n	8003bcc <I2SEx_RxISR_I2SExt+0x64>
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <I2SEx_RxISR_I2SExt+0x94>)
 8003bca:	e001      	b.n	8003bd0 <I2SEx_RxISR_I2SExt+0x68>
 8003bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bd4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ff03 	bl	80039f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40003800 	.word	0x40003800
 8003bfc:	40003400 	.word	0x40003400

08003c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e267      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d075      	beq.n	8003d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c1e:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d00c      	beq.n	8003c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2a:	4b85      	ldr	r3, [pc, #532]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d112      	bne.n	8003c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c36:	4b82      	ldr	r3, [pc, #520]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c42:	d10b      	bne.n	8003c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	4b7e      	ldr	r3, [pc, #504]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d05b      	beq.n	8003d08 <HAL_RCC_OscConfig+0x108>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d157      	bne.n	8003d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e242      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d106      	bne.n	8003c74 <HAL_RCC_OscConfig+0x74>
 8003c66:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a75      	ldr	r2, [pc, #468]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e01d      	b.n	8003cb0 <HAL_RCC_OscConfig+0xb0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x98>
 8003c7e:	4b70      	ldr	r3, [pc, #448]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6f      	ldr	r2, [pc, #444]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b6d      	ldr	r3, [pc, #436]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6c      	ldr	r2, [pc, #432]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0xb0>
 8003c98:	4b69      	ldr	r3, [pc, #420]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a68      	ldr	r2, [pc, #416]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b66      	ldr	r3, [pc, #408]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a65      	ldr	r2, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d013      	beq.n	8003ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fd faec 	bl	8001294 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7fd fae8 	bl	8001294 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e207      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	4b5b      	ldr	r3, [pc, #364]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0xc0>
 8003cde:	e014      	b.n	8003d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fad8 	bl	8001294 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fad4 	bl	8001294 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e1f3      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	4b51      	ldr	r3, [pc, #324]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0xe8>
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d063      	beq.n	8003dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d16:	4b4a      	ldr	r3, [pc, #296]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d22:	4b47      	ldr	r3, [pc, #284]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d11c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d2e:	4b44      	ldr	r3, [pc, #272]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d116      	bne.n	8003d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3a:	4b41      	ldr	r3, [pc, #260]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_RCC_OscConfig+0x152>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e1c7      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d52:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4937      	ldr	r1, [pc, #220]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d66:	e03a      	b.n	8003dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d020      	beq.n	8003db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d70:	4b34      	ldr	r3, [pc, #208]	; (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fd fa8d 	bl	8001294 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7e:	f7fd fa89 	bl	8001294 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e1a8      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d90:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4925      	ldr	r1, [pc, #148]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	600b      	str	r3, [r1, #0]
 8003db0:	e015      	b.n	8003dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCC_OscConfig+0x244>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fd fa6c 	bl	8001294 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fd fa68 	bl	8001294 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e187      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d036      	beq.n	8003e58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_RCC_OscConfig+0x248>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df8:	f7fd fa4c 	bl	8001294 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e00:	f7fd fa48 	bl	8001294 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e167      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_OscConfig+0x240>)
 8003e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x200>
 8003e1e:	e01b      	b.n	8003e58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_OscConfig+0x248>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e26:	f7fd fa35 	bl	8001294 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e2c:	e00e      	b.n	8003e4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2e:	f7fd fa31 	bl	8001294 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d907      	bls.n	8003e4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e150      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
 8003e40:	40023800 	.word	0x40023800
 8003e44:	42470000 	.word	0x42470000
 8003e48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e4c:	4b88      	ldr	r3, [pc, #544]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ea      	bne.n	8003e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8097 	beq.w	8003f94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e66:	2300      	movs	r3, #0
 8003e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6a:	4b81      	ldr	r3, [pc, #516]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10f      	bne.n	8003e96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	4b7d      	ldr	r3, [pc, #500]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	4a7c      	ldr	r2, [pc, #496]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e84:	6413      	str	r3, [r2, #64]	; 0x40
 8003e86:	4b7a      	ldr	r3, [pc, #488]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e92:	2301      	movs	r3, #1
 8003e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e96:	4b77      	ldr	r3, [pc, #476]	; (8004074 <HAL_RCC_OscConfig+0x474>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d118      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ea2:	4b74      	ldr	r3, [pc, #464]	; (8004074 <HAL_RCC_OscConfig+0x474>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a73      	ldr	r2, [pc, #460]	; (8004074 <HAL_RCC_OscConfig+0x474>)
 8003ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eae:	f7fd f9f1 	bl	8001294 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb6:	f7fd f9ed 	bl	8001294 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e10c      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec8:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <HAL_RCC_OscConfig+0x474>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d106      	bne.n	8003eea <HAL_RCC_OscConfig+0x2ea>
 8003edc:	4b64      	ldr	r3, [pc, #400]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	4a63      	ldr	r2, [pc, #396]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee8:	e01c      	b.n	8003f24 <HAL_RCC_OscConfig+0x324>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCC_OscConfig+0x30c>
 8003ef2:	4b5f      	ldr	r3, [pc, #380]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a5e      	ldr	r2, [pc, #376]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
 8003efe:	4b5c      	ldr	r3, [pc, #368]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	4a5b      	ldr	r2, [pc, #364]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0a:	e00b      	b.n	8003f24 <HAL_RCC_OscConfig+0x324>
 8003f0c:	4b58      	ldr	r3, [pc, #352]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a57      	ldr	r2, [pc, #348]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
 8003f18:	4b55      	ldr	r3, [pc, #340]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	4a54      	ldr	r2, [pc, #336]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	f023 0304 	bic.w	r3, r3, #4
 8003f22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d015      	beq.n	8003f58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fd f9b2 	bl	8001294 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f7fd f9ae 	bl	8001294 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e0cb      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	4b49      	ldr	r3, [pc, #292]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0ee      	beq.n	8003f34 <HAL_RCC_OscConfig+0x334>
 8003f56:	e014      	b.n	8003f82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f58:	f7fd f99c 	bl	8001294 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f60:	f7fd f998 	bl	8001294 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e0b5      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f76:	4b3e      	ldr	r3, [pc, #248]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ee      	bne.n	8003f60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d105      	bne.n	8003f94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f88:	4b39      	ldr	r3, [pc, #228]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	4a38      	ldr	r2, [pc, #224]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80a1 	beq.w	80040e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f9e:	4b34      	ldr	r3, [pc, #208]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d05c      	beq.n	8004064 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d141      	bne.n	8004036 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb2:	4b31      	ldr	r3, [pc, #196]	; (8004078 <HAL_RCC_OscConfig+0x478>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fd f96c 	bl	8001294 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fd f968 	bl	8001294 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e087      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	019b      	lsls	r3, r3, #6
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	041b      	lsls	r3, r3, #16
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	061b      	lsls	r3, r3, #24
 8004002:	491b      	ldr	r1, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8004004:	4313      	orrs	r3, r2
 8004006:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004008:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <HAL_RCC_OscConfig+0x478>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fd f941 	bl	8001294 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004016:	f7fd f93d 	bl	8001294 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e05c      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x416>
 8004034:	e054      	b.n	80040e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_RCC_OscConfig+0x478>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fd f92a 	bl	8001294 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7fd f926 	bl	8001294 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e045      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCC_OscConfig+0x470>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x444>
 8004062:	e03d      	b.n	80040e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d107      	bne.n	800407c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e038      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
 8004070:	40023800 	.word	0x40023800
 8004074:	40007000 	.word	0x40007000
 8004078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <HAL_RCC_OscConfig+0x4ec>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d028      	beq.n	80040dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d121      	bne.n	80040dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d11a      	bne.n	80040dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040ac:	4013      	ands	r3, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d111      	bne.n	80040dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	3b01      	subs	r3, #1
 80040c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d107      	bne.n	80040dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800

080040f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0cc      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004104:	4b68      	ldr	r3, [pc, #416]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d90c      	bls.n	800412c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b65      	ldr	r3, [pc, #404]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b63      	ldr	r3, [pc, #396]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0b8      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004144:	4b59      	ldr	r3, [pc, #356]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4a58      	ldr	r2, [pc, #352]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800414e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800415c:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a52      	ldr	r2, [pc, #328]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004168:	4b50      	ldr	r3, [pc, #320]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	494d      	ldr	r1, [pc, #308]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d044      	beq.n	8004210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d119      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e07f      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d003      	beq.n	80041ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d107      	bne.n	80041be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ae:	4b3f      	ldr	r3, [pc, #252]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e06f      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e067      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 0203 	bic.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4934      	ldr	r1, [pc, #208]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e0:	f7fd f858 	bl	8001294 <HAL_GetTick>
 80041e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e8:	f7fd f854 	bl	8001294 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e04f      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 020c 	and.w	r2, r3, #12
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	429a      	cmp	r2, r3
 800420e:	d1eb      	bne.n	80041e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004210:	4b25      	ldr	r3, [pc, #148]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d20c      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e032      	b.n	800429e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4916      	ldr	r1, [pc, #88]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	490e      	ldr	r1, [pc, #56]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004276:	f000 f821 	bl	80042bc <HAL_RCC_GetSysClockFreq>
 800427a:	4602      	mov	r2, r0
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	490a      	ldr	r1, [pc, #40]	; (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004288:	5ccb      	ldrb	r3, [r1, r3]
 800428a:	fa22 f303 	lsr.w	r3, r2, r3
 800428e:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc fe1e 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023c00 	.word	0x40023c00
 80042ac:	40023800 	.word	0x40023800
 80042b0:	0800ce20 	.word	0x0800ce20
 80042b4:	20000000 	.word	0x20000000
 80042b8:	20000004 	.word	0x20000004

080042bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b094      	sub	sp, #80	; 0x50
 80042c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	647b      	str	r3, [r7, #68]	; 0x44
 80042c8:	2300      	movs	r3, #0
 80042ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042cc:	2300      	movs	r3, #0
 80042ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d4:	4b79      	ldr	r3, [pc, #484]	; (80044bc <HAL_RCC_GetSysClockFreq+0x200>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 030c 	and.w	r3, r3, #12
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d00d      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x40>
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	f200 80e1 	bhi.w	80044a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x34>
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d003      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ee:	e0db      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042f0:	4b73      	ldr	r3, [pc, #460]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042f4:	e0db      	b.n	80044ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042f6:	4b73      	ldr	r3, [pc, #460]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80042f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042fa:	e0d8      	b.n	80044ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042fc:	4b6f      	ldr	r3, [pc, #444]	; (80044bc <HAL_RCC_GetSysClockFreq+0x200>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004306:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d063      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004312:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	2200      	movs	r2, #0
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
 800431c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004324:	633b      	str	r3, [r7, #48]	; 0x30
 8004326:	2300      	movs	r3, #0
 8004328:	637b      	str	r3, [r7, #52]	; 0x34
 800432a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800432e:	4622      	mov	r2, r4
 8004330:	462b      	mov	r3, r5
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f04f 0100 	mov.w	r1, #0
 800433a:	0159      	lsls	r1, r3, #5
 800433c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004340:	0150      	lsls	r0, r2, #5
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4621      	mov	r1, r4
 8004348:	1a51      	subs	r1, r2, r1
 800434a:	6139      	str	r1, [r7, #16]
 800434c:	4629      	mov	r1, r5
 800434e:	eb63 0301 	sbc.w	r3, r3, r1
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004360:	4659      	mov	r1, fp
 8004362:	018b      	lsls	r3, r1, #6
 8004364:	4651      	mov	r1, sl
 8004366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800436a:	4651      	mov	r1, sl
 800436c:	018a      	lsls	r2, r1, #6
 800436e:	4651      	mov	r1, sl
 8004370:	ebb2 0801 	subs.w	r8, r2, r1
 8004374:	4659      	mov	r1, fp
 8004376:	eb63 0901 	sbc.w	r9, r3, r1
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800438a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800438e:	4690      	mov	r8, r2
 8004390:	4699      	mov	r9, r3
 8004392:	4623      	mov	r3, r4
 8004394:	eb18 0303 	adds.w	r3, r8, r3
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	462b      	mov	r3, r5
 800439c:	eb49 0303 	adc.w	r3, r9, r3
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043ae:	4629      	mov	r1, r5
 80043b0:	024b      	lsls	r3, r1, #9
 80043b2:	4621      	mov	r1, r4
 80043b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043b8:	4621      	mov	r1, r4
 80043ba:	024a      	lsls	r2, r1, #9
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c2:	2200      	movs	r2, #0
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043cc:	f7fb ff58 	bl	8000280 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4613      	mov	r3, r2
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	e058      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043da:	4b38      	ldr	r3, [pc, #224]	; (80044bc <HAL_RCC_GetSysClockFreq+0x200>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	099b      	lsrs	r3, r3, #6
 80043e0:	2200      	movs	r2, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	4611      	mov	r1, r2
 80043e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	2300      	movs	r3, #0
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
 80043f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043f4:	4642      	mov	r2, r8
 80043f6:	464b      	mov	r3, r9
 80043f8:	f04f 0000 	mov.w	r0, #0
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	0159      	lsls	r1, r3, #5
 8004402:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004406:	0150      	lsls	r0, r2, #5
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4641      	mov	r1, r8
 800440e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004412:	4649      	mov	r1, r9
 8004414:	eb63 0b01 	sbc.w	fp, r3, r1
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004424:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004428:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800442c:	ebb2 040a 	subs.w	r4, r2, sl
 8004430:	eb63 050b 	sbc.w	r5, r3, fp
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	00eb      	lsls	r3, r5, #3
 800443e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004442:	00e2      	lsls	r2, r4, #3
 8004444:	4614      	mov	r4, r2
 8004446:	461d      	mov	r5, r3
 8004448:	4643      	mov	r3, r8
 800444a:	18e3      	adds	r3, r4, r3
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	464b      	mov	r3, r9
 8004450:	eb45 0303 	adc.w	r3, r5, r3
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004462:	4629      	mov	r1, r5
 8004464:	028b      	lsls	r3, r1, #10
 8004466:	4621      	mov	r1, r4
 8004468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800446c:	4621      	mov	r1, r4
 800446e:	028a      	lsls	r2, r1, #10
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004476:	2200      	movs	r2, #0
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	61fa      	str	r2, [r7, #28]
 800447c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004480:	f7fb fefe 	bl	8000280 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4613      	mov	r3, r2
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_GetSysClockFreq+0x200>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	3301      	adds	r3, #1
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800449c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800449e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044a6:	e002      	b.n	80044ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3750      	adds	r7, #80	; 0x50
 80044b4:	46bd      	mov	sp, r7
 80044b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ba:	bf00      	nop
 80044bc:	40023800 	.word	0x40023800
 80044c0:	00f42400 	.word	0x00f42400
 80044c4:	007a1200 	.word	0x007a1200

080044c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000000 	.word	0x20000000

080044e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044e4:	f7ff fff0 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0a9b      	lsrs	r3, r3, #10
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	0800ce30 	.word	0x0800ce30

08004508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800450c:	f7ff ffdc 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0b5b      	lsrs	r3, r3, #13
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4903      	ldr	r1, [pc, #12]	; (800452c <HAL_RCC_GetPCLK2Freq+0x24>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	0800ce30 	.word	0x0800ce30

08004530 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	220f      	movs	r2, #15
 800453e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004540:	4b12      	ldr	r3, [pc, #72]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 0203 	and.w	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800454c:	4b0f      	ldr	r3, [pc, #60]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_GetClockConfig+0x5c>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	08db      	lsrs	r3, r3, #3
 800456a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <HAL_RCC_GetClockConfig+0x60>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0207 	and.w	r2, r3, #7
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	601a      	str	r2, [r3, #0]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	40023c00 	.word	0x40023c00

08004594 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d035      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045bc:	4b62      	ldr	r3, [pc, #392]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045c2:	f7fc fe67 	bl	8001294 <HAL_GetTick>
 80045c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045ca:	f7fc fe63 	bl	8001294 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e0b0      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045dc:	4b5b      	ldr	r3, [pc, #364]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	019a      	lsls	r2, r3, #6
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	071b      	lsls	r3, r3, #28
 80045f4:	4955      	ldr	r1, [pc, #340]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045fc:	4b52      	ldr	r3, [pc, #328]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004602:	f7fc fe47 	bl	8001294 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800460a:	f7fc fe43 	bl	8001294 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e090      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800461c:	4b4b      	ldr	r3, [pc, #300]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8083 	beq.w	800473c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	4b44      	ldr	r3, [pc, #272]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a43      	ldr	r2, [pc, #268]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b41      	ldr	r3, [pc, #260]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004652:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a3e      	ldr	r2, [pc, #248]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800465e:	f7fc fe19 	bl	8001294 <HAL_GetTick>
 8004662:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004666:	f7fc fe15 	bl	8001294 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e062      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004678:	4b35      	ldr	r3, [pc, #212]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004684:	4b31      	ldr	r3, [pc, #196]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d02f      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d028      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046a2:	4b2a      	ldr	r3, [pc, #168]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046b2:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046b8:	4a24      	ldr	r2, [pc, #144]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046be:	4b23      	ldr	r3, [pc, #140]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d114      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fc fde3 	bl	8001294 <HAL_GetTick>
 80046ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7fc fddf 	bl	8001294 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e02a      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	4b18      	ldr	r3, [pc, #96]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ee      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004700:	d10d      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004716:	490d      	ldr	r1, [pc, #52]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]
 800471c:	e005      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800471e:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004724:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004728:	6093      	str	r3, [r2, #8]
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004736:	4905      	ldr	r1, [pc, #20]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	42470068 	.word	0x42470068
 800474c:	40023800 	.word	0x40023800
 8004750:	40007000 	.word	0x40007000
 8004754:	42470e40 	.word	0x42470e40

08004758 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d13e      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004776:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d12f      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800478c:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800478e:	617b      	str	r3, [r7, #20]
          break;
 8004790:	e02f      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479e:	d108      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047a0:	4b18      	ldr	r3, [pc, #96]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a8:	4a18      	ldr	r2, [pc, #96]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	e007      	b.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047b2:	4b14      	ldr	r3, [pc, #80]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047c2:	4b10      	ldr	r3, [pc, #64]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c8:	099b      	lsrs	r3, r3, #6
 80047ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047dc:	0f1b      	lsrs	r3, r3, #28
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]
          break;
 80047ea:	e002      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
          break;
 80047f0:	bf00      	nop
        }
      }
      break;
 80047f2:	bf00      	nop
    }
  }
  return frequency;
 80047f4:	697b      	ldr	r3, [r7, #20]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800
 8004808:	00bb8000 	.word	0x00bb8000
 800480c:	007a1200 	.word	0x007a1200
 8004810:	00f42400 	.word	0x00f42400

08004814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07b      	b.n	800491e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d108      	bne.n	8004840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004836:	d009      	beq.n	800484c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	61da      	str	r2, [r3, #28]
 800483e:	e005      	b.n	800484c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc faa6 	bl	8000db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	ea42 0103 	orr.w	r1, r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	f003 0104 	and.w	r1, r3, #4
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	f003 0210 	and.w	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800490c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e041      	b.n	80049bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f839 	bl	80049c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3304      	adds	r3, #4
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f000 f9d7 	bl	8004d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d001      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e04e      	b.n	8004a8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a23      	ldr	r2, [pc, #140]	; (8004a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d022      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x80>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1a:	d01d      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x80>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1f      	ldr	r2, [pc, #124]	; (8004aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d018      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x80>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	; (8004aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x80>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1c      	ldr	r2, [pc, #112]	; (8004aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00e      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x80>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <HAL_TIM_Base_Start_IT+0xd4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d009      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x80>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a19      	ldr	r2, [pc, #100]	; (8004ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d004      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x80>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d111      	bne.n	8004a7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b06      	cmp	r3, #6
 8004a68:	d010      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7a:	e007      	b.n	8004a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40001800 	.word	0x40001800

08004ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d122      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d11b      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0202 	mvn.w	r2, #2
 8004ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f8ee 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f8e0 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f8f1 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d122      	bne.n	8004b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d11b      	bne.n	8004b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0204 	mvn.w	r2, #4
 8004b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f8c4 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 8004b54:	e005      	b.n	8004b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f8b6 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8c7 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d122      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d11b      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0208 	mvn.w	r2, #8
 8004b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2204      	movs	r2, #4
 8004b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f89a 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f88c 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f89d 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d122      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d11b      	bne.n	8004c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0210 	mvn.w	r2, #16
 8004be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2208      	movs	r2, #8
 8004be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f870 	bl	8004cdc <HAL_TIM_IC_CaptureCallback>
 8004bfc:	e005      	b.n	8004c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f862 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f873 	bl	8004cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d10e      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d107      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0201 	mvn.w	r2, #1
 8004c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fb ffb6 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c46:	2b80      	cmp	r3, #128	; 0x80
 8004c48:	d10e      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c54:	2b80      	cmp	r3, #128	; 0x80
 8004c56:	d107      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f902 	bl	8004e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d10e      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d107      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f838 	bl	8004d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d10e      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d107      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0220 	mvn.w	r2, #32
 8004cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f8cc 	bl	8004e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a40      	ldr	r2, [pc, #256]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d00f      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3d      	ldr	r2, [pc, #244]	; (8004e30 <TIM_Base_SetConfig+0x118>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00b      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a3c      	ldr	r2, [pc, #240]	; (8004e34 <TIM_Base_SetConfig+0x11c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a3b      	ldr	r2, [pc, #236]	; (8004e38 <TIM_Base_SetConfig+0x120>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a3a      	ldr	r2, [pc, #232]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d108      	bne.n	8004d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d02b      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d027      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <TIM_Base_SetConfig+0x118>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d023      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2b      	ldr	r2, [pc, #172]	; (8004e34 <TIM_Base_SetConfig+0x11c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d01f      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <TIM_Base_SetConfig+0x120>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01b      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a29      	ldr	r2, [pc, #164]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d017      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a28      	ldr	r2, [pc, #160]	; (8004e40 <TIM_Base_SetConfig+0x128>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a27      	ldr	r2, [pc, #156]	; (8004e44 <TIM_Base_SetConfig+0x12c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00f      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <TIM_Base_SetConfig+0x130>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a25      	ldr	r2, [pc, #148]	; (8004e4c <TIM_Base_SetConfig+0x134>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a24      	ldr	r2, [pc, #144]	; (8004e50 <TIM_Base_SetConfig+0x138>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a23      	ldr	r2, [pc, #140]	; (8004e54 <TIM_Base_SetConfig+0x13c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d108      	bne.n	8004ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <TIM_Base_SetConfig+0x114>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_Base_SetConfig+0xf8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a0c      	ldr	r2, [pc, #48]	; (8004e3c <TIM_Base_SetConfig+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d103      	bne.n	8004e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	615a      	str	r2, [r3, #20]
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40010400 	.word	0x40010400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800
 8004e4c:	40001800 	.word	0x40001800
 8004e50:	40001c00 	.word	0x40001c00
 8004e54:	40002000 	.word	0x40002000

08004e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e03f      	b.n	8004f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fb ffce 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2224      	movs	r2, #36	; 0x24
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f929 	bl	800511c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b08a      	sub	sp, #40	; 0x28
 8004f1e:	af02      	add	r7, sp, #8
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	603b      	str	r3, [r7, #0]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d17c      	bne.n	8005034 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_UART_Transmit+0x2c>
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e075      	b.n	8005036 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_UART_Transmit+0x3e>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e06e      	b.n	8005036 <HAL_UART_Transmit+0x11c>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2221      	movs	r2, #33	; 0x21
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f6e:	f7fc f991 	bl	8001294 <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	88fa      	ldrh	r2, [r7, #6]
 8004f7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f88:	d108      	bne.n	8004f9c <HAL_UART_Transmit+0x82>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d104      	bne.n	8004f9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e003      	b.n	8004fa4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fac:	e02a      	b.n	8005004 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2180      	movs	r1, #128	; 0x80
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f840 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e036      	b.n	8005036 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e007      	b.n	8004ff6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1cf      	bne.n	8004fae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2200      	movs	r2, #0
 8005016:	2140      	movs	r1, #64	; 0x40
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 f810 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e006      	b.n	8005036 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b090      	sub	sp, #64	; 0x40
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	e050      	b.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d04c      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0x30>
 800505e:	f7fc f919 	bl	8001294 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506a:	429a      	cmp	r2, r3
 800506c:	d241      	bcs.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800508e:	637a      	str	r2, [r7, #52]	; 0x34
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	613b      	str	r3, [r7, #16]
   return(result);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050c2:	623a      	str	r2, [r7, #32]
 80050c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e00f      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	bf0c      	ite	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	2300      	movne	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	429a      	cmp	r2, r3
 800510e:	d09f      	beq.n	8005050 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3740      	adds	r7, #64	; 0x40
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800511c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005120:	b0c0      	sub	sp, #256	; 0x100
 8005122:	af00      	add	r7, sp, #0
 8005124:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	68d9      	ldr	r1, [r3, #12]
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	ea40 0301 	orr.w	r3, r0, r1
 8005144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	431a      	orrs	r2, r3
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	431a      	orrs	r2, r3
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005174:	f021 010c 	bic.w	r1, r1, #12
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005182:	430b      	orrs	r3, r1
 8005184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005196:	6999      	ldr	r1, [r3, #24]
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	ea40 0301 	orr.w	r3, r0, r1
 80051a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b8f      	ldr	r3, [pc, #572]	; (80053e8 <UART_SetConfig+0x2cc>)
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d005      	beq.n	80051bc <UART_SetConfig+0xa0>
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b8d      	ldr	r3, [pc, #564]	; (80053ec <UART_SetConfig+0x2d0>)
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d104      	bne.n	80051c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051bc:	f7ff f9a4 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 80051c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051c4:	e003      	b.n	80051ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051c6:	f7ff f98b 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 80051ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d8:	f040 810c 	bne.w	80053f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051ee:	4622      	mov	r2, r4
 80051f0:	462b      	mov	r3, r5
 80051f2:	1891      	adds	r1, r2, r2
 80051f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80051f6:	415b      	adcs	r3, r3
 80051f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051fe:	4621      	mov	r1, r4
 8005200:	eb12 0801 	adds.w	r8, r2, r1
 8005204:	4629      	mov	r1, r5
 8005206:	eb43 0901 	adc.w	r9, r3, r1
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800521a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800521e:	4690      	mov	r8, r2
 8005220:	4699      	mov	r9, r3
 8005222:	4623      	mov	r3, r4
 8005224:	eb18 0303 	adds.w	r3, r8, r3
 8005228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800522c:	462b      	mov	r3, r5
 800522e:	eb49 0303 	adc.w	r3, r9, r3
 8005232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005242:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800524a:	460b      	mov	r3, r1
 800524c:	18db      	adds	r3, r3, r3
 800524e:	653b      	str	r3, [r7, #80]	; 0x50
 8005250:	4613      	mov	r3, r2
 8005252:	eb42 0303 	adc.w	r3, r2, r3
 8005256:	657b      	str	r3, [r7, #84]	; 0x54
 8005258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800525c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005260:	f7fb f80e 	bl	8000280 <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4b61      	ldr	r3, [pc, #388]	; (80053f0 <UART_SetConfig+0x2d4>)
 800526a:	fba3 2302 	umull	r2, r3, r3, r2
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	011c      	lsls	r4, r3, #4
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800527c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	1891      	adds	r1, r2, r2
 800528a:	64b9      	str	r1, [r7, #72]	; 0x48
 800528c:	415b      	adcs	r3, r3
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005294:	4641      	mov	r1, r8
 8005296:	eb12 0a01 	adds.w	sl, r2, r1
 800529a:	4649      	mov	r1, r9
 800529c:	eb43 0b01 	adc.w	fp, r3, r1
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b4:	4692      	mov	sl, r2
 80052b6:	469b      	mov	fp, r3
 80052b8:	4643      	mov	r3, r8
 80052ba:	eb1a 0303 	adds.w	r3, sl, r3
 80052be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052c2:	464b      	mov	r3, r9
 80052c4:	eb4b 0303 	adc.w	r3, fp, r3
 80052c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052e0:	460b      	mov	r3, r1
 80052e2:	18db      	adds	r3, r3, r3
 80052e4:	643b      	str	r3, [r7, #64]	; 0x40
 80052e6:	4613      	mov	r3, r2
 80052e8:	eb42 0303 	adc.w	r3, r2, r3
 80052ec:	647b      	str	r3, [r7, #68]	; 0x44
 80052ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052f6:	f7fa ffc3 	bl	8000280 <__aeabi_uldivmod>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	4b3b      	ldr	r3, [pc, #236]	; (80053f0 <UART_SetConfig+0x2d4>)
 8005302:	fba3 2301 	umull	r2, r3, r3, r1
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	2264      	movs	r2, #100	; 0x64
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	1acb      	subs	r3, r1, r3
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005316:	4b36      	ldr	r3, [pc, #216]	; (80053f0 <UART_SetConfig+0x2d4>)
 8005318:	fba3 2302 	umull	r2, r3, r3, r2
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005324:	441c      	add	r4, r3
 8005326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800532a:	2200      	movs	r2, #0
 800532c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005330:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005338:	4642      	mov	r2, r8
 800533a:	464b      	mov	r3, r9
 800533c:	1891      	adds	r1, r2, r2
 800533e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005340:	415b      	adcs	r3, r3
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005348:	4641      	mov	r1, r8
 800534a:	1851      	adds	r1, r2, r1
 800534c:	6339      	str	r1, [r7, #48]	; 0x30
 800534e:	4649      	mov	r1, r9
 8005350:	414b      	adcs	r3, r1
 8005352:	637b      	str	r3, [r7, #52]	; 0x34
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005360:	4659      	mov	r1, fp
 8005362:	00cb      	lsls	r3, r1, #3
 8005364:	4651      	mov	r1, sl
 8005366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800536a:	4651      	mov	r1, sl
 800536c:	00ca      	lsls	r2, r1, #3
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	4603      	mov	r3, r0
 8005374:	4642      	mov	r2, r8
 8005376:	189b      	adds	r3, r3, r2
 8005378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800537c:	464b      	mov	r3, r9
 800537e:	460a      	mov	r2, r1
 8005380:	eb42 0303 	adc.w	r3, r2, r3
 8005384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005394:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800539c:	460b      	mov	r3, r1
 800539e:	18db      	adds	r3, r3, r3
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a2:	4613      	mov	r3, r2
 80053a4:	eb42 0303 	adc.w	r3, r2, r3
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053b2:	f7fa ff65 	bl	8000280 <__aeabi_uldivmod>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <UART_SetConfig+0x2d4>)
 80053bc:	fba3 1302 	umull	r1, r3, r3, r2
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	2164      	movs	r1, #100	; 0x64
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	3332      	adds	r3, #50	; 0x32
 80053ce:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <UART_SetConfig+0x2d4>)
 80053d0:	fba2 2303 	umull	r2, r3, r2, r3
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	f003 0207 	and.w	r2, r3, #7
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4422      	add	r2, r4
 80053e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053e4:	e106      	b.n	80055f4 <UART_SetConfig+0x4d8>
 80053e6:	bf00      	nop
 80053e8:	40011000 	.word	0x40011000
 80053ec:	40011400 	.word	0x40011400
 80053f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005406:	4642      	mov	r2, r8
 8005408:	464b      	mov	r3, r9
 800540a:	1891      	adds	r1, r2, r2
 800540c:	6239      	str	r1, [r7, #32]
 800540e:	415b      	adcs	r3, r3
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
 8005412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005416:	4641      	mov	r1, r8
 8005418:	1854      	adds	r4, r2, r1
 800541a:	4649      	mov	r1, r9
 800541c:	eb43 0501 	adc.w	r5, r3, r1
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	00eb      	lsls	r3, r5, #3
 800542a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800542e:	00e2      	lsls	r2, r4, #3
 8005430:	4614      	mov	r4, r2
 8005432:	461d      	mov	r5, r3
 8005434:	4643      	mov	r3, r8
 8005436:	18e3      	adds	r3, r4, r3
 8005438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800543c:	464b      	mov	r3, r9
 800543e:	eb45 0303 	adc.w	r3, r5, r3
 8005442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005452:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005462:	4629      	mov	r1, r5
 8005464:	008b      	lsls	r3, r1, #2
 8005466:	4621      	mov	r1, r4
 8005468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800546c:	4621      	mov	r1, r4
 800546e:	008a      	lsls	r2, r1, #2
 8005470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005474:	f7fa ff04 	bl	8000280 <__aeabi_uldivmod>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4b60      	ldr	r3, [pc, #384]	; (8005600 <UART_SetConfig+0x4e4>)
 800547e:	fba3 2302 	umull	r2, r3, r3, r2
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	011c      	lsls	r4, r3, #4
 8005486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800548a:	2200      	movs	r2, #0
 800548c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005490:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	1891      	adds	r1, r2, r2
 800549e:	61b9      	str	r1, [r7, #24]
 80054a0:	415b      	adcs	r3, r3
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054a8:	4641      	mov	r1, r8
 80054aa:	1851      	adds	r1, r2, r1
 80054ac:	6139      	str	r1, [r7, #16]
 80054ae:	4649      	mov	r1, r9
 80054b0:	414b      	adcs	r3, r1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054c0:	4659      	mov	r1, fp
 80054c2:	00cb      	lsls	r3, r1, #3
 80054c4:	4651      	mov	r1, sl
 80054c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ca:	4651      	mov	r1, sl
 80054cc:	00ca      	lsls	r2, r1, #3
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	4642      	mov	r2, r8
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054dc:	464b      	mov	r3, r9
 80054de:	460a      	mov	r2, r1
 80054e0:	eb42 0303 	adc.w	r3, r2, r3
 80054e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80054f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005500:	4649      	mov	r1, r9
 8005502:	008b      	lsls	r3, r1, #2
 8005504:	4641      	mov	r1, r8
 8005506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800550a:	4641      	mov	r1, r8
 800550c:	008a      	lsls	r2, r1, #2
 800550e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005512:	f7fa feb5 	bl	8000280 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4611      	mov	r1, r2
 800551c:	4b38      	ldr	r3, [pc, #224]	; (8005600 <UART_SetConfig+0x4e4>)
 800551e:	fba3 2301 	umull	r2, r3, r3, r1
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	2264      	movs	r2, #100	; 0x64
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	1acb      	subs	r3, r1, r3
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	3332      	adds	r3, #50	; 0x32
 8005530:	4a33      	ldr	r2, [pc, #204]	; (8005600 <UART_SetConfig+0x4e4>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800553c:	441c      	add	r4, r3
 800553e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005542:	2200      	movs	r2, #0
 8005544:	673b      	str	r3, [r7, #112]	; 0x70
 8005546:	677a      	str	r2, [r7, #116]	; 0x74
 8005548:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800554c:	4642      	mov	r2, r8
 800554e:	464b      	mov	r3, r9
 8005550:	1891      	adds	r1, r2, r2
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	415b      	adcs	r3, r3
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800555c:	4641      	mov	r1, r8
 800555e:	1851      	adds	r1, r2, r1
 8005560:	6039      	str	r1, [r7, #0]
 8005562:	4649      	mov	r1, r9
 8005564:	414b      	adcs	r3, r1
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005574:	4659      	mov	r1, fp
 8005576:	00cb      	lsls	r3, r1, #3
 8005578:	4651      	mov	r1, sl
 800557a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800557e:	4651      	mov	r1, sl
 8005580:	00ca      	lsls	r2, r1, #3
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	4603      	mov	r3, r0
 8005588:	4642      	mov	r2, r8
 800558a:	189b      	adds	r3, r3, r2
 800558c:	66bb      	str	r3, [r7, #104]	; 0x68
 800558e:	464b      	mov	r3, r9
 8005590:	460a      	mov	r2, r1
 8005592:	eb42 0303 	adc.w	r3, r2, r3
 8005596:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	663b      	str	r3, [r7, #96]	; 0x60
 80055a2:	667a      	str	r2, [r7, #100]	; 0x64
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055b0:	4649      	mov	r1, r9
 80055b2:	008b      	lsls	r3, r1, #2
 80055b4:	4641      	mov	r1, r8
 80055b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ba:	4641      	mov	r1, r8
 80055bc:	008a      	lsls	r2, r1, #2
 80055be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055c2:	f7fa fe5d 	bl	8000280 <__aeabi_uldivmod>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <UART_SetConfig+0x4e4>)
 80055cc:	fba3 1302 	umull	r1, r3, r3, r2
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	2164      	movs	r1, #100	; 0x64
 80055d4:	fb01 f303 	mul.w	r3, r1, r3
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	3332      	adds	r3, #50	; 0x32
 80055de:	4a08      	ldr	r2, [pc, #32]	; (8005600 <UART_SetConfig+0x4e4>)
 80055e0:	fba2 2303 	umull	r2, r3, r2, r3
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	f003 020f 	and.w	r2, r3, #15
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4422      	add	r2, r4
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055fa:	46bd      	mov	sp, r7
 80055fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005600:	51eb851f 	.word	0x51eb851f

08005604 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005604:	b084      	sub	sp, #16
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	f107 001c 	add.w	r0, r7, #28
 8005612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2b01      	cmp	r3, #1
 800561a:	d122      	bne.n	8005662 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005646:	2b01      	cmp	r3, #1
 8005648:	d105      	bne.n	8005656 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9c0 	bl	80059dc <USB_CoreReset>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
 8005660:	e01a      	b.n	8005698 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9b4 	bl	80059dc <USB_CoreReset>
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
 800568a:	e005      	b.n	8005698 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	2b01      	cmp	r3, #1
 800569c:	d10b      	bne.n	80056b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f043 0206 	orr.w	r2, r3, #6
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056c2:	b004      	add	sp, #16
 80056c4:	4770      	bx	lr

080056c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f043 0201 	orr.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f023 0201 	bic.w	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d115      	bne.n	8005758 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005738:	2001      	movs	r0, #1
 800573a:	f7fb fdb7 	bl	80012ac <HAL_Delay>
      ms++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f93a 	bl	80059be <USB_GetMode>
 800574a:	4603      	mov	r3, r0
 800574c:	2b01      	cmp	r3, #1
 800574e:	d01e      	beq.n	800578e <USB_SetCurrentMode+0x84>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b31      	cmp	r3, #49	; 0x31
 8005754:	d9f0      	bls.n	8005738 <USB_SetCurrentMode+0x2e>
 8005756:	e01a      	b.n	800578e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d115      	bne.n	800578a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800576a:	2001      	movs	r0, #1
 800576c:	f7fb fd9e 	bl	80012ac <HAL_Delay>
      ms++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f921 	bl	80059be <USB_GetMode>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <USB_SetCurrentMode+0x84>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b31      	cmp	r3, #49	; 0x31
 8005786:	d9f0      	bls.n	800576a <USB_SetCurrentMode+0x60>
 8005788:	e001      	b.n	800578e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e005      	b.n	800579a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b32      	cmp	r3, #50	; 0x32
 8005792:	d101      	bne.n	8005798 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3301      	adds	r3, #1
 80057b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a13      	ldr	r2, [pc, #76]	; (8005808 <USB_FlushTxFifo+0x64>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e01b      	b.n	80057fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	daf2      	bge.n	80057b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	019b      	lsls	r3, r3, #6
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4a08      	ldr	r2, [pc, #32]	; (8005808 <USB_FlushTxFifo+0x64>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e006      	b.n	80057fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d0f0      	beq.n	80057dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	00030d40 	.word	0x00030d40

0800580c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3301      	adds	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4a11      	ldr	r2, [pc, #68]	; (8005868 <USB_FlushRxFifo+0x5c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e018      	b.n	800585c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	daf2      	bge.n	8005818 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2210      	movs	r2, #16
 800583a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3301      	adds	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a08      	ldr	r2, [pc, #32]	; (8005868 <USB_FlushRxFifo+0x5c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e006      	b.n	800585c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	2b10      	cmp	r3, #16
 8005858:	d0f0      	beq.n	800583c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	00030d40 	.word	0x00030d40

0800586c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800586c:	b480      	push	{r7}
 800586e:	b089      	sub	sp, #36	; 0x24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	4611      	mov	r1, r2
 8005878:	461a      	mov	r2, r3
 800587a:	460b      	mov	r3, r1
 800587c:	71fb      	strb	r3, [r7, #7]
 800587e:	4613      	mov	r3, r2
 8005880:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800588a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	d123      	bne.n	80058da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005892:	88bb      	ldrh	r3, [r7, #4]
 8005894:	3303      	adds	r3, #3
 8005896:	089b      	lsrs	r3, r3, #2
 8005898:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e018      	b.n	80058d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	031a      	lsls	r2, r3, #12
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ac:	461a      	mov	r2, r3
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	3301      	adds	r3, #1
 80058b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	3301      	adds	r3, #1
 80058be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	3301      	adds	r3, #1
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d3e2      	bcc.n	80058a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3724      	adds	r7, #36	; 0x24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b08b      	sub	sp, #44	; 0x2c
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	089b      	lsrs	r3, r3, #2
 8005902:	b29b      	uxth	r3, r3
 8005904:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800590e:	2300      	movs	r3, #0
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	e014      	b.n	800593e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	3301      	adds	r3, #1
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	3301      	adds	r3, #1
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	3301      	adds	r3, #1
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	3301      	adds	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	3301      	adds	r3, #1
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	429a      	cmp	r2, r3
 8005944:	d3e6      	bcc.n	8005914 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005946:	8bfb      	ldrh	r3, [r7, #30]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01e      	beq.n	800598a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005956:	461a      	mov	r2, r3
 8005958:	f107 0310 	add.w	r3, r7, #16
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
 800596c:	b2da      	uxtb	r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	701a      	strb	r2, [r3, #0]
      i++;
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	3301      	adds	r3, #1
 8005976:	623b      	str	r3, [r7, #32]
      pDest++;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	3301      	adds	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800597e:	8bfb      	ldrh	r3, [r7, #30]
 8005980:	3b01      	subs	r3, #1
 8005982:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005984:	8bfb      	ldrh	r3, [r7, #30]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ea      	bne.n	8005960 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800598c:	4618      	mov	r0, r3
 800598e:	372c      	adds	r7, #44	; 0x2c
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4013      	ands	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059b0:	68fb      	ldr	r3, [r7, #12]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0301 	and.w	r3, r3, #1
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <USB_CoreReset+0x64>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e01b      	b.n	8005a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	daf2      	bge.n	80059e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f043 0201 	orr.w	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3301      	adds	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <USB_CoreReset+0x64>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e006      	b.n	8005a32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d0f0      	beq.n	8005a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	00030d40 	.word	0x00030d40

08005a44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a44:	b084      	sub	sp, #16
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a64:	461a      	mov	r2, r3
 8005a66:	2300      	movs	r3, #0
 8005a68:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d018      	beq.n	8005acc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10a      	bne.n	8005ab6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	e014      	b.n	8005ae0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ac4:	f023 0304 	bic.w	r3, r3, #4
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e009      	b.n	8005ae0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ada:	f023 0304 	bic.w	r3, r3, #4
 8005ade:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ae0:	2110      	movs	r1, #16
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fe5e 	bl	80057a4 <USB_FlushTxFifo>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fe8a 	bl	800580c <USB_FlushRxFifo>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	e015      	b.n	8005b34 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	461a      	mov	r2, r3
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	3301      	adds	r3, #1
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d3e5      	bcc.n	8005b08 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f04f 32ff 	mov.w	r2, #4294967295
 8005b48:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <USB_HostInit+0x16c>)
 8005b62:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a13      	ldr	r2, [pc, #76]	; (8005bb4 <USB_HostInit+0x170>)
 8005b68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b6c:	e009      	b.n	8005b82 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2280      	movs	r2, #128	; 0x80
 8005b72:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <USB_HostInit+0x174>)
 8005b78:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a0f      	ldr	r2, [pc, #60]	; (8005bbc <USB_HostInit+0x178>)
 8005b7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d105      	bne.n	8005b94 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f043 0210 	orr.w	r2, r3, #16
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <USB_HostInit+0x17c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bac:	b004      	add	sp, #16
 8005bae:	4770      	bx	lr
 8005bb0:	01000200 	.word	0x01000200
 8005bb4:	00e00300 	.word	0x00e00300
 8005bb8:	00600080 	.word	0x00600080
 8005bbc:	004000e0 	.word	0x004000e0
 8005bc0:	a3200008 	.word	0xa3200008

08005bc4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d107      	bne.n	8005c16 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c12:	6053      	str	r3, [r2, #4]
 8005c14:	e009      	b.n	8005c2a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d106      	bne.n	8005c2a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c22:	461a      	mov	r2, r3
 8005c24:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c28:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c66:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c68:	2064      	movs	r0, #100	; 0x64
 8005c6a:	f7fb fb1f 	bl	80012ac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c7a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c7c:	200a      	movs	r0, #10
 8005c7e:	f7fb fb15 	bl	80012ac <HAL_Delay>

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cb0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <USB_DriveVbus+0x44>
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d106      	bne.n	8005cd0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cda:	d109      	bne.n	8005cf0 <USB_DriveVbus+0x64>
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	0c5b      	lsrs	r3, r3, #17
 8005d1c:	f003 0303 	and.w	r3, r3, #3
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	b29b      	uxth	r3, r3
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	70fb      	strb	r3, [r7, #3]
 8005d62:	460b      	mov	r3, r1
 8005d64:	70bb      	strb	r3, [r7, #2]
 8005d66:	4613      	mov	r3, r2
 8005d68:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f04f 33ff 	mov.w	r3, #4294967295
 8005d84:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d87e      	bhi.n	8005e8c <USB_HC_Init+0x13c>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <USB_HC_Init+0x44>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005da5 	.word	0x08005da5
 8005d98:	08005e4f 	.word	0x08005e4f
 8005d9c:	08005da5 	.word	0x08005da5
 8005da0:	08005e11 	.word	0x08005e11
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db0:	461a      	mov	r2, r3
 8005db2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005db6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005db8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	da10      	bge.n	8005de2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dde:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005de0:	e057      	b.n	8005e92 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d051      	beq.n	8005e92 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	78fa      	ldrb	r2, [r7, #3]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e0c:	60d3      	str	r3, [r2, #12]
      break;
 8005e0e:	e040      	b.n	8005e92 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	da34      	bge.n	8005e96 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e4c:	e023      	b.n	8005e96 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f240 2325 	movw	r3, #549	; 0x225
 8005e60:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da17      	bge.n	8005e9a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e84:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e88:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e8a:	e006      	b.n	8005e9a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	77fb      	strb	r3, [r7, #31]
      break;
 8005e90:	e004      	b.n	8005e9c <USB_HC_Init+0x14c>
      break;
 8005e92:	bf00      	nop
 8005e94:	e002      	b.n	8005e9c <USB_HC_Init+0x14c>
      break;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <USB_HC_Init+0x14c>
      break;
 8005e9a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb6:	f043 0302 	orr.w	r3, r3, #2
 8005eba:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	2101      	movs	r1, #1
 8005ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed0:	6939      	ldr	r1, [r7, #16]
 8005ed2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ee6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da03      	bge.n	8005ef6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	e001      	b.n	8005efa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff feff 	bl	8005cfe <USB_GetHostSpeed>
 8005f00:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d106      	bne.n	8005f18 <USB_HC_Init+0x1c8>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d003      	beq.n	8005f18 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e001      	b.n	8005f1c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f1c:	787b      	ldrb	r3, [r7, #1]
 8005f1e:	059b      	lsls	r3, r3, #22
 8005f20:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f24:	78bb      	ldrb	r3, [r7, #2]
 8005f26:	02db      	lsls	r3, r3, #11
 8005f28:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f2c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f32:	049b      	lsls	r3, r3, #18
 8005f34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f3a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	0159      	lsls	r1, r3, #5
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	440b      	add	r3, r1
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f52:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f58:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d003      	beq.n	8005f6a <USB_HC_Init+0x21a>
 8005f62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d10f      	bne.n	8005f8a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	78fa      	ldrb	r2, [r7, #3]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f88:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08c      	sub	sp, #48	; 0x30
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fb0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d02d      	beq.n	800601a <USB_HC_StartXfer+0x86>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	791b      	ldrb	r3, [r3, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d129      	bne.n	800601a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d117      	bne.n	8005ffc <USB_HC_StartXfer+0x68>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	79db      	ldrb	r3, [r3, #7]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <USB_HC_StartXfer+0x48>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	79db      	ldrb	r3, [r3, #7]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d10f      	bne.n	8005ffc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	6a3a      	ldr	r2, [r7, #32]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10b      	bne.n	800601a <USB_HC_StartXfer+0x86>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	795b      	ldrb	r3, [r3, #5]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d107      	bne.n	800601a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	4619      	mov	r1, r3
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fa0f 	bl	8006434 <USB_DoPing>
      return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e0f8      	b.n	800620c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d018      	beq.n	8006054 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	8912      	ldrh	r2, [r2, #8]
 800602a:	4413      	add	r3, r2
 800602c:	3b01      	subs	r3, #1
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	8912      	ldrh	r2, [r2, #8]
 8006032:	fbb3 f3f2 	udiv	r3, r3, r2
 8006036:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006038:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800603a:	8b7b      	ldrh	r3, [r7, #26]
 800603c:	429a      	cmp	r2, r3
 800603e:	d90b      	bls.n	8006058 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006040:	8b7b      	ldrh	r3, [r7, #26]
 8006042:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006044:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	8912      	ldrh	r2, [r2, #8]
 800604a:	fb03 f202 	mul.w	r2, r3, r2
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	611a      	str	r2, [r3, #16]
 8006052:	e001      	b.n	8006058 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006054:	2301      	movs	r3, #1
 8006056:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	78db      	ldrb	r3, [r3, #3]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006060:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	8912      	ldrh	r2, [r2, #8]
 8006066:	fb03 f202 	mul.w	r2, r3, r2
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	611a      	str	r2, [r3, #16]
 800606e:	e003      	b.n	8006078 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	695a      	ldr	r2, [r3, #20]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006080:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006082:	04d9      	lsls	r1, r3, #19
 8006084:	4b63      	ldr	r3, [pc, #396]	; (8006214 <USB_HC_StartXfer+0x280>)
 8006086:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006088:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	7a9b      	ldrb	r3, [r3, #10]
 800608e:	075b      	lsls	r3, r3, #29
 8006090:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006094:	69f9      	ldr	r1, [r7, #28]
 8006096:	0148      	lsls	r0, r1, #5
 8006098:	6a39      	ldr	r1, [r7, #32]
 800609a:	4401      	add	r1, r0
 800609c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	68d9      	ldr	r1, [r3, #12]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ba:	460a      	mov	r2, r1
 80060bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bf0c      	ite	eq
 80060ce:	2301      	moveq	r3, #1
 80060d0:	2300      	movne	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	6a3a      	ldr	r2, [r7, #32]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	7e7b      	ldrb	r3, [r7, #25]
 8006106:	075b      	lsls	r3, r3, #29
 8006108:	69f9      	ldr	r1, [r7, #28]
 800610a:	0148      	lsls	r0, r1, #5
 800610c:	6a39      	ldr	r1, [r7, #32]
 800610e:	4401      	add	r1, r0
 8006110:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	4413      	add	r3, r2
 8006120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800612e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	78db      	ldrb	r3, [r3, #3]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	e003      	b.n	800614a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006148:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006150:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615e:	461a      	mov	r2, r3
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e04e      	b.n	800620c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	78db      	ldrb	r3, [r3, #3]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d149      	bne.n	800620a <USB_HC_StartXfer+0x276>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d045      	beq.n	800620a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	79db      	ldrb	r3, [r3, #7]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d830      	bhi.n	80061e8 <USB_HC_StartXfer+0x254>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <USB_HC_StartXfer+0x1f8>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	0800619d 	.word	0x0800619d
 8006190:	080061c1 	.word	0x080061c1
 8006194:	0800619d 	.word	0x0800619d
 8006198:	080061c1 	.word	0x080061c1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	3303      	adds	r3, #3
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061a6:	8afa      	ldrh	r2, [r7, #22]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d91c      	bls.n	80061ec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f043 0220 	orr.w	r2, r3, #32
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80061be:	e015      	b.n	80061ec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	3303      	adds	r3, #3
 80061c6:	089b      	lsrs	r3, r3, #2
 80061c8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061ca:	8afa      	ldrh	r2, [r7, #22]
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d90a      	bls.n	80061f0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80061e6:	e003      	b.n	80061f0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80061e8:	bf00      	nop
 80061ea:	e002      	b.n	80061f2 <USB_HC_StartXfer+0x25e>
        break;
 80061ec:	bf00      	nop
 80061ee:	e000      	b.n	80061f2 <USB_HC_StartXfer+0x25e>
        break;
 80061f0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	68d9      	ldr	r1, [r3, #12]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	785a      	ldrb	r2, [r3, #1]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2000      	movs	r0, #0
 8006202:	9000      	str	r0, [sp, #0]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff fb31 	bl	800586c <USB_WritePacket>
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3728      	adds	r7, #40	; 0x28
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	1ff80000 	.word	0x1ff80000

08006218 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	b29b      	uxth	r3, r3
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800623a:	b480      	push	{r7}
 800623c:	b089      	sub	sp, #36	; 0x24
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	0c9b      	lsrs	r3, r3, #18
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	0fdb      	lsrs	r3, r3, #31
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b20      	cmp	r3, #32
 8006288:	d104      	bne.n	8006294 <USB_HC_Halt+0x5a>
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	e0c8      	b.n	8006426 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <USB_HC_Halt+0x66>
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b02      	cmp	r3, #2
 800629e:	d163      	bne.n	8006368 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062be:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f040 80ab 	bne.w	8006424 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d133      	bne.n	8006342 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	440a      	add	r2, r1
 8006310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006318:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3301      	adds	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006326:	d81d      	bhi.n	8006364 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800633a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800633e:	d0ec      	beq.n	800631a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006340:	e070      	b.n	8006424 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	440a      	add	r2, r1
 8006358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800635c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006360:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006362:	e05f      	b.n	8006424 <USB_HC_Halt+0x1ea>
            break;
 8006364:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006366:	e05d      	b.n	8006424 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	0151      	lsls	r1, r2, #5
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	440a      	add	r2, r1
 800637e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006382:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006386:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d133      	bne.n	8006400 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063d6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063e4:	d81d      	bhi.n	8006422 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063fc:	d0ec      	beq.n	80063d8 <USB_HC_Halt+0x19e>
 80063fe:	e011      	b.n	8006424 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4413      	add	r3, r2
 8006408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	440a      	add	r2, r1
 8006416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800641a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	e000      	b.n	8006424 <USB_HC_Halt+0x1ea>
          break;
 8006422:	bf00      	nop
    }
  }

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3724      	adds	r7, #36	; 0x24
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006448:	2301      	movs	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	04da      	lsls	r2, r3, #19
 8006450:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <USB_DoPing+0x74>)
 8006452:	4013      	ands	r3, r2
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	440a      	add	r2, r1
 800645c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006464:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800647c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006484:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006492:	461a      	mov	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	1ff80000 	.word	0x1ff80000

080064ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff f911 	bl	80056e8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064c6:	2110      	movs	r1, #16
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff f96b 	bl	80057a4 <USB_FlushTxFifo>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff f997 	bl	800580c <USB_FlushRxFifo>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	e01f      	b.n	800652e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006504:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800650c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006514:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006522:	461a      	mov	r2, r3
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	3301      	adds	r3, #1
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b0f      	cmp	r3, #15
 8006532:	d9dc      	bls.n	80064ee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006534:	2300      	movs	r3, #0
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	e034      	b.n	80065a4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006550:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006558:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006560:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	4413      	add	r3, r2
 800656a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656e:	461a      	mov	r2, r3
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006580:	d80c      	bhi.n	800659c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006598:	d0ec      	beq.n	8006574 <USB_StopHost+0xc8>
 800659a:	e000      	b.n	800659e <USB_StopHost+0xf2>
        break;
 800659c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	3301      	adds	r3, #1
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2b0f      	cmp	r3, #15
 80065a8:	d9c7      	bls.n	800653a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b0:	461a      	mov	r2, r3
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff f880 	bl	80056c6 <USB_EnableGlobalInt>

  return ret;
 80065c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b089      	sub	sp, #36	; 0x24
 80065d4:	af04      	add	r7, sp, #16
 80065d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065d8:	2301      	movs	r3, #1
 80065da:	2202      	movs	r2, #2
 80065dc:	2102      	movs	r1, #2
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fc66 	bl	8006eb0 <USBH_FindInterface>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2bff      	cmp	r3, #255	; 0xff
 80065ec:	d002      	beq.n	80065f4 <USBH_CDC_InterfaceInit+0x24>
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d901      	bls.n	80065f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065f4:	2302      	movs	r3, #2
 80065f6:	e13d      	b.n	8006874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fc3b 	bl	8006e78 <USBH_SelectInterface>
 8006602:	4603      	mov	r3, r0
 8006604:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800660c:	2302      	movs	r3, #2
 800660e:	e131      	b.n	8006874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006616:	2050      	movs	r0, #80	; 0x50
 8006618:	f005 f94c 	bl	800b8b4 <malloc>
 800661c:	4603      	mov	r3, r0
 800661e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006630:	2302      	movs	r3, #2
 8006632:	e11f      	b.n	8006874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006634:	2250      	movs	r2, #80	; 0x50
 8006636:	2100      	movs	r1, #0
 8006638:	68b8      	ldr	r0, [r7, #8]
 800663a:	f005 fb76 	bl	800bd2a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	211a      	movs	r1, #26
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	4413      	add	r3, r2
 800664a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b25b      	sxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	da15      	bge.n	8006682 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	211a      	movs	r1, #26
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	211a      	movs	r1, #26
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 ff2e 	bl	80084ea <USBH_AllocPipe>
 800668e:	4603      	mov	r3, r0
 8006690:	461a      	mov	r2, r3
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	7819      	ldrb	r1, [r3, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	7858      	ldrb	r0, [r3, #1]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	8952      	ldrh	r2, [r2, #10]
 80066ae:	9202      	str	r2, [sp, #8]
 80066b0:	2203      	movs	r2, #3
 80066b2:	9201      	str	r2, [sp, #4]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4623      	mov	r3, r4
 80066b8:	4602      	mov	r2, r0
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fee6 	bl	800848c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2200      	movs	r2, #0
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f002 f9f5 	bl	8008ab8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066ce:	2300      	movs	r3, #0
 80066d0:	2200      	movs	r2, #0
 80066d2:	210a      	movs	r1, #10
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fbeb 	bl	8006eb0 <USBH_FindInterface>
 80066da:	4603      	mov	r3, r0
 80066dc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	2bff      	cmp	r3, #255	; 0xff
 80066e2:	d002      	beq.n	80066ea <USBH_CDC_InterfaceInit+0x11a>
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d901      	bls.n	80066ee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066ea:	2302      	movs	r3, #2
 80066ec:	e0c2      	b.n	8006874 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	211a      	movs	r1, #26
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	4413      	add	r3, r2
 80066fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b25b      	sxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	da16      	bge.n	8006734 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	211a      	movs	r1, #26
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	4413      	add	r3, r2
 8006712:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006716:	781a      	ldrb	r2, [r3, #0]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	211a      	movs	r1, #26
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	4413      	add	r3, r2
 8006728:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800672c:	881a      	ldrh	r2, [r3, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	835a      	strh	r2, [r3, #26]
 8006732:	e015      	b.n	8006760 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	211a      	movs	r1, #26
 800673a:	fb01 f303 	mul.w	r3, r1, r3
 800673e:	4413      	add	r3, r2
 8006740:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006744:	781a      	ldrb	r2, [r3, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	211a      	movs	r1, #26
 8006750:	fb01 f303 	mul.w	r3, r1, r3
 8006754:	4413      	add	r3, r2
 8006756:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800675a:	881a      	ldrh	r2, [r3, #0]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	211a      	movs	r1, #26
 8006766:	fb01 f303 	mul.w	r3, r1, r3
 800676a:	4413      	add	r3, r2
 800676c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b25b      	sxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	da16      	bge.n	80067a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	211a      	movs	r1, #26
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	4413      	add	r3, r2
 8006784:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006788:	781a      	ldrb	r2, [r3, #0]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	211a      	movs	r1, #26
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	4413      	add	r3, r2
 800679a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800679e:	881a      	ldrh	r2, [r3, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	835a      	strh	r2, [r3, #26]
 80067a4:	e015      	b.n	80067d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	211a      	movs	r1, #26
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067b6:	781a      	ldrb	r2, [r3, #0]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	211a      	movs	r1, #26
 80067c2:	fb01 f303 	mul.w	r3, r1, r3
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067cc:	881a      	ldrh	r2, [r3, #0]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	7b9b      	ldrb	r3, [r3, #14]
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fe86 	bl	80084ea <USBH_AllocPipe>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	7bdb      	ldrb	r3, [r3, #15]
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fe7c 	bl	80084ea <USBH_AllocPipe>
 80067f2:	4603      	mov	r3, r0
 80067f4:	461a      	mov	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	7b59      	ldrb	r1, [r3, #13]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	7b98      	ldrb	r0, [r3, #14]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	8b12      	ldrh	r2, [r2, #24]
 8006812:	9202      	str	r2, [sp, #8]
 8006814:	2202      	movs	r2, #2
 8006816:	9201      	str	r2, [sp, #4]
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	4623      	mov	r3, r4
 800681c:	4602      	mov	r2, r0
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f001 fe34 	bl	800848c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	7b19      	ldrb	r1, [r3, #12]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	7bd8      	ldrb	r0, [r3, #15]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	8b52      	ldrh	r2, [r2, #26]
 800683c:	9202      	str	r2, [sp, #8]
 800683e:	2202      	movs	r2, #2
 8006840:	9201      	str	r2, [sp, #4]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	4623      	mov	r3, r4
 8006846:	4602      	mov	r2, r0
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fe1f 	bl	800848c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	7b5b      	ldrb	r3, [r3, #13]
 800685a:	2200      	movs	r2, #0
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f002 f92a 	bl	8008ab8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	7b1b      	ldrb	r3, [r3, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f002 f923 	bl	8008ab8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bd90      	pop	{r4, r7, pc}

0800687c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00e      	beq.n	80068b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 fe14 	bl	80084ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 fe3f 	bl	800852c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	7b1b      	ldrb	r3, [r3, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00e      	beq.n	80068da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	7b1b      	ldrb	r3, [r3, #12]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fe01 	bl	80084ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	7b1b      	ldrb	r3, [r3, #12]
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 fe2c 	bl	800852c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	7b5b      	ldrb	r3, [r3, #13]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00e      	beq.n	8006900 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	7b5b      	ldrb	r3, [r3, #13]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 fdee 	bl	80084ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	7b5b      	ldrb	r3, [r3, #13]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fe19 	bl	800852c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	4618      	mov	r0, r3
 8006916:	f004 ffd5 	bl	800b8c4 <free>
    phost->pActiveClass->pData = 0U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006920:	2200      	movs	r2, #0
 8006922:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3340      	adds	r3, #64	; 0x40
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f8b1 	bl	8006aae <GetLineCoding>
 800694c:	4603      	mov	r3, r0
 800694e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006950:	7afb      	ldrb	r3, [r7, #11]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800695c:	2102      	movs	r1, #2
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006962:	7afb      	ldrb	r3, [r7, #11]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800698c:	2b04      	cmp	r3, #4
 800698e:	d877      	bhi.n	8006a80 <USBH_CDC_Process+0x114>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <USBH_CDC_Process+0x2c>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069ad 	.word	0x080069ad
 800699c:	080069b3 	.word	0x080069b3
 80069a0:	080069e3 	.word	0x080069e3
 80069a4:	08006a57 	.word	0x08006a57
 80069a8:	08006a65 	.word	0x08006a65
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	73fb      	strb	r3, [r7, #15]
      break;
 80069b0:	e06d      	b.n	8006a8e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f897 	bl	8006aec <SetLineCoding>
 80069be:	4603      	mov	r3, r0
 80069c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069d0:	e058      	b.n	8006a84 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d055      	beq.n	8006a84 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2204      	movs	r2, #4
 80069dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069e0:	e050      	b.n	8006a84 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	3340      	adds	r3, #64	; 0x40
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f860 	bl	8006aae <GetLineCoding>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d126      	bne.n	8006a46 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0a:	791b      	ldrb	r3, [r3, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d13b      	bne.n	8006a88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d133      	bne.n	8006a88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d12b      	bne.n	8006a88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a38:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d124      	bne.n	8006a88 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f958 	bl	8006cf4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a44:	e020      	b.n	8006a88 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d01d      	beq.n	8006a88 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a54:	e018      	b.n	8006a88 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f867 	bl	8006b2a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f8da 	bl	8006c16 <CDC_ProcessReception>
      break;
 8006a62:	e014      	b.n	8006a8e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a64:	2100      	movs	r1, #0
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 ffef 	bl	8007a4a <USBH_ClrFeature>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a7e:	e005      	b.n	8006a8c <USBH_CDC_Process+0x120>

    default:
      break;
 8006a80:	bf00      	nop
 8006a82:	e004      	b.n	8006a8e <USBH_CDC_Process+0x122>
      break;
 8006a84:	bf00      	nop
 8006a86:	e002      	b.n	8006a8e <USBH_CDC_Process+0x122>
      break;
 8006a88:	bf00      	nop
 8006a8a:	e000      	b.n	8006a8e <USBH_CDC_Process+0x122>
      break;
 8006a8c:	bf00      	nop

  }

  return status;
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	22a1      	movs	r2, #161	; 0xa1
 8006abc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2221      	movs	r2, #33	; 0x21
 8006ac2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2207      	movs	r2, #7
 8006ad4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2207      	movs	r2, #7
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fa83 	bl	8007fe8 <USBH_CtlReq>
 8006ae2:	4603      	mov	r3, r0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2221      	movs	r2, #33	; 0x21
 8006afa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2207      	movs	r2, #7
 8006b12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2207      	movs	r2, #7
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fa64 	bl	8007fe8 <USBH_CtlReq>
 8006b20:	4603      	mov	r3, r0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af02      	add	r7, sp, #8
 8006b30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d002      	beq.n	8006b50 <CDC_ProcessTransmission+0x26>
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d023      	beq.n	8006b96 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b4e:	e05e      	b.n	8006c0e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	8b12      	ldrh	r2, [r2, #24]
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d90b      	bls.n	8006b74 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	69d9      	ldr	r1, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8b1a      	ldrh	r2, [r3, #24]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	7b5b      	ldrb	r3, [r3, #13]
 8006b68:	2001      	movs	r0, #1
 8006b6a:	9000      	str	r0, [sp, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fc4a 	bl	8008406 <USBH_BulkSendData>
 8006b72:	e00b      	b.n	8006b8c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	7b5b      	ldrb	r3, [r3, #13]
 8006b82:	2001      	movs	r0, #1
 8006b84:	9000      	str	r0, [sp, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 fc3d 	bl	8008406 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b94:	e03b      	b.n	8006c0e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	7b5b      	ldrb	r3, [r3, #13]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 ff61 	bl	8008a64 <USBH_LL_GetURBState>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d128      	bne.n	8006bfe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	8b12      	ldrh	r2, [r2, #24]
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d90e      	bls.n	8006bd6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	8b12      	ldrh	r2, [r2, #24]
 8006bc0:	1a9a      	subs	r2, r3, r2
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	8b12      	ldrh	r2, [r2, #24]
 8006bce:	441a      	add	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	61da      	str	r2, [r3, #28]
 8006bd4:	e002      	b.n	8006bdc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bec:	e00e      	b.n	8006c0c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f868 	bl	8006ccc <USBH_CDC_TransmitCallback>
      break;
 8006bfc:	e006      	b.n	8006c0c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d103      	bne.n	8006c0c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c0c:	bf00      	nop
  }
}
 8006c0e:	bf00      	nop
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d002      	beq.n	8006c3c <CDC_ProcessReception+0x26>
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d00e      	beq.n	8006c58 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c3a:	e043      	b.n	8006cc4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	6a19      	ldr	r1, [r3, #32]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	8b5a      	ldrh	r2, [r3, #26]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	7b1b      	ldrb	r3, [r3, #12]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 fc01 	bl	8008450 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2204      	movs	r2, #4
 8006c52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c56:	e035      	b.n	8006cc4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	7b1b      	ldrb	r3, [r3, #12]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 ff00 	bl	8008a64 <USBH_LL_GetURBState>
 8006c64:	4603      	mov	r3, r0
 8006c66:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c68:	7cfb      	ldrb	r3, [r7, #19]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d129      	bne.n	8006cc2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	7b1b      	ldrb	r3, [r3, #12]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fe63 	bl	8008940 <USBH_LL_GetLastXferSize>
 8006c7a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d016      	beq.n	8006cb4 <CDC_ProcessReception+0x9e>
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	8b5b      	ldrh	r3, [r3, #26]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d910      	bls.n	8006cb4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1ad2      	subs	r2, r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	6a1a      	ldr	r2, [r3, #32]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	441a      	add	r2, r3
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2203      	movs	r2, #3
 8006cae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cb2:	e006      	b.n	8006cc2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f80f 	bl	8006ce0 <USBH_CDC_ReceiveCallback>
      break;
 8006cc2:	bf00      	nop
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e029      	b.n	8006d74 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	79fa      	ldrb	r2, [r7, #7]
 8006d24:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f81f 	bl	8006d7c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f001 fd33 	bl	80087d8 <USBH_LL_Init>

  return USBH_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	e009      	b.n	8006da2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	33e0      	adds	r3, #224	; 0xe0
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	2200      	movs	r2, #0
 8006d9a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b0f      	cmp	r3, #15
 8006da6:	d9f2      	bls.n	8006d8e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e009      	b.n	8006dc2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc8:	d3f1      	bcc.n	8006dae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2240      	movs	r2, #64	; 0x40
 8006dee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d016      	beq.n	8006e66 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10e      	bne.n	8006e60 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	33de      	adds	r3, #222	; 0xde
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
 8006e5e:	e004      	b.n	8006e6a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e60:	2302      	movs	r3, #2
 8006e62:	73fb      	strb	r3, [r7, #15]
 8006e64:	e001      	b.n	8006e6a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e66:	2302      	movs	r3, #2
 8006e68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e8e:	78fa      	ldrb	r2, [r7, #3]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d204      	bcs.n	8006e9e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006e9c:	e001      	b.n	8006ea2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	4608      	mov	r0, r1
 8006eba:	4611      	mov	r1, r2
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	70fb      	strb	r3, [r7, #3]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	70bb      	strb	r3, [r7, #2]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ed8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006eda:	e025      	b.n	8006f28 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	221a      	movs	r2, #26
 8006ee0:	fb02 f303 	mul.w	r3, r2, r3
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	3302      	adds	r3, #2
 8006eec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	795b      	ldrb	r3, [r3, #5]
 8006ef2:	78fa      	ldrb	r2, [r7, #3]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d002      	beq.n	8006efe <USBH_FindInterface+0x4e>
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	2bff      	cmp	r3, #255	; 0xff
 8006efc:	d111      	bne.n	8006f22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f02:	78ba      	ldrb	r2, [r7, #2]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d002      	beq.n	8006f0e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f08:	78bb      	ldrb	r3, [r7, #2]
 8006f0a:	2bff      	cmp	r3, #255	; 0xff
 8006f0c:	d109      	bne.n	8006f22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f12:	787a      	ldrb	r2, [r7, #1]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d002      	beq.n	8006f1e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f18:	787b      	ldrb	r3, [r7, #1]
 8006f1a:	2bff      	cmp	r3, #255	; 0xff
 8006f1c:	d101      	bne.n	8006f22 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	e006      	b.n	8006f30 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	3301      	adds	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d9d6      	bls.n	8006edc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f2e:	23ff      	movs	r3, #255	; 0xff
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 fc83 	bl	8008850 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fd9c 	bl	8008a8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af04      	add	r7, sp, #16
 8006f62:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f64:	2302      	movs	r3, #2
 8006f66:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d102      	bne.n	8006f7e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2203      	movs	r2, #3
 8006f7c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b0b      	cmp	r3, #11
 8006f86:	f200 81be 	bhi.w	8007306 <USBH_Process+0x3aa>
 8006f8a:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <USBH_Process+0x34>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08006fc1 	.word	0x08006fc1
 8006f94:	08006ff3 	.word	0x08006ff3
 8006f98:	0800705b 	.word	0x0800705b
 8006f9c:	080072a1 	.word	0x080072a1
 8006fa0:	08007307 	.word	0x08007307
 8006fa4:	080070ff 	.word	0x080070ff
 8006fa8:	08007247 	.word	0x08007247
 8006fac:	08007135 	.word	0x08007135
 8006fb0:	08007155 	.word	0x08007155
 8006fb4:	08007175 	.word	0x08007175
 8006fb8:	080071b9 	.word	0x080071b9
 8006fbc:	08007289 	.word	0x08007289
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 819e 	beq.w	800730a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006fd4:	20c8      	movs	r0, #200	; 0xc8
 8006fd6:	f001 fd9f 	bl	8008b18 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 fc95 	bl	800890a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ff0:	e18b      	b.n	800730a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d107      	bne.n	800700c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800700a:	e18d      	b.n	8007328 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007016:	d914      	bls.n	8007042 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800701e:	3301      	adds	r3, #1
 8007020:	b2da      	uxtb	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800702e:	2b03      	cmp	r3, #3
 8007030:	d903      	bls.n	800703a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	220d      	movs	r2, #13
 8007036:	701a      	strb	r2, [r3, #0]
      break;
 8007038:	e176      	b.n	8007328 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]
      break;
 8007040:	e172      	b.n	8007328 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007048:	f103 020a 	add.w	r2, r3, #10
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007052:	200a      	movs	r0, #10
 8007054:	f001 fd60 	bl	8008b18 <USBH_Delay>
      break;
 8007058:	e166      	b.n	8007328 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800706a:	2104      	movs	r1, #4
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007070:	2064      	movs	r0, #100	; 0x64
 8007072:	f001 fd51 	bl	8008b18 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fc20 	bl	80088bc <USBH_LL_GetSpeed>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2205      	movs	r2, #5
 800708a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800708c:	2100      	movs	r1, #0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 fa2b 	bl	80084ea <USBH_AllocPipe>
 8007094:	4603      	mov	r3, r0
 8007096:	461a      	mov	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 fa23 	bl	80084ea <USBH_AllocPipe>
 80070a4:	4603      	mov	r3, r0
 80070a6:	461a      	mov	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7919      	ldrb	r1, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070c0:	b292      	uxth	r2, r2
 80070c2:	9202      	str	r2, [sp, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	9201      	str	r2, [sp, #4]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4603      	mov	r3, r0
 80070cc:	2280      	movs	r2, #128	; 0x80
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 f9dc 	bl	800848c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	7959      	ldrb	r1, [r3, #5]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070e8:	b292      	uxth	r2, r2
 80070ea:	9202      	str	r2, [sp, #8]
 80070ec:	2200      	movs	r2, #0
 80070ee:	9201      	str	r2, [sp, #4]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	4603      	mov	r3, r0
 80070f4:	2200      	movs	r2, #0
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 f9c8 	bl	800848c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070fc:	e114      	b.n	8007328 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f918 	bl	8007334 <USBH_HandleEnum>
 8007104:	4603      	mov	r3, r0
 8007106:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	f040 80fe 	bne.w	800730e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007120:	2b01      	cmp	r3, #1
 8007122:	d103      	bne.n	800712c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2208      	movs	r2, #8
 8007128:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800712a:	e0f0      	b.n	800730e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2207      	movs	r2, #7
 8007130:	701a      	strb	r2, [r3, #0]
      break;
 8007132:	e0ec      	b.n	800730e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 80e9 	beq.w	8007312 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007146:	2101      	movs	r1, #1
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2208      	movs	r2, #8
 8007150:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007152:	e0de      	b.n	8007312 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800715a:	b29b      	uxth	r3, r3
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fc2c 	bl	80079bc <USBH_SetCfg>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	f040 80d5 	bne.w	8007316 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2209      	movs	r2, #9
 8007170:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007172:	e0d0      	b.n	8007316 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d016      	beq.n	80071b0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007182:	2101      	movs	r1, #1
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fc3c 	bl	8007a02 <USBH_SetFeature>
 800718a:	4603      	mov	r3, r0
 800718c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d103      	bne.n	800719e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	220a      	movs	r2, #10
 800719a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800719c:	e0bd      	b.n	800731a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	f040 80b9 	bne.w	800731a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	220a      	movs	r2, #10
 80071ac:	701a      	strb	r2, [r3, #0]
      break;
 80071ae:	e0b4      	b.n	800731a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	220a      	movs	r2, #10
 80071b4:	701a      	strb	r2, [r3, #0]
      break;
 80071b6:	e0b0      	b.n	800731a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80ad 	beq.w	800731e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]
 80071d0:	e016      	b.n	8007200 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80071d2:	7bfa      	ldrb	r2, [r7, #15]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	32de      	adds	r2, #222	; 0xde
 80071d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071dc:	791a      	ldrb	r2, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d108      	bne.n	80071fa <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80071e8:	7bfa      	ldrb	r2, [r7, #15]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	32de      	adds	r2, #222	; 0xde
 80071ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80071f8:	e005      	b.n	8007206 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	3301      	adds	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0e5      	beq.n	80071d2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d016      	beq.n	800723e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d109      	bne.n	8007236 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2206      	movs	r2, #6
 8007226:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800722e:	2103      	movs	r1, #3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007234:	e073      	b.n	800731e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	220d      	movs	r2, #13
 800723a:	701a      	strb	r2, [r3, #0]
      break;
 800723c:	e06f      	b.n	800731e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	220d      	movs	r2, #13
 8007242:	701a      	strb	r2, [r3, #0]
      break;
 8007244:	e06b      	b.n	800731e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d017      	beq.n	8007280 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
 800725c:	4603      	mov	r3, r0
 800725e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	220b      	movs	r2, #11
 800726c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800726e:	e058      	b.n	8007322 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d154      	bne.n	8007322 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	220d      	movs	r2, #13
 800727c:	701a      	strb	r2, [r3, #0]
      break;
 800727e:	e050      	b.n	8007322 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	220d      	movs	r2, #13
 8007284:	701a      	strb	r2, [r3, #0]
      break;
 8007286:	e04c      	b.n	8007322 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d049      	beq.n	8007326 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
      }
      break;
 800729e:	e042      	b.n	8007326 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff fd67 	bl	8006d7c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d009      	beq.n	80072cc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072dc:	2105      	movs	r1, #5
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d107      	bne.n	80072fe <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff fe20 	bl	8006f3c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072fc:	e014      	b.n	8007328 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 faa6 	bl	8008850 <USBH_LL_Start>
      break;
 8007304:	e010      	b.n	8007328 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007306:	bf00      	nop
 8007308:	e00e      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 800730a:	bf00      	nop
 800730c:	e00c      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 800730e:	bf00      	nop
 8007310:	e00a      	b.n	8007328 <USBH_Process+0x3cc>
    break;
 8007312:	bf00      	nop
 8007314:	e008      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 8007316:	bf00      	nop
 8007318:	e006      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 800731a:	bf00      	nop
 800731c:	e004      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <USBH_Process+0x3cc>
      break;
 8007326:	bf00      	nop
  }
  return USBH_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop

08007334 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af04      	add	r7, sp, #16
 800733a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800733c:	2301      	movs	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007340:	2301      	movs	r3, #1
 8007342:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	2b07      	cmp	r3, #7
 800734a:	f200 81c1 	bhi.w	80076d0 <USBH_HandleEnum+0x39c>
 800734e:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <USBH_HandleEnum+0x20>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	08007375 	.word	0x08007375
 8007358:	08007433 	.word	0x08007433
 800735c:	0800749d 	.word	0x0800749d
 8007360:	0800752b 	.word	0x0800752b
 8007364:	08007595 	.word	0x08007595
 8007368:	08007605 	.word	0x08007605
 800736c:	0800764b 	.word	0x0800764b
 8007370:	08007691 	.word	0x08007691
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007374:	2108      	movs	r1, #8
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa50 	bl	800781c <USBH_Get_DevDesc>
 800737c:	4603      	mov	r3, r0
 800737e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d130      	bne.n	80073e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	7919      	ldrb	r1, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073aa:	b292      	uxth	r2, r2
 80073ac:	9202      	str	r2, [sp, #8]
 80073ae:	2200      	movs	r2, #0
 80073b0:	9201      	str	r2, [sp, #4]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4603      	mov	r3, r0
 80073b6:	2280      	movs	r2, #128	; 0x80
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f867 	bl	800848c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	7959      	ldrb	r1, [r3, #5]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073d2:	b292      	uxth	r2, r2
 80073d4:	9202      	str	r2, [sp, #8]
 80073d6:	2200      	movs	r2, #0
 80073d8:	9201      	str	r2, [sp, #4]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	4603      	mov	r3, r0
 80073de:	2200      	movs	r2, #0
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 f853 	bl	800848c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073e6:	e175      	b.n	80076d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	f040 8172 	bne.w	80076d4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073f6:	3301      	adds	r3, #1
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007406:	2b03      	cmp	r3, #3
 8007408:	d903      	bls.n	8007412 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	220d      	movs	r2, #13
 800740e:	701a      	strb	r2, [r3, #0]
      break;
 8007410:	e160      	b.n	80076d4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	795b      	ldrb	r3, [r3, #5]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f887 	bl	800852c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	791b      	ldrb	r3, [r3, #4]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f881 	bl	800852c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]
      break;
 8007430:	e150      	b.n	80076d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007432:	2112      	movs	r1, #18
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f9f1 	bl	800781c <USBH_Get_DevDesc>
 800743a:	4603      	mov	r3, r0
 800743c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800744a:	e145      	b.n	80076d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	2b03      	cmp	r3, #3
 8007450:	f040 8142 	bne.w	80076d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800745a:	3301      	adds	r3, #1
 800745c:	b2da      	uxtb	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800746a:	2b03      	cmp	r3, #3
 800746c:	d903      	bls.n	8007476 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	220d      	movs	r2, #13
 8007472:	701a      	strb	r2, [r3, #0]
      break;
 8007474:	e130      	b.n	80076d8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	795b      	ldrb	r3, [r3, #5]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 f855 	bl	800852c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	791b      	ldrb	r3, [r3, #4]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 f84f 	bl	800852c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
      break;
 800749a:	e11d      	b.n	80076d8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800749c:	2101      	movs	r1, #1
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fa68 	bl	8007974 <USBH_SetAddress>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d132      	bne.n	8007514 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80074ae:	2002      	movs	r0, #2
 80074b0:	f001 fb32 	bl	8008b18 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2203      	movs	r2, #3
 80074c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	7919      	ldrb	r1, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074d6:	b292      	uxth	r2, r2
 80074d8:	9202      	str	r2, [sp, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	9201      	str	r2, [sp, #4]
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	4603      	mov	r3, r0
 80074e2:	2280      	movs	r2, #128	; 0x80
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 ffd1 	bl	800848c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	7959      	ldrb	r1, [r3, #5]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074fe:	b292      	uxth	r2, r2
 8007500:	9202      	str	r2, [sp, #8]
 8007502:	2200      	movs	r2, #0
 8007504:	9201      	str	r2, [sp, #4]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	4603      	mov	r3, r0
 800750a:	2200      	movs	r2, #0
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 ffbd 	bl	800848c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007512:	e0e3      	b.n	80076dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	2b03      	cmp	r3, #3
 8007518:	f040 80e0 	bne.w	80076dc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	220d      	movs	r2, #13
 8007520:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	705a      	strb	r2, [r3, #1]
      break;
 8007528:	e0d8      	b.n	80076dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800752a:	2109      	movs	r1, #9
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f99d 	bl	800786c <USBH_Get_CfgDesc>
 8007532:	4603      	mov	r3, r0
 8007534:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2204      	movs	r2, #4
 8007540:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007542:	e0cd      	b.n	80076e0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2b03      	cmp	r3, #3
 8007548:	f040 80ca 	bne.w	80076e0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007552:	3301      	adds	r3, #1
 8007554:	b2da      	uxtb	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007562:	2b03      	cmp	r3, #3
 8007564:	d903      	bls.n	800756e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	220d      	movs	r2, #13
 800756a:	701a      	strb	r2, [r3, #0]
      break;
 800756c:	e0b8      	b.n	80076e0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	795b      	ldrb	r3, [r3, #5]
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 ffd9 	bl	800852c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	791b      	ldrb	r3, [r3, #4]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 ffd3 	bl	800852c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	701a      	strb	r2, [r3, #0]
      break;
 8007592:	e0a5      	b.n	80076e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f965 	bl	800786c <USBH_Get_CfgDesc>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2205      	movs	r2, #5
 80075b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075b2:	e097      	b.n	80076e4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	f040 8094 	bne.w	80076e4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075c2:	3301      	adds	r3, #1
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d903      	bls.n	80075de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	220d      	movs	r2, #13
 80075da:	701a      	strb	r2, [r3, #0]
      break;
 80075dc:	e082      	b.n	80076e4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	795b      	ldrb	r3, [r3, #5]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 ffa1 	bl	800852c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	791b      	ldrb	r3, [r3, #4]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 ff9b 	bl	800852c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
      break;
 8007602:	e06f      	b.n	80076e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800760a:	2b00      	cmp	r3, #0
 800760c:	d019      	beq.n	8007642 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800761a:	23ff      	movs	r3, #255	; 0xff
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f949 	bl	80078b4 <USBH_Get_StringDesc>
 8007622:	4603      	mov	r3, r0
 8007624:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d103      	bne.n	8007634 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2206      	movs	r2, #6
 8007630:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007632:	e059      	b.n	80076e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	2b03      	cmp	r3, #3
 8007638:	d156      	bne.n	80076e8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2206      	movs	r2, #6
 800763e:	705a      	strb	r2, [r3, #1]
      break;
 8007640:	e052      	b.n	80076e8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2206      	movs	r2, #6
 8007646:	705a      	strb	r2, [r3, #1]
      break;
 8007648:	e04e      	b.n	80076e8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007650:	2b00      	cmp	r3, #0
 8007652:	d019      	beq.n	8007688 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007660:	23ff      	movs	r3, #255	; 0xff
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f926 	bl	80078b4 <USBH_Get_StringDesc>
 8007668:	4603      	mov	r3, r0
 800766a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2207      	movs	r2, #7
 8007676:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007678:	e038      	b.n	80076ec <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d135      	bne.n	80076ec <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2207      	movs	r2, #7
 8007684:	705a      	strb	r2, [r3, #1]
      break;
 8007686:	e031      	b.n	80076ec <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2207      	movs	r2, #7
 800768c:	705a      	strb	r2, [r3, #1]
      break;
 800768e:	e02d      	b.n	80076ec <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007696:	2b00      	cmp	r3, #0
 8007698:	d017      	beq.n	80076ca <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076a6:	23ff      	movs	r3, #255	; 0xff
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f903 	bl	80078b4 <USBH_Get_StringDesc>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d102      	bne.n	80076be <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076bc:	e018      	b.n	80076f0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d115      	bne.n	80076f0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]
      break;
 80076c8:	e012      	b.n	80076f0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
      break;
 80076ce:	e00f      	b.n	80076f0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80076d0:	bf00      	nop
 80076d2:	e00e      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076d4:	bf00      	nop
 80076d6:	e00c      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076d8:	bf00      	nop
 80076da:	e00a      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076dc:	bf00      	nop
 80076de:	e008      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076e0:	bf00      	nop
 80076e2:	e006      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076e4:	bf00      	nop
 80076e6:	e004      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076e8:	bf00      	nop
 80076ea:	e002      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076ec:	bf00      	nop
 80076ee:	e000      	b.n	80076f2 <USBH_HandleEnum+0x3be>
      break;
 80076f0:	bf00      	nop
  }
  return Status;
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f804 	bl	800773e <USBH_HandleSof>
}
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b0b      	cmp	r3, #11
 800774e:	d10a      	bne.n	8007766 <USBH_HandleSof+0x28>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d005      	beq.n	8007766 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4798      	blx	r3
  }
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800777e:	bf00      	nop
}
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800779a:	bf00      	nop
}
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 f846 	bl	8008886 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	791b      	ldrb	r3, [r3, #4]
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fe93 	bl	800852c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	795b      	ldrb	r3, [r3, #5]
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fe8d 	bl	800852c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af02      	add	r7, sp, #8
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	b29b      	uxth	r3, r3
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	4613      	mov	r3, r2
 8007836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800783a:	2100      	movs	r1, #0
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f864 	bl	800790a <USBH_GetDescriptor>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007858:	78fa      	ldrb	r2, [r7, #3]
 800785a:	b292      	uxth	r2, r2
 800785c:	4619      	mov	r1, r3
 800785e:	f000 f919 	bl	8007a94 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af02      	add	r7, sp, #8
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	331c      	adds	r3, #28
 800787c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800787e:	887b      	ldrh	r3, [r7, #2]
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007888:	2100      	movs	r1, #0
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f83d 	bl	800790a <USBH_GetDescriptor>
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d107      	bne.n	80078aa <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800789a:	887b      	ldrh	r3, [r7, #2]
 800789c:	461a      	mov	r2, r3
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f989 	bl	8007bb8 <USBH_ParseCfgDesc>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	461a      	mov	r2, r3
 80078c0:	460b      	mov	r3, r1
 80078c2:	72fb      	strb	r3, [r7, #11]
 80078c4:	4613      	mov	r3, r2
 80078c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80078c8:	7afb      	ldrb	r3, [r7, #11]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80078d0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80078d8:	893b      	ldrh	r3, [r7, #8]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	460b      	mov	r3, r1
 80078de:	2100      	movs	r1, #0
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f812 	bl	800790a <USBH_GetDescriptor>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d107      	bne.n	8007900 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078f6:	893a      	ldrh	r2, [r7, #8]
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fb26 	bl	8007f4c <USBH_ParseStringDesc>
  }

  return status;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	72fb      	strb	r3, [r7, #11]
 8007918:	4613      	mov	r3, r2
 800791a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	789b      	ldrb	r3, [r3, #2]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d11c      	bne.n	800795e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800792a:	b2da      	uxtb	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2206      	movs	r2, #6
 8007934:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	893a      	ldrh	r2, [r7, #8]
 800793a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800793c:	893b      	ldrh	r3, [r7, #8]
 800793e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007946:	d104      	bne.n	8007952 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f240 4209 	movw	r2, #1033	; 0x409
 800794e:	829a      	strh	r2, [r3, #20]
 8007950:	e002      	b.n	8007958 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8b3a      	ldrh	r2, [r7, #24]
 800795c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800795e:	8b3b      	ldrh	r3, [r7, #24]
 8007960:	461a      	mov	r2, r3
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fb3f 	bl	8007fe8 <USBH_CtlReq>
 800796a:	4603      	mov	r3, r0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	789b      	ldrb	r3, [r3, #2]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d10f      	bne.n	80079a8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2205      	movs	r2, #5
 8007992:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079a8:	2200      	movs	r2, #0
 80079aa:	2100      	movs	r1, #0
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb1b 	bl	8007fe8 <USBH_CtlReq>
 80079b2:	4603      	mov	r3, r0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	789b      	ldrb	r3, [r3, #2]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d10e      	bne.n	80079ee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2209      	movs	r2, #9
 80079da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	887a      	ldrh	r2, [r7, #2]
 80079e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 faf8 	bl	8007fe8 <USBH_CtlReq>
 80079f8:	4603      	mov	r3, r0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	789b      	ldrb	r3, [r3, #2]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d10f      	bne.n	8007a36 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2203      	movs	r2, #3
 8007a20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a36:	2200      	movs	r2, #0
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fad4 	bl	8007fe8 <USBH_CtlReq>
 8007a40:	4603      	mov	r3, r0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	789b      	ldrb	r3, [r3, #2]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d10f      	bne.n	8007a7e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fab0 	bl	8007fe8 <USBH_CtlReq>
 8007a88:	4603      	mov	r3, r0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	781a      	ldrb	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	785a      	ldrb	r2, [r3, #1]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3302      	adds	r3, #2
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	3303      	adds	r3, #3
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	791a      	ldrb	r2, [r3, #4]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	795a      	ldrb	r2, [r3, #5]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	799a      	ldrb	r2, [r3, #6]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	79da      	ldrb	r2, [r3, #7]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	79db      	ldrb	r3, [r3, #7]
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	dc0f      	bgt.n	8007b16 <USBH_ParseDevDesc+0x82>
 8007af6:	2b08      	cmp	r3, #8
 8007af8:	db14      	blt.n	8007b24 <USBH_ParseDevDesc+0x90>
 8007afa:	3b08      	subs	r3, #8
 8007afc:	4a2d      	ldr	r2, [pc, #180]	; (8007bb4 <USBH_ParseDevDesc+0x120>)
 8007afe:	fa22 f303 	lsr.w	r3, r2, r3
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	2300      	moveq	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <USBH_ParseDevDesc+0x86>
 8007b14:	e006      	b.n	8007b24 <USBH_ParseDevDesc+0x90>
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d104      	bne.n	8007b24 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	79da      	ldrb	r2, [r3, #7]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	71da      	strb	r2, [r3, #7]
      break;
 8007b22:	e003      	b.n	8007b2c <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2240      	movs	r2, #64	; 0x40
 8007b28:	71da      	strb	r2, [r3, #7]
      break;
 8007b2a:	bf00      	nop
  }

  if (length > 8U)
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d939      	bls.n	8007ba6 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3308      	adds	r3, #8
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	3309      	adds	r3, #9
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	4313      	orrs	r3, r2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	330a      	adds	r3, #10
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	330b      	adds	r3, #11
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4313      	orrs	r3, r2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	330d      	adds	r3, #13
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	021b      	lsls	r3, r3, #8
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	7b9a      	ldrb	r2, [r3, #14]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	7bda      	ldrb	r2, [r3, #15]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	7c1a      	ldrb	r2, [r3, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	7c5a      	ldrb	r2, [r3, #17]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	745a      	strb	r2, [r3, #17]
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	01000101 	.word	0x01000101

08007bb8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08c      	sub	sp, #48	; 0x30
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007bcc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	781a      	ldrb	r2, [r3, #0]
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	785a      	ldrb	r2, [r3, #1]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	3302      	adds	r3, #2
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	3303      	adds	r3, #3
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	021b      	lsls	r3, r3, #8
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c14:	bf28      	it	cs
 8007c16:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	791a      	ldrb	r2, [r3, #4]
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	795a      	ldrb	r2, [r3, #5]
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	799a      	ldrb	r2, [r3, #6]
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	79da      	ldrb	r2, [r3, #7]
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	7a1a      	ldrb	r2, [r3, #8]
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b09      	cmp	r3, #9
 8007c4e:	d002      	beq.n	8007c56 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	2209      	movs	r2, #9
 8007c54:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	2b09      	cmp	r3, #9
 8007c5a:	f240 809d 	bls.w	8007d98 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c5e:	2309      	movs	r3, #9
 8007c60:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c66:	e081      	b.n	8007d6c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c68:	f107 0316 	add.w	r3, r7, #22
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c70:	f000 f99f 	bl	8007fb2 <USBH_GetNextDesc>
 8007c74:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	785b      	ldrb	r3, [r3, #1]
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d176      	bne.n	8007d6c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b09      	cmp	r3, #9
 8007c84:	d002      	beq.n	8007c8c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	2209      	movs	r2, #9
 8007c8a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c90:	221a      	movs	r2, #26
 8007c92:	fb02 f303 	mul.w	r3, r2, r3
 8007c96:	3308      	adds	r3, #8
 8007c98:	6a3a      	ldr	r2, [r7, #32]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3302      	adds	r3, #2
 8007c9e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ca2:	69f8      	ldr	r0, [r7, #28]
 8007ca4:	f000 f87e 	bl	8007da4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cb2:	e043      	b.n	8007d3c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007cb4:	f107 0316 	add.w	r3, r7, #22
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cbc:	f000 f979 	bl	8007fb2 <USBH_GetNextDesc>
 8007cc0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	785b      	ldrb	r3, [r3, #1]
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d138      	bne.n	8007d3c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	795b      	ldrb	r3, [r3, #5]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d10f      	bne.n	8007cf2 <USBH_ParseCfgDesc+0x13a>
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	799b      	ldrb	r3, [r3, #6]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d10b      	bne.n	8007cf2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	79db      	ldrb	r3, [r3, #7]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10f      	bne.n	8007d02 <USBH_ParseCfgDesc+0x14a>
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b09      	cmp	r3, #9
 8007ce8:	d00b      	beq.n	8007d02 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	2209      	movs	r2, #9
 8007cee:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cf0:	e007      	b.n	8007d02 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b07      	cmp	r3, #7
 8007cf8:	d004      	beq.n	8007d04 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	2207      	movs	r2, #7
 8007cfe:	701a      	strb	r2, [r3, #0]
 8007d00:	e000      	b.n	8007d04 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007d02:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d0c:	3201      	adds	r2, #1
 8007d0e:	00d2      	lsls	r2, r2, #3
 8007d10:	211a      	movs	r1, #26
 8007d12:	fb01 f303 	mul.w	r3, r1, r3
 8007d16:	4413      	add	r3, r2
 8007d18:	3308      	adds	r3, #8
 8007d1a:	6a3a      	ldr	r2, [r7, #32]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3304      	adds	r3, #4
 8007d20:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d24:	69b9      	ldr	r1, [r7, #24]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 f86b 	bl	8007e02 <USBH_ParseEPDesc>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007d32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d36:	3301      	adds	r3, #1
 8007d38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	791b      	ldrb	r3, [r3, #4]
 8007d40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d204      	bcs.n	8007d52 <USBH_ParseCfgDesc+0x19a>
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	885a      	ldrh	r2, [r3, #2]
 8007d4c:	8afb      	ldrh	r3, [r7, #22]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d8b0      	bhi.n	8007cb4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	791b      	ldrb	r3, [r3, #4]
 8007d56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d201      	bcs.n	8007d62 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e01c      	b.n	8007d9c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d66:	3301      	adds	r3, #1
 8007d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d805      	bhi.n	8007d80 <USBH_ParseCfgDesc+0x1c8>
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	885a      	ldrh	r2, [r3, #2]
 8007d78:	8afb      	ldrh	r3, [r7, #22]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	f63f af74 	bhi.w	8007c68 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	791b      	ldrb	r3, [r3, #4]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	bf28      	it	cs
 8007d88:	2302      	movcs	r3, #2
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d201      	bcs.n	8007d98 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e001      	b.n	8007d9c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3730      	adds	r7, #48	; 0x30
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781a      	ldrb	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	785a      	ldrb	r2, [r3, #1]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	789a      	ldrb	r2, [r3, #2]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	78da      	ldrb	r2, [r3, #3]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	791a      	ldrb	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	795a      	ldrb	r2, [r3, #5]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	799a      	ldrb	r2, [r3, #6]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	79da      	ldrb	r2, [r3, #7]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	7a1a      	ldrb	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	721a      	strb	r2, [r3, #8]
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b087      	sub	sp, #28
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	781a      	ldrb	r2, [r3, #0]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	785a      	ldrb	r2, [r3, #1]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	789a      	ldrb	r2, [r3, #2]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	78da      	ldrb	r2, [r3, #3]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3304      	adds	r3, #4
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3305      	adds	r3, #5
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	4313      	orrs	r3, r2
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	799a      	ldrb	r2, [r3, #6]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	889b      	ldrh	r3, [r3, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d102      	bne.n	8007e64 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	75fb      	strb	r3, [r7, #23]
 8007e62:	e033      	b.n	8007ecc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	889b      	ldrh	r3, [r3, #4]
 8007e68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e6c:	f023 0307 	bic.w	r3, r3, #7
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	889b      	ldrh	r3, [r3, #4]
 8007e7a:	b21a      	sxth	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	b299      	uxth	r1, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3305      	adds	r3, #5
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	430b      	orrs	r3, r1
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d110      	bne.n	8007ebe <USBH_ParseEPDesc+0xbc>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	b299      	uxth	r1, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3305      	adds	r3, #5
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	b21b      	sxth	r3, r3
 8007eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eba:	b21b      	sxth	r3, r3
 8007ebc:	e001      	b.n	8007ec2 <USBH_ParseEPDesc+0xc0>
 8007ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	b21b      	sxth	r3, r3
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d116      	bne.n	8007f04 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	78db      	ldrb	r3, [r3, #3]
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d005      	beq.n	8007eee <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	78db      	ldrb	r3, [r3, #3]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d127      	bne.n	8007f3e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	799b      	ldrb	r3, [r3, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <USBH_ParseEPDesc+0xfc>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	799b      	ldrb	r3, [r3, #6]
 8007efa:	2b10      	cmp	r3, #16
 8007efc:	d91f      	bls.n	8007f3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007efe:	2303      	movs	r3, #3
 8007f00:	75fb      	strb	r3, [r7, #23]
 8007f02:	e01c      	b.n	8007f3e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	78db      	ldrb	r3, [r3, #3]
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d10a      	bne.n	8007f26 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	799b      	ldrb	r3, [r3, #6]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <USBH_ParseEPDesc+0x11e>
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	799b      	ldrb	r3, [r3, #6]
 8007f1c:	2b10      	cmp	r3, #16
 8007f1e:	d90e      	bls.n	8007f3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f20:	2303      	movs	r3, #3
 8007f22:	75fb      	strb	r3, [r7, #23]
 8007f24:	e00b      	b.n	8007f3e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	78db      	ldrb	r3, [r3, #3]
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d105      	bne.n	8007f3e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	799b      	ldrb	r3, [r3, #6]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	371c      	adds	r7, #28
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d120      	bne.n	8007fa6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	1e9a      	subs	r2, r3, #2
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	bf28      	it	cs
 8007f70:	4613      	movcs	r3, r2
 8007f72:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3302      	adds	r3, #2
 8007f78:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	82fb      	strh	r3, [r7, #22]
 8007f7e:	e00b      	b.n	8007f98 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007f80:	8afb      	ldrh	r3, [r7, #22]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	781a      	ldrb	r2, [r3, #0]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007f92:	8afb      	ldrh	r3, [r7, #22]
 8007f94:	3302      	adds	r3, #2
 8007f96:	82fb      	strh	r3, [r7, #22]
 8007f98:	8afa      	ldrh	r2, [r7, #22]
 8007f9a:	8abb      	ldrh	r3, [r7, #20]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d3ef      	bcc.n	8007f80 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
  }
}
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	881a      	ldrh	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fda:	68fb      	ldr	r3, [r7, #12]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	789b      	ldrb	r3, [r3, #2]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d002      	beq.n	8008008 <USBH_CtlReq+0x20>
 8008002:	2b02      	cmp	r3, #2
 8008004:	d00f      	beq.n	8008026 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008006:	e027      	b.n	8008058 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	88fa      	ldrh	r2, [r7, #6]
 8008012:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2201      	movs	r2, #1
 8008018:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2202      	movs	r2, #2
 800801e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008020:	2301      	movs	r3, #1
 8008022:	75fb      	strb	r3, [r7, #23]
      break;
 8008024:	e018      	b.n	8008058 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f81c 	bl	8008064 <USBH_HandleControl>
 800802c:	4603      	mov	r3, r0
 800802e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <USBH_CtlReq+0x54>
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	2b03      	cmp	r3, #3
 800803a:	d106      	bne.n	800804a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2201      	movs	r2, #1
 8008040:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	761a      	strb	r2, [r3, #24]
      break;
 8008048:	e005      	b.n	8008056 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	2b02      	cmp	r3, #2
 800804e:	d102      	bne.n	8008056 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2201      	movs	r2, #1
 8008054:	709a      	strb	r2, [r3, #2]
      break;
 8008056:	bf00      	nop
  }
  return status;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
	...

08008064 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af02      	add	r7, sp, #8
 800806a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800806c:	2301      	movs	r3, #1
 800806e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008070:	2300      	movs	r3, #0
 8008072:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	7e1b      	ldrb	r3, [r3, #24]
 8008078:	3b01      	subs	r3, #1
 800807a:	2b0a      	cmp	r3, #10
 800807c:	f200 8156 	bhi.w	800832c <USBH_HandleControl+0x2c8>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <USBH_HandleControl+0x24>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080b5 	.word	0x080080b5
 800808c:	080080cf 	.word	0x080080cf
 8008090:	08008139 	.word	0x08008139
 8008094:	0800815f 	.word	0x0800815f
 8008098:	08008197 	.word	0x08008197
 800809c:	080081c1 	.word	0x080081c1
 80080a0:	08008213 	.word	0x08008213
 80080a4:	08008235 	.word	0x08008235
 80080a8:	08008271 	.word	0x08008271
 80080ac:	08008297 	.word	0x08008297
 80080b0:	080082d5 	.word	0x080082d5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f103 0110 	add.w	r1, r3, #16
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	795b      	ldrb	r3, [r3, #5]
 80080be:	461a      	mov	r2, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f943 	bl	800834c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2202      	movs	r2, #2
 80080ca:	761a      	strb	r2, [r3, #24]
      break;
 80080cc:	e139      	b.n	8008342 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	795b      	ldrb	r3, [r3, #5]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fcc5 	bl	8008a64 <USBH_LL_GetURBState>
 80080da:	4603      	mov	r3, r0
 80080dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d11e      	bne.n	8008122 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7c1b      	ldrb	r3, [r3, #16]
 80080e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	8adb      	ldrh	r3, [r3, #22]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80080f6:	7b7b      	ldrb	r3, [r7, #13]
 80080f8:	2b80      	cmp	r3, #128	; 0x80
 80080fa:	d103      	bne.n	8008104 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2203      	movs	r2, #3
 8008100:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008102:	e115      	b.n	8008330 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2205      	movs	r2, #5
 8008108:	761a      	strb	r2, [r3, #24]
      break;
 800810a:	e111      	b.n	8008330 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800810c:	7b7b      	ldrb	r3, [r7, #13]
 800810e:	2b80      	cmp	r3, #128	; 0x80
 8008110:	d103      	bne.n	800811a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2209      	movs	r2, #9
 8008116:	761a      	strb	r2, [r3, #24]
      break;
 8008118:	e10a      	b.n	8008330 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2207      	movs	r2, #7
 800811e:	761a      	strb	r2, [r3, #24]
      break;
 8008120:	e106      	b.n	8008330 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b04      	cmp	r3, #4
 8008126:	d003      	beq.n	8008130 <USBH_HandleControl+0xcc>
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	2b02      	cmp	r3, #2
 800812c:	f040 8100 	bne.w	8008330 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	220b      	movs	r2, #11
 8008134:	761a      	strb	r2, [r3, #24]
      break;
 8008136:	e0fb      	b.n	8008330 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800813e:	b29a      	uxth	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6899      	ldr	r1, [r3, #8]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	899a      	ldrh	r2, [r3, #12]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	791b      	ldrb	r3, [r3, #4]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f93a 	bl	80083ca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2204      	movs	r2, #4
 800815a:	761a      	strb	r2, [r3, #24]
      break;
 800815c:	e0f1      	b.n	8008342 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	791b      	ldrb	r3, [r3, #4]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fc7d 	bl	8008a64 <USBH_LL_GetURBState>
 800816a:	4603      	mov	r3, r0
 800816c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d102      	bne.n	800817a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2209      	movs	r2, #9
 8008178:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b05      	cmp	r3, #5
 800817e:	d102      	bne.n	8008186 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008180:	2303      	movs	r3, #3
 8008182:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008184:	e0d6      	b.n	8008334 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b04      	cmp	r3, #4
 800818a:	f040 80d3 	bne.w	8008334 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	220b      	movs	r2, #11
 8008192:	761a      	strb	r2, [r3, #24]
      break;
 8008194:	e0ce      	b.n	8008334 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6899      	ldr	r1, [r3, #8]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	899a      	ldrh	r2, [r3, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	795b      	ldrb	r3, [r3, #5]
 80081a2:	2001      	movs	r0, #1
 80081a4:	9000      	str	r0, [sp, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f8ea 	bl	8008380 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2206      	movs	r2, #6
 80081bc:	761a      	strb	r2, [r3, #24]
      break;
 80081be:	e0c0      	b.n	8008342 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	795b      	ldrb	r3, [r3, #5]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fc4c 	bl	8008a64 <USBH_LL_GetURBState>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d103      	bne.n	80081de <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2207      	movs	r2, #7
 80081da:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081dc:	e0ac      	b.n	8008338 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d105      	bne.n	80081f0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	220c      	movs	r2, #12
 80081e8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80081ea:	2303      	movs	r3, #3
 80081ec:	73fb      	strb	r3, [r7, #15]
      break;
 80081ee:	e0a3      	b.n	8008338 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d103      	bne.n	80081fe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2205      	movs	r2, #5
 80081fa:	761a      	strb	r2, [r3, #24]
      break;
 80081fc:	e09c      	b.n	8008338 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	2b04      	cmp	r3, #4
 8008202:	f040 8099 	bne.w	8008338 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	220b      	movs	r2, #11
 800820a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800820c:	2302      	movs	r3, #2
 800820e:	73fb      	strb	r3, [r7, #15]
      break;
 8008210:	e092      	b.n	8008338 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	791b      	ldrb	r3, [r3, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	2100      	movs	r1, #0
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f8d5 	bl	80083ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008226:	b29a      	uxth	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2208      	movs	r2, #8
 8008230:	761a      	strb	r2, [r3, #24]

      break;
 8008232:	e086      	b.n	8008342 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	791b      	ldrb	r3, [r3, #4]
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fc12 	bl	8008a64 <USBH_LL_GetURBState>
 8008240:	4603      	mov	r3, r0
 8008242:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d105      	bne.n	8008256 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	220d      	movs	r2, #13
 800824e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008254:	e072      	b.n	800833c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b04      	cmp	r3, #4
 800825a:	d103      	bne.n	8008264 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	220b      	movs	r2, #11
 8008260:	761a      	strb	r2, [r3, #24]
      break;
 8008262:	e06b      	b.n	800833c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b05      	cmp	r3, #5
 8008268:	d168      	bne.n	800833c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800826a:	2303      	movs	r3, #3
 800826c:	73fb      	strb	r3, [r7, #15]
      break;
 800826e:	e065      	b.n	800833c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	795b      	ldrb	r3, [r3, #5]
 8008274:	2201      	movs	r2, #1
 8008276:	9200      	str	r2, [sp, #0]
 8008278:	2200      	movs	r2, #0
 800827a:	2100      	movs	r1, #0
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f87f 	bl	8008380 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008288:	b29a      	uxth	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	220a      	movs	r2, #10
 8008292:	761a      	strb	r2, [r3, #24]
      break;
 8008294:	e055      	b.n	8008342 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	795b      	ldrb	r3, [r3, #5]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fbe1 	bl	8008a64 <USBH_LL_GetURBState>
 80082a2:	4603      	mov	r3, r0
 80082a4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d105      	bne.n	80082b8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	220d      	movs	r2, #13
 80082b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082b6:	e043      	b.n	8008340 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d103      	bne.n	80082c6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2209      	movs	r2, #9
 80082c2:	761a      	strb	r2, [r3, #24]
      break;
 80082c4:	e03c      	b.n	8008340 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b04      	cmp	r3, #4
 80082ca:	d139      	bne.n	8008340 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	220b      	movs	r2, #11
 80082d0:	761a      	strb	r2, [r3, #24]
      break;
 80082d2:	e035      	b.n	8008340 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7e5b      	ldrb	r3, [r3, #25]
 80082d8:	3301      	adds	r3, #1
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	765a      	strb	r2, [r3, #25]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	7e5b      	ldrb	r3, [r3, #25]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d806      	bhi.n	80082f6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80082f4:	e025      	b.n	8008342 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082fc:	2106      	movs	r1, #6
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	795b      	ldrb	r3, [r3, #5]
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f90c 	bl	800852c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	791b      	ldrb	r3, [r3, #4]
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f906 	bl	800852c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008326:	2302      	movs	r3, #2
 8008328:	73fb      	strb	r3, [r7, #15]
      break;
 800832a:	e00a      	b.n	8008342 <USBH_HandleControl+0x2de>

    default:
      break;
 800832c:	bf00      	nop
 800832e:	e008      	b.n	8008342 <USBH_HandleControl+0x2de>
      break;
 8008330:	bf00      	nop
 8008332:	e006      	b.n	8008342 <USBH_HandleControl+0x2de>
      break;
 8008334:	bf00      	nop
 8008336:	e004      	b.n	8008342 <USBH_HandleControl+0x2de>
      break;
 8008338:	bf00      	nop
 800833a:	e002      	b.n	8008342 <USBH_HandleControl+0x2de>
      break;
 800833c:	bf00      	nop
 800833e:	e000      	b.n	8008342 <USBH_HandleControl+0x2de>
      break;
 8008340:	bf00      	nop
  }

  return status;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af04      	add	r7, sp, #16
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800835a:	79f9      	ldrb	r1, [r7, #7]
 800835c:	2300      	movs	r3, #0
 800835e:	9303      	str	r3, [sp, #12]
 8008360:	2308      	movs	r3, #8
 8008362:	9302      	str	r3, [sp, #8]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	9301      	str	r3, [sp, #4]
 8008368:	2300      	movs	r3, #0
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	2300      	movs	r3, #0
 800836e:	2200      	movs	r2, #0
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 fb46 	bl	8008a02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af04      	add	r7, sp, #16
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4611      	mov	r1, r2
 800838c:	461a      	mov	r2, r3
 800838e:	460b      	mov	r3, r1
 8008390:	80fb      	strh	r3, [r7, #6]
 8008392:	4613      	mov	r3, r2
 8008394:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083a4:	7979      	ldrb	r1, [r7, #5]
 80083a6:	7e3b      	ldrb	r3, [r7, #24]
 80083a8:	9303      	str	r3, [sp, #12]
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	9302      	str	r3, [sp, #8]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	2301      	movs	r3, #1
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 fb21 	bl	8008a02 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b088      	sub	sp, #32
 80083ce:	af04      	add	r7, sp, #16
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	4611      	mov	r1, r2
 80083d6:	461a      	mov	r2, r3
 80083d8:	460b      	mov	r3, r1
 80083da:	80fb      	strh	r3, [r7, #6]
 80083dc:	4613      	mov	r3, r2
 80083de:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083e0:	7979      	ldrb	r1, [r7, #5]
 80083e2:	2300      	movs	r3, #0
 80083e4:	9303      	str	r3, [sp, #12]
 80083e6:	88fb      	ldrh	r3, [r7, #6]
 80083e8:	9302      	str	r3, [sp, #8]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	2301      	movs	r3, #1
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	2300      	movs	r3, #0
 80083f4:	2201      	movs	r2, #1
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 fb03 	bl	8008a02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083fc:	2300      	movs	r3, #0

}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b088      	sub	sp, #32
 800840a:	af04      	add	r7, sp, #16
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	4611      	mov	r1, r2
 8008412:	461a      	mov	r2, r3
 8008414:	460b      	mov	r3, r1
 8008416:	80fb      	strh	r3, [r7, #6]
 8008418:	4613      	mov	r3, r2
 800841a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800842a:	7979      	ldrb	r1, [r7, #5]
 800842c:	7e3b      	ldrb	r3, [r7, #24]
 800842e:	9303      	str	r3, [sp, #12]
 8008430:	88fb      	ldrh	r3, [r7, #6]
 8008432:	9302      	str	r3, [sp, #8]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	2301      	movs	r3, #1
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	2302      	movs	r3, #2
 800843e:	2200      	movs	r2, #0
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fade 	bl	8008a02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af04      	add	r7, sp, #16
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4611      	mov	r1, r2
 800845c:	461a      	mov	r2, r3
 800845e:	460b      	mov	r3, r1
 8008460:	80fb      	strh	r3, [r7, #6]
 8008462:	4613      	mov	r3, r2
 8008464:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008466:	7979      	ldrb	r1, [r7, #5]
 8008468:	2300      	movs	r3, #0
 800846a:	9303      	str	r3, [sp, #12]
 800846c:	88fb      	ldrh	r3, [r7, #6]
 800846e:	9302      	str	r3, [sp, #8]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	2301      	movs	r3, #1
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	2302      	movs	r3, #2
 800847a:	2201      	movs	r2, #1
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fac0 	bl	8008a02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af04      	add	r7, sp, #16
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	4608      	mov	r0, r1
 8008496:	4611      	mov	r1, r2
 8008498:	461a      	mov	r2, r3
 800849a:	4603      	mov	r3, r0
 800849c:	70fb      	strb	r3, [r7, #3]
 800849e:	460b      	mov	r3, r1
 80084a0:	70bb      	strb	r3, [r7, #2]
 80084a2:	4613      	mov	r3, r2
 80084a4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80084a6:	7878      	ldrb	r0, [r7, #1]
 80084a8:	78ba      	ldrb	r2, [r7, #2]
 80084aa:	78f9      	ldrb	r1, [r7, #3]
 80084ac:	8b3b      	ldrh	r3, [r7, #24]
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	7d3b      	ldrb	r3, [r7, #20]
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	7c3b      	ldrb	r3, [r7, #16]
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	4603      	mov	r3, r0
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa53 	bl	8008966 <USBH_LL_OpenPipe>

  return USBH_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b082      	sub	sp, #8
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa72 	bl	80089c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f836 	bl	8008568 <USBH_GetFreePipe>
 80084fc:	4603      	mov	r3, r0
 80084fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008500:	89fb      	ldrh	r3, [r7, #14]
 8008502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008506:	4293      	cmp	r3, r2
 8008508:	d00a      	beq.n	8008520 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	89fb      	ldrh	r3, [r7, #14]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	33e0      	adds	r3, #224	; 0xe0
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008520:	89fb      	ldrh	r3, [r7, #14]
 8008522:	b2db      	uxtb	r3, r3
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008538:	78fb      	ldrb	r3, [r7, #3]
 800853a:	2b0f      	cmp	r3, #15
 800853c:	d80d      	bhi.n	800855a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	33e0      	adds	r3, #224	; 0xe0
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	33e0      	adds	r3, #224	; 0xe0
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	440b      	add	r3, r1
 8008558:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
 8008578:	e00f      	b.n	800859a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	33e0      	adds	r3, #224	; 0xe0
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d102      	bne.n	8008594 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	b29b      	uxth	r3, r3
 8008592:	e007      	b.n	80085a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	3301      	adds	r3, #1
 8008598:	73fb      	strb	r3, [r7, #15]
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	2b0f      	cmp	r3, #15
 800859e:	d9ec      	bls.n	800857a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80085a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085b4:	2201      	movs	r2, #1
 80085b6:	490e      	ldr	r1, [pc, #56]	; (80085f0 <MX_USB_HOST_Init+0x40>)
 80085b8:	480e      	ldr	r0, [pc, #56]	; (80085f4 <MX_USB_HOST_Init+0x44>)
 80085ba:	f7fe fba5 	bl	8006d08 <USBH_Init>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085c4:	f7f8 fb02 	bl	8000bcc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085c8:	490b      	ldr	r1, [pc, #44]	; (80085f8 <MX_USB_HOST_Init+0x48>)
 80085ca:	480a      	ldr	r0, [pc, #40]	; (80085f4 <MX_USB_HOST_Init+0x44>)
 80085cc:	f7fe fc2a 	bl	8006e24 <USBH_RegisterClass>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80085d6:	f7f8 faf9 	bl	8000bcc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80085da:	4806      	ldr	r0, [pc, #24]	; (80085f4 <MX_USB_HOST_Init+0x44>)
 80085dc:	f7fe fcae 	bl	8006f3c <USBH_Start>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80085e6:	f7f8 faf1 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80085ea:	bf00      	nop
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	08008611 	.word	0x08008611
 80085f4:	20000240 	.word	0x20000240
 80085f8:	2000000c 	.word	0x2000000c

080085fc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008600:	4802      	ldr	r0, [pc, #8]	; (800860c <MX_USB_HOST_Process+0x10>)
 8008602:	f7fe fcab 	bl	8006f5c <USBH_Process>
}
 8008606:	bf00      	nop
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000240 	.word	0x20000240

08008610 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	3b01      	subs	r3, #1
 8008620:	2b04      	cmp	r3, #4
 8008622:	d819      	bhi.n	8008658 <USBH_UserProcess+0x48>
 8008624:	a201      	add	r2, pc, #4	; (adr r2, 800862c <USBH_UserProcess+0x1c>)
 8008626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862a:	bf00      	nop
 800862c:	08008659 	.word	0x08008659
 8008630:	08008649 	.word	0x08008649
 8008634:	08008659 	.word	0x08008659
 8008638:	08008651 	.word	0x08008651
 800863c:	08008641 	.word	0x08008641
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008640:	4b09      	ldr	r3, [pc, #36]	; (8008668 <USBH_UserProcess+0x58>)
 8008642:	2203      	movs	r2, #3
 8008644:	701a      	strb	r2, [r3, #0]
  break;
 8008646:	e008      	b.n	800865a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008648:	4b07      	ldr	r3, [pc, #28]	; (8008668 <USBH_UserProcess+0x58>)
 800864a:	2202      	movs	r2, #2
 800864c:	701a      	strb	r2, [r3, #0]
  break;
 800864e:	e004      	b.n	800865a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008650:	4b05      	ldr	r3, [pc, #20]	; (8008668 <USBH_UserProcess+0x58>)
 8008652:	2201      	movs	r2, #1
 8008654:	701a      	strb	r2, [r3, #0]
  break;
 8008656:	e000      	b.n	800865a <USBH_UserProcess+0x4a>

  default:
  break;
 8008658:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800865a:	bf00      	nop
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	20000618 	.word	0x20000618

0800866c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	; 0x28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008674:	f107 0314 	add.w	r3, r7, #20
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	605a      	str	r2, [r3, #4]
 800867e:	609a      	str	r2, [r3, #8]
 8008680:	60da      	str	r2, [r3, #12]
 8008682:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800868c:	d147      	bne.n	800871e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800868e:	2300      	movs	r3, #0
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	4b25      	ldr	r3, [pc, #148]	; (8008728 <HAL_HCD_MspInit+0xbc>)
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	4a24      	ldr	r2, [pc, #144]	; (8008728 <HAL_HCD_MspInit+0xbc>)
 8008698:	f043 0301 	orr.w	r3, r3, #1
 800869c:	6313      	str	r3, [r2, #48]	; 0x30
 800869e:	4b22      	ldr	r3, [pc, #136]	; (8008728 <HAL_HCD_MspInit+0xbc>)
 80086a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80086aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086b8:	f107 0314 	add.w	r3, r7, #20
 80086bc:	4619      	mov	r1, r3
 80086be:	481b      	ldr	r0, [pc, #108]	; (800872c <HAL_HCD_MspInit+0xc0>)
 80086c0:	f7f8 fefa 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80086c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086ca:	2302      	movs	r3, #2
 80086cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086d2:	2300      	movs	r3, #0
 80086d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086d6:	230a      	movs	r3, #10
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086da:	f107 0314 	add.w	r3, r7, #20
 80086de:	4619      	mov	r1, r3
 80086e0:	4812      	ldr	r0, [pc, #72]	; (800872c <HAL_HCD_MspInit+0xc0>)
 80086e2:	f7f8 fee9 	bl	80014b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086e6:	4b10      	ldr	r3, [pc, #64]	; (8008728 <HAL_HCD_MspInit+0xbc>)
 80086e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ea:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <HAL_HCD_MspInit+0xbc>)
 80086ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f0:	6353      	str	r3, [r2, #52]	; 0x34
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <HAL_HCD_MspInit+0xbc>)
 80086f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fa:	4a0b      	ldr	r2, [pc, #44]	; (8008728 <HAL_HCD_MspInit+0xbc>)
 80086fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008700:	6453      	str	r3, [r2, #68]	; 0x44
 8008702:	4b09      	ldr	r3, [pc, #36]	; (8008728 <HAL_HCD_MspInit+0xbc>)
 8008704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800870e:	2200      	movs	r2, #0
 8008710:	2100      	movs	r1, #0
 8008712:	2043      	movs	r0, #67	; 0x43
 8008714:	f7f8 fea6 	bl	8001464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008718:	2043      	movs	r0, #67	; 0x43
 800871a:	f7f8 febf 	bl	800149c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800871e:	bf00      	nop
 8008720:	3728      	adds	r7, #40	; 0x28
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	40023800 	.word	0x40023800
 800872c:	40020000 	.word	0x40020000

08008730 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe ffeb 	bl	800771a <USBH_LL_IncTimer>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff f823 	bl	80077a6 <USBH_LL_Connect>
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008776:	4618      	mov	r0, r3
 8008778:	f7ff f82c 	bl	80077d4 <USBH_LL_Disconnect>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
 8008790:	4613      	mov	r3, r2
 8008792:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe ffdd 	bl	800776e <USBH_LL_PortEnabled>
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe ffdd 	bl	800778a <USBH_LL_PortDisabled>
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d12a      	bne.n	8008840 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80087ea:	4a18      	ldr	r2, [pc, #96]	; (800884c <USBH_LL_Init+0x74>)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a15      	ldr	r2, [pc, #84]	; (800884c <USBH_LL_Init+0x74>)
 80087f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087fa:	4b14      	ldr	r3, [pc, #80]	; (800884c <USBH_LL_Init+0x74>)
 80087fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008800:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008802:	4b12      	ldr	r3, [pc, #72]	; (800884c <USBH_LL_Init+0x74>)
 8008804:	2208      	movs	r2, #8
 8008806:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008808:	4b10      	ldr	r3, [pc, #64]	; (800884c <USBH_LL_Init+0x74>)
 800880a:	2201      	movs	r2, #1
 800880c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800880e:	4b0f      	ldr	r3, [pc, #60]	; (800884c <USBH_LL_Init+0x74>)
 8008810:	2200      	movs	r2, #0
 8008812:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008814:	4b0d      	ldr	r3, [pc, #52]	; (800884c <USBH_LL_Init+0x74>)
 8008816:	2202      	movs	r2, #2
 8008818:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800881a:	4b0c      	ldr	r3, [pc, #48]	; (800884c <USBH_LL_Init+0x74>)
 800881c:	2200      	movs	r2, #0
 800881e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008820:	480a      	ldr	r0, [pc, #40]	; (800884c <USBH_LL_Init+0x74>)
 8008822:	f7f8 fffe 	bl	8001822 <HAL_HCD_Init>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800882c:	f7f8 f9ce 	bl	8000bcc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008830:	4806      	ldr	r0, [pc, #24]	; (800884c <USBH_LL_Init+0x74>)
 8008832:	f7f9 fbe2 	bl	8001ffa <HAL_HCD_GetCurrentFrame>
 8008836:	4603      	mov	r3, r0
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7fe ff5e 	bl	80076fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	2000061c 	.word	0x2000061c

08008850 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008866:	4618      	mov	r0, r3
 8008868:	f7f9 fb51 	bl	8001f0e <HAL_HCD_Start>
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 f95c 	bl	8008b30 <USBH_Get_USB_Status>
 8008878:	4603      	mov	r3, r0
 800887a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800887c:	7bbb      	ldrb	r3, [r7, #14]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800889c:	4618      	mov	r0, r3
 800889e:	f7f9 fb59 	bl	8001f54 <HAL_HCD_Stop>
 80088a2:	4603      	mov	r3, r0
 80088a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 f941 	bl	8008b30 <USBH_Get_USB_Status>
 80088ae:	4603      	mov	r3, r0
 80088b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088c4:	2301      	movs	r3, #1
 80088c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7f9 fba1 	bl	8002016 <HAL_HCD_GetCurrentSpeed>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d00c      	beq.n	80088f4 <USBH_LL_GetSpeed+0x38>
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d80d      	bhi.n	80088fa <USBH_LL_GetSpeed+0x3e>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <USBH_LL_GetSpeed+0x2c>
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d003      	beq.n	80088ee <USBH_LL_GetSpeed+0x32>
 80088e6:	e008      	b.n	80088fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]
    break;
 80088ec:	e008      	b.n	8008900 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80088ee:	2301      	movs	r3, #1
 80088f0:	73fb      	strb	r3, [r7, #15]
    break;
 80088f2:	e005      	b.n	8008900 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80088f4:	2302      	movs	r3, #2
 80088f6:	73fb      	strb	r3, [r7, #15]
    break;
 80088f8:	e002      	b.n	8008900 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80088fa:	2301      	movs	r3, #1
 80088fc:	73fb      	strb	r3, [r7, #15]
    break;
 80088fe:	bf00      	nop
  }
  return  speed;
 8008900:	7bfb      	ldrb	r3, [r7, #15]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008920:	4618      	mov	r0, r3
 8008922:	f7f9 fb34 	bl	8001f8e <HAL_HCD_ResetPort>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f8ff 	bl	8008b30 <USBH_Get_USB_Status>
 8008932:	4603      	mov	r3, r0
 8008934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008936:	7bbb      	ldrb	r3, [r7, #14]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008952:	78fa      	ldrb	r2, [r7, #3]
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7f9 fb3b 	bl	8001fd2 <HAL_HCD_HC_GetXferCount>
 800895c:	4603      	mov	r3, r0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008966:	b590      	push	{r4, r7, lr}
 8008968:	b089      	sub	sp, #36	; 0x24
 800896a:	af04      	add	r7, sp, #16
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	4608      	mov	r0, r1
 8008970:	4611      	mov	r1, r2
 8008972:	461a      	mov	r2, r3
 8008974:	4603      	mov	r3, r0
 8008976:	70fb      	strb	r3, [r7, #3]
 8008978:	460b      	mov	r3, r1
 800897a:	70bb      	strb	r3, [r7, #2]
 800897c:	4613      	mov	r3, r2
 800897e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800898e:	787c      	ldrb	r4, [r7, #1]
 8008990:	78ba      	ldrb	r2, [r7, #2]
 8008992:	78f9      	ldrb	r1, [r7, #3]
 8008994:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008996:	9302      	str	r3, [sp, #8]
 8008998:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800899c:	9301      	str	r3, [sp, #4]
 800899e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	4623      	mov	r3, r4
 80089a6:	f7f8 ff9e 	bl	80018e6 <HAL_HCD_HC_Init>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 f8bd 	bl	8008b30 <USBH_Get_USB_Status>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd90      	pop	{r4, r7, pc}

080089c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089de:	78fa      	ldrb	r2, [r7, #3]
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7f9 f80e 	bl	8001a04 <HAL_HCD_HC_Halt>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 f89e 	bl	8008b30 <USBH_Get_USB_Status>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a02:	b590      	push	{r4, r7, lr}
 8008a04:	b089      	sub	sp, #36	; 0x24
 8008a06:	af04      	add	r7, sp, #16
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	461a      	mov	r2, r3
 8008a10:	4603      	mov	r3, r0
 8008a12:	70fb      	strb	r3, [r7, #3]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70bb      	strb	r3, [r7, #2]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a2a:	787c      	ldrb	r4, [r7, #1]
 8008a2c:	78ba      	ldrb	r2, [r7, #2]
 8008a2e:	78f9      	ldrb	r1, [r7, #3]
 8008a30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a34:	9303      	str	r3, [sp, #12]
 8008a36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a38:	9302      	str	r3, [sp, #8]
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	4623      	mov	r3, r4
 8008a46:	f7f9 f801 	bl	8001a4c <HAL_HCD_HC_SubmitRequest>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 f86d 	bl	8008b30 <USBH_Get_USB_Status>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd90      	pop	{r4, r7, pc}

08008a64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7f9 fa95 	bl	8001faa <HAL_HCD_HC_GetURBState>
 8008a80:	4603      	mov	r3, r0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b082      	sub	sp, #8
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	460b      	mov	r3, r1
 8008a94:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d103      	bne.n	8008aa8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 f870 	bl	8008b88 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008aa8:	20c8      	movs	r0, #200	; 0xc8
 8008aaa:	f7f8 fbff 	bl	80012ac <HAL_Delay>
  return USBH_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ace:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	212c      	movs	r1, #44	; 0x2c
 8008ad6:	fb01 f303 	mul.w	r3, r1, r3
 8008ada:	4413      	add	r3, r2
 8008adc:	333b      	adds	r3, #59	; 0x3b
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d009      	beq.n	8008af8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	212c      	movs	r1, #44	; 0x2c
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	4413      	add	r3, r2
 8008af0:	3354      	adds	r3, #84	; 0x54
 8008af2:	78ba      	ldrb	r2, [r7, #2]
 8008af4:	701a      	strb	r2, [r3, #0]
 8008af6:	e008      	b.n	8008b0a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	212c      	movs	r1, #44	; 0x2c
 8008afe:	fb01 f303 	mul.w	r3, r1, r3
 8008b02:	4413      	add	r3, r2
 8008b04:	3355      	adds	r3, #85	; 0x55
 8008b06:	78ba      	ldrb	r2, [r7, #2]
 8008b08:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7f8 fbc3 	bl	80012ac <HAL_Delay>
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d817      	bhi.n	8008b74 <USBH_Get_USB_Status+0x44>
 8008b44:	a201      	add	r2, pc, #4	; (adr r2, 8008b4c <USBH_Get_USB_Status+0x1c>)
 8008b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4a:	bf00      	nop
 8008b4c:	08008b5d 	.word	0x08008b5d
 8008b50:	08008b63 	.word	0x08008b63
 8008b54:	08008b69 	.word	0x08008b69
 8008b58:	08008b6f 	.word	0x08008b6f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b60:	e00b      	b.n	8008b7a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b62:	2302      	movs	r3, #2
 8008b64:	73fb      	strb	r3, [r7, #15]
    break;
 8008b66:	e008      	b.n	8008b7a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b6c:	e005      	b.n	8008b7a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b6e:	2302      	movs	r3, #2
 8008b70:	73fb      	strb	r3, [r7, #15]
    break;
 8008b72:	e002      	b.n	8008b7a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b74:	2302      	movs	r3, #2
 8008b76:	73fb      	strb	r3, [r7, #15]
    break;
 8008b78:	bf00      	nop
  }
  return usb_status;
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d102      	bne.n	8008ba2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]
 8008ba0:	e001      	b.n	8008ba6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	2101      	movs	r1, #1
 8008bac:	4803      	ldr	r0, [pc, #12]	; (8008bbc <MX_DriverVbusFS+0x34>)
 8008bae:	f7f8 fe1f 	bl	80017f0 <HAL_GPIO_WritePin>
}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	40020800 	.word	0x40020800

08008bc0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f103 0208 	add.w	r2, r3, #8
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f103 0208 	add.w	r2, r3, #8
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f103 0208 	add.w	r2, r3, #8
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c0e:	bf00      	nop
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d103      	bne.n	8008c3a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	e00c      	b.n	8008c54 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	e002      	b.n	8008c48 <vListInsert+0x2e>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d2f6      	bcs.n	8008c42 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	601a      	str	r2, [r3, #0]
}
 8008c80:	bf00      	nop
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6892      	ldr	r2, [r2, #8]
 8008ca2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	6852      	ldr	r2, [r2, #4]
 8008cac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d103      	bne.n	8008cc0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	1e5a      	subs	r2, r3, #1
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8008cea:	2301      	movs	r3, #1
 8008cec:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10a      	bne.n	8008d0e <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008d0a:	bf00      	nop
 8008d0c:	e7fe      	b.n	8008d0c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d05d      	beq.n	8008dd0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d059      	beq.n	8008dd0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d24:	2100      	movs	r1, #0
 8008d26:	fba3 2302 	umull	r2, r3, r3, r2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d000      	beq.n	8008d30 <xQueueGenericReset+0x50>
 8008d2e:	2101      	movs	r1, #1
 8008d30:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d14c      	bne.n	8008dd0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8008d36:	f002 fb0f 	bl	800b358 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d42:	6939      	ldr	r1, [r7, #16]
 8008d44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d46:	fb01 f303 	mul.w	r3, r1, r3
 8008d4a:	441a      	add	r2, r3
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	2200      	movs	r2, #0
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d66:	3b01      	subs	r3, #1
 8008d68:	6939      	ldr	r1, [r7, #16]
 8008d6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d6c:	fb01 f303 	mul.w	r3, r1, r3
 8008d70:	441a      	add	r2, r3
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	22ff      	movs	r2, #255	; 0xff
 8008d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	22ff      	movs	r2, #255	; 0xff
 8008d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d114      	bne.n	8008db6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01a      	beq.n	8008dca <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	3310      	adds	r3, #16
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 fa6f 	bl	800a27c <xTaskRemoveFromEventList>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d012      	beq.n	8008dca <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008da4:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <xQueueGenericReset+0x11c>)
 8008da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	e009      	b.n	8008dca <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	3310      	adds	r3, #16
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff ff00 	bl	8008bc0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	3324      	adds	r3, #36	; 0x24
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff fefb 	bl	8008bc0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8008dca:	f002 faf5 	bl	800b3b8 <vPortExitCritical>
 8008dce:	e001      	b.n	8008dd4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10a      	bne.n	8008df0 <xQueueGenericReset+0x110>
        __asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	60bb      	str	r3, [r7, #8]
    }
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8008df0:	697b      	ldr	r3, [r7, #20]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3718      	adds	r7, #24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	e000ed04 	.word	0xe000ed04

08008e00 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08a      	sub	sp, #40	; 0x28
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d02e      	beq.n	8008e76 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008e18:	2100      	movs	r1, #0
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d000      	beq.n	8008e28 <xQueueGenericCreate+0x28>
 8008e26:	2101      	movs	r1, #1
 8008e28:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d123      	bne.n	8008e76 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008e36:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8008e3a:	d81c      	bhi.n	8008e76 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	fb02 f303 	mul.w	r3, r2, r3
 8008e44:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	3350      	adds	r3, #80	; 0x50
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f002 fb66 	bl	800b51c <pvPortMalloc>
 8008e50:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01c      	beq.n	8008e92 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	3350      	adds	r3, #80	; 0x50
 8008e60:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e62:	79fa      	ldrb	r2, [r7, #7]
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	68b9      	ldr	r1, [r7, #8]
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 f814 	bl	8008e9c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008e74:	e00d      	b.n	8008e92 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <xQueueGenericCreate+0x92>
        __asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	613b      	str	r3, [r7, #16]
    }
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008e92:	69fb      	ldr	r3, [r7, #28]
    }
 8008e94:	4618      	mov	r0, r3
 8008e96:	3720      	adds	r7, #32
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d103      	bne.n	8008eb8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	e002      	b.n	8008ebe <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008eca:	2101      	movs	r1, #1
 8008ecc:	69b8      	ldr	r0, [r7, #24]
 8008ece:	f7ff ff07 	bl	8008ce0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	78fa      	ldrb	r2, [r7, #3]
 8008ed6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00e      	beq.n	8008f0e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008f02:	2300      	movs	r3, #0
 8008f04:	2200      	movs	r2, #0
 8008f06:	2100      	movs	r1, #0
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f84b 	bl	8008fa4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8008f0e:	bf00      	nop
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b086      	sub	sp, #24
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008f20:	2301      	movs	r3, #1
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	2300      	movs	r3, #0
 8008f26:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	6939      	ldr	r1, [r7, #16]
 8008f2e:	6978      	ldr	r0, [r7, #20]
 8008f30:	f7ff ff66 	bl	8008e00 <xQueueGenericCreate>
 8008f34:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f7ff ffd3 	bl	8008ee2 <prvInitialiseMutex>

        return xNewQueue;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
    }
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d010      	beq.n	8008f7c <xQueueCreateCountingSemaphore+0x36>
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d80c      	bhi.n	8008f7c <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f62:	2202      	movs	r2, #2
 8008f64:	2100      	movs	r1, #0
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7ff ff4a 	bl	8008e00 <xQueueGenericCreate>
 8008f6c:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d011      	beq.n	8008f98 <xQueueCreateCountingSemaphore+0x52>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8008f7a:	e00d      	b.n	8008f98 <xQueueCreateCountingSemaphore+0x52>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10a      	bne.n	8008f98 <xQueueCreateCountingSemaphore+0x52>
        __asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	60bb      	str	r3, [r7, #8]
    }
 8008f94:	bf00      	nop
 8008f96:	e7fe      	b.n	8008f96 <xQueueCreateCountingSemaphore+0x50>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8008f98:	68fb      	ldr	r3, [r7, #12]
    }
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08e      	sub	sp, #56	; 0x38
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10a      	bne.n	8008fd6 <xQueueGenericSend+0x32>
        __asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008fd2:	bf00      	nop
 8008fd4:	e7fe      	b.n	8008fd4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d103      	bne.n	8008fe4 <xQueueGenericSend+0x40>
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <xQueueGenericSend+0x44>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e000      	b.n	8008fea <xQueueGenericSend+0x46>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <xQueueGenericSend+0x60>
        __asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b02      	cmp	r3, #2
 8009008:	d103      	bne.n	8009012 <xQueueGenericSend+0x6e>
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900e:	2b01      	cmp	r3, #1
 8009010:	d101      	bne.n	8009016 <xQueueGenericSend+0x72>
 8009012:	2301      	movs	r3, #1
 8009014:	e000      	b.n	8009018 <xQueueGenericSend+0x74>
 8009016:	2300      	movs	r3, #0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10a      	bne.n	8009032 <xQueueGenericSend+0x8e>
        __asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	623b      	str	r3, [r7, #32]
    }
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009032:	f001 fb33 	bl	800a69c <xTaskGetSchedulerState>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <xQueueGenericSend+0x9e>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <xQueueGenericSend+0xa2>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <xQueueGenericSend+0xa4>
 8009046:	2300      	movs	r3, #0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <xQueueGenericSend+0xbe>
        __asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	61fb      	str	r3, [r7, #28]
    }
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009062:	f002 f979 	bl	800b358 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906e:	429a      	cmp	r2, r3
 8009070:	d302      	bcc.n	8009078 <xQueueGenericSend+0xd4>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b02      	cmp	r3, #2
 8009076:	d129      	bne.n	80090cc <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	68b9      	ldr	r1, [r7, #8]
 800907c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800907e:	f000 fa85 	bl	800958c <prvCopyDataToQueue>
 8009082:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	d010      	beq.n	80090ae <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	3324      	adds	r3, #36	; 0x24
 8009090:	4618      	mov	r0, r3
 8009092:	f001 f8f3 	bl	800a27c <xTaskRemoveFromEventList>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d013      	beq.n	80090c4 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800909c:	4b3f      	ldr	r3, [pc, #252]	; (800919c <xQueueGenericSend+0x1f8>)
 800909e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	e00a      	b.n	80090c4 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d007      	beq.n	80090c4 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80090b4:	4b39      	ldr	r3, [pc, #228]	; (800919c <xQueueGenericSend+0x1f8>)
 80090b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80090c4:	f002 f978 	bl	800b3b8 <vPortExitCritical>
                return pdPASS;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e063      	b.n	8009194 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d103      	bne.n	80090da <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80090d2:	f002 f971 	bl	800b3b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	e05c      	b.n	8009194 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80090da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d106      	bne.n	80090ee <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80090e0:	f107 0314 	add.w	r3, r7, #20
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 f99f 	bl	800a428 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80090ea:	2301      	movs	r3, #1
 80090ec:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80090ee:	f002 f963 	bl	800b3b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80090f2:	f000 fdcd 	bl	8009c90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80090f6:	f002 f92f 	bl	800b358 <vPortEnterCritical>
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009100:	b25b      	sxtb	r3, r3
 8009102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009106:	d103      	bne.n	8009110 <xQueueGenericSend+0x16c>
 8009108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910a:	2200      	movs	r2, #0
 800910c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009116:	b25b      	sxtb	r3, r3
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911c:	d103      	bne.n	8009126 <xQueueGenericSend+0x182>
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009126:	f002 f947 	bl	800b3b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800912a:	1d3a      	adds	r2, r7, #4
 800912c:	f107 0314 	add.w	r3, r7, #20
 8009130:	4611      	mov	r1, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f001 f98e 	bl	800a454 <xTaskCheckForTimeOut>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d124      	bne.n	8009188 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800913e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009140:	f000 fb1c 	bl	800977c <prvIsQueueFull>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d018      	beq.n	800917c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	3310      	adds	r3, #16
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	4611      	mov	r1, r2
 8009152:	4618      	mov	r0, r3
 8009154:	f001 f828 	bl	800a1a8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800915a:	f000 faa7 	bl	80096ac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800915e:	f000 fda5 	bl	8009cac <xTaskResumeAll>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	f47f af7c 	bne.w	8009062 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800916a:	4b0c      	ldr	r3, [pc, #48]	; (800919c <xQueueGenericSend+0x1f8>)
 800916c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	e772      	b.n	8009062 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800917c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800917e:	f000 fa95 	bl	80096ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009182:	f000 fd93 	bl	8009cac <xTaskResumeAll>
 8009186:	e76c      	b.n	8009062 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8009188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800918a:	f000 fa8f 	bl	80096ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800918e:	f000 fd8d 	bl	8009cac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8009192:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8009194:	4618      	mov	r0, r3
 8009196:	3738      	adds	r7, #56	; 0x38
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	e000ed04 	.word	0xe000ed04

080091a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08c      	sub	sp, #48	; 0x30
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80091ac:	2300      	movs	r3, #0
 80091ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10a      	bne.n	80091d0 <xQueueReceive+0x30>
        __asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	623b      	str	r3, [r7, #32]
    }
 80091cc:	bf00      	nop
 80091ce:	e7fe      	b.n	80091ce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d103      	bne.n	80091de <xQueueReceive+0x3e>
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <xQueueReceive+0x42>
 80091de:	2301      	movs	r3, #1
 80091e0:	e000      	b.n	80091e4 <xQueueReceive+0x44>
 80091e2:	2300      	movs	r3, #0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <xQueueReceive+0x5e>
        __asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	61fb      	str	r3, [r7, #28]
    }
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091fe:	f001 fa4d 	bl	800a69c <xTaskGetSchedulerState>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <xQueueReceive+0x6e>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <xQueueReceive+0x72>
 800920e:	2301      	movs	r3, #1
 8009210:	e000      	b.n	8009214 <xQueueReceive+0x74>
 8009212:	2300      	movs	r3, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <xQueueReceive+0x8e>
        __asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	61bb      	str	r3, [r7, #24]
    }
 800922a:	bf00      	nop
 800922c:	e7fe      	b.n	800922c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800922e:	f002 f893 	bl	800b358 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	2b00      	cmp	r3, #0
 800923c:	d01f      	beq.n	800927e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009242:	f000 fa0d 	bl	8009660 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	1e5a      	subs	r2, r3, #1
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00f      	beq.n	8009276 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	3310      	adds	r3, #16
 800925a:	4618      	mov	r0, r3
 800925c:	f001 f80e 	bl	800a27c <xTaskRemoveFromEventList>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d007      	beq.n	8009276 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009266:	4b3d      	ldr	r3, [pc, #244]	; (800935c <xQueueReceive+0x1bc>)
 8009268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009276:	f002 f89f 	bl	800b3b8 <vPortExitCritical>
                return pdPASS;
 800927a:	2301      	movs	r3, #1
 800927c:	e069      	b.n	8009352 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d103      	bne.n	800928c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009284:	f002 f898 	bl	800b3b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8009288:	2300      	movs	r3, #0
 800928a:	e062      	b.n	8009352 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	2b00      	cmp	r3, #0
 8009290:	d106      	bne.n	80092a0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009292:	f107 0310 	add.w	r3, r7, #16
 8009296:	4618      	mov	r0, r3
 8009298:	f001 f8c6 	bl	800a428 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800929c:	2301      	movs	r3, #1
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80092a0:	f002 f88a 	bl	800b3b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80092a4:	f000 fcf4 	bl	8009c90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80092a8:	f002 f856 	bl	800b358 <vPortEnterCritical>
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092b2:	b25b      	sxtb	r3, r3
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d103      	bne.n	80092c2 <xQueueReceive+0x122>
 80092ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092c8:	b25b      	sxtb	r3, r3
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d103      	bne.n	80092d8 <xQueueReceive+0x138>
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092d8:	f002 f86e 	bl	800b3b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092dc:	1d3a      	adds	r2, r7, #4
 80092de:	f107 0310 	add.w	r3, r7, #16
 80092e2:	4611      	mov	r1, r2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f001 f8b5 	bl	800a454 <xTaskCheckForTimeOut>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d123      	bne.n	8009338 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092f2:	f000 fa2d 	bl	8009750 <prvIsQueueEmpty>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d017      	beq.n	800932c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	4611      	mov	r1, r2
 8009304:	4618      	mov	r0, r3
 8009306:	f000 ff4f 	bl	800a1a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800930a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800930c:	f000 f9ce 	bl	80096ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009310:	f000 fccc 	bl	8009cac <xTaskResumeAll>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d189      	bne.n	800922e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800931a:	4b10      	ldr	r3, [pc, #64]	; (800935c <xQueueReceive+0x1bc>)
 800931c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	e780      	b.n	800922e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800932c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800932e:	f000 f9bd 	bl	80096ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009332:	f000 fcbb 	bl	8009cac <xTaskResumeAll>
 8009336:	e77a      	b.n	800922e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800933a:	f000 f9b7 	bl	80096ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800933e:	f000 fcb5 	bl	8009cac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009344:	f000 fa04 	bl	8009750 <prvIsQueueEmpty>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	f43f af6f 	beq.w	800922e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8009350:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009352:	4618      	mov	r0, r3
 8009354:	3730      	adds	r7, #48	; 0x30
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	e000ed04 	.word	0xe000ed04

08009360 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08c      	sub	sp, #48	; 0x30
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800936a:	2300      	movs	r3, #0
 800936c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8009372:	2300      	movs	r3, #0
 8009374:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10a      	bne.n	8009392 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	61bb      	str	r3, [r7, #24]
    }
 800938e:	bf00      	nop
 8009390:	e7fe      	b.n	8009390 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	617b      	str	r3, [r7, #20]
    }
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093b0:	f001 f974 	bl	800a69c <xTaskGetSchedulerState>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d102      	bne.n	80093c0 <xQueueSemaphoreTake+0x60>
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <xQueueSemaphoreTake+0x64>
 80093c0:	2301      	movs	r3, #1
 80093c2:	e000      	b.n	80093c6 <xQueueSemaphoreTake+0x66>
 80093c4:	2300      	movs	r3, #0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	613b      	str	r3, [r7, #16]
    }
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80093e0:	f001 ffba 	bl	800b358 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d024      	beq.n	800943a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	1e5a      	subs	r2, r3, #1
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d104      	bne.n	800940a <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009400:	f001 fb64 	bl	800aacc <pvTaskIncrementMutexHeldCount>
 8009404:	4602      	mov	r2, r0
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00f      	beq.n	8009432 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	3310      	adds	r3, #16
 8009416:	4618      	mov	r0, r3
 8009418:	f000 ff30 	bl	800a27c <xTaskRemoveFromEventList>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d007      	beq.n	8009432 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009422:	4b4d      	ldr	r3, [pc, #308]	; (8009558 <xQueueSemaphoreTake+0x1f8>)
 8009424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009432:	f001 ffc1 	bl	800b3b8 <vPortExitCritical>
                return pdPASS;
 8009436:	2301      	movs	r3, #1
 8009438:	e089      	b.n	800954e <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009440:	f001 ffba 	bl	800b3b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8009444:	2300      	movs	r3, #0
 8009446:	e082      	b.n	800954e <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800944e:	f107 0308 	add.w	r3, r7, #8
 8009452:	4618      	mov	r0, r3
 8009454:	f000 ffe8 	bl	800a428 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009458:	2301      	movs	r3, #1
 800945a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800945c:	f001 ffac 	bl	800b3b8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009460:	f000 fc16 	bl	8009c90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009464:	f001 ff78 	bl	800b358 <vPortEnterCritical>
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800946e:	b25b      	sxtb	r3, r3
 8009470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009474:	d103      	bne.n	800947e <xQueueSemaphoreTake+0x11e>
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009484:	b25b      	sxtb	r3, r3
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948a:	d103      	bne.n	8009494 <xQueueSemaphoreTake+0x134>
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009494:	f001 ff90 	bl	800b3b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009498:	463a      	mov	r2, r7
 800949a:	f107 0308 	add.w	r3, r7, #8
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 ffd7 	bl	800a454 <xTaskCheckForTimeOut>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d132      	bne.n	8009512 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094ae:	f000 f94f 	bl	8009750 <prvIsQueueEmpty>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d026      	beq.n	8009506 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d109      	bne.n	80094d4 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 80094c0:	f001 ff4a 	bl	800b358 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f001 f905 	bl	800a6d8 <xTaskPriorityInherit>
 80094ce:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 80094d0:	f001 ff72 	bl	800b3b8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	3324      	adds	r3, #36	; 0x24
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	4611      	mov	r1, r2
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fe63 	bl	800a1a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80094e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094e4:	f000 f8e2 	bl	80096ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80094e8:	f000 fbe0 	bl	8009cac <xTaskResumeAll>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f47f af76 	bne.w	80093e0 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80094f4:	4b18      	ldr	r3, [pc, #96]	; (8009558 <xQueueSemaphoreTake+0x1f8>)
 80094f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	e76c      	b.n	80093e0 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009506:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009508:	f000 f8d0 	bl	80096ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800950c:	f000 fbce 	bl	8009cac <xTaskResumeAll>
 8009510:	e766      	b.n	80093e0 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009514:	f000 f8ca 	bl	80096ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009518:	f000 fbc8 	bl	8009cac <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800951c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800951e:	f000 f917 	bl	8009750 <prvIsQueueEmpty>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	f43f af5b 	beq.w	80093e0 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00d      	beq.n	800954c <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8009530:	f001 ff12 	bl	800b358 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009536:	f000 f811 	bl	800955c <prvGetDisinheritPriorityAfterTimeout>
 800953a:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	69f9      	ldr	r1, [r7, #28]
 8009542:	4618      	mov	r0, r3
 8009544:	f001 fa0a 	bl	800a95c <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8009548:	f001 ff36 	bl	800b3b8 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800954c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800954e:	4618      	mov	r0, r3
 8009550:	3730      	adds	r7, #48	; 0x30
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	2b00      	cmp	r3, #0
 800956a:	d006      	beq.n	800957a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f1c3 0305 	rsb	r3, r3, #5
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	e001      	b.n	800957e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800957e:	68fb      	ldr	r3, [r7, #12]
    }
 8009580:	4618      	mov	r0, r3
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009598:	2300      	movs	r3, #0
 800959a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10d      	bne.n	80095c6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d14d      	bne.n	800964e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 f92c 	bl	800a814 <xTaskPriorityDisinherit>
 80095bc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	609a      	str	r2, [r3, #8]
 80095c4:	e043      	b.n	800964e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d119      	bne.n	8009600 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6858      	ldr	r0, [r3, #4]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d4:	461a      	mov	r2, r3
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	f002 fc5e 	bl	800be98 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e4:	441a      	add	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d32b      	bcc.n	800964e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	605a      	str	r2, [r3, #4]
 80095fe:	e026      	b.n	800964e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	68d8      	ldr	r0, [r3, #12]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009608:	461a      	mov	r2, r3
 800960a:	68b9      	ldr	r1, [r7, #8]
 800960c:	f002 fc44 	bl	800be98 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	68da      	ldr	r2, [r3, #12]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009618:	425b      	negs	r3, r3
 800961a:	441a      	add	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	68da      	ldr	r2, [r3, #12]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d207      	bcs.n	800963c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009634:	425b      	negs	r3, r3
 8009636:	441a      	add	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b02      	cmp	r3, #2
 8009640:	d105      	bne.n	800964e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	3b01      	subs	r3, #1
 800964c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8009656:	697b      	ldr	r3, [r7, #20]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d018      	beq.n	80096a4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68da      	ldr	r2, [r3, #12]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	441a      	add	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	68da      	ldr	r2, [r3, #12]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	429a      	cmp	r2, r3
 800968a:	d303      	bcc.n	8009694 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68d9      	ldr	r1, [r3, #12]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969c:	461a      	mov	r2, r3
 800969e:	6838      	ldr	r0, [r7, #0]
 80096a0:	f002 fbfa 	bl	800be98 <memcpy>
    }
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80096b4:	f001 fe50 	bl	800b358 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096be:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80096c0:	e011      	b.n	80096e6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d012      	beq.n	80096f0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	3324      	adds	r3, #36	; 0x24
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 fdd4 	bl	800a27c <xTaskRemoveFromEventList>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80096da:	f000 ff21 	bl	800a520 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80096e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	dce9      	bgt.n	80096c2 <prvUnlockQueue+0x16>
 80096ee:	e000      	b.n	80096f2 <prvUnlockQueue+0x46>
                    break;
 80096f0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	22ff      	movs	r2, #255	; 0xff
 80096f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80096fa:	f001 fe5d 	bl	800b3b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80096fe:	f001 fe2b 	bl	800b358 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009708:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800970a:	e011      	b.n	8009730 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d012      	beq.n	800973a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3310      	adds	r3, #16
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fdaf 	bl	800a27c <xTaskRemoveFromEventList>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009724:	f000 fefc 	bl	800a520 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	3b01      	subs	r3, #1
 800972c:	b2db      	uxtb	r3, r3
 800972e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009734:	2b00      	cmp	r3, #0
 8009736:	dce9      	bgt.n	800970c <prvUnlockQueue+0x60>
 8009738:	e000      	b.n	800973c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800973a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	22ff      	movs	r2, #255	; 0xff
 8009740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8009744:	f001 fe38 	bl	800b3b8 <vPortExitCritical>
}
 8009748:	bf00      	nop
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009758:	f001 fdfe 	bl	800b358 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009764:	2301      	movs	r3, #1
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	e001      	b.n	800976e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800976a:	2300      	movs	r3, #0
 800976c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800976e:	f001 fe23 	bl	800b3b8 <vPortExitCritical>

    return xReturn;
 8009772:	68fb      	ldr	r3, [r7, #12]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009784:	f001 fde8 	bl	800b358 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009790:	429a      	cmp	r2, r3
 8009792:	d102      	bne.n	800979a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009794:	2301      	movs	r3, #1
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	e001      	b.n	800979e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800979e:	f001 fe0b 	bl	800b3b8 <vPortExitCritical>

    return xReturn;
 80097a2:	68fb      	ldr	r3, [r7, #12]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10a      	bne.n	80097d6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	60fb      	str	r3, [r7, #12]
    }
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d024      	beq.n	8009826 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097dc:	2300      	movs	r3, #0
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	e01e      	b.n	8009820 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80097e2:	4a18      	ldr	r2, [pc, #96]	; (8009844 <vQueueAddToRegistry+0x98>)
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	4413      	add	r3, r2
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d105      	bne.n	80097fe <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	4a13      	ldr	r2, [pc, #76]	; (8009844 <vQueueAddToRegistry+0x98>)
 80097f8:	4413      	add	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]
                    break;
 80097fc:	e013      	b.n	8009826 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10a      	bne.n	800981a <vQueueAddToRegistry+0x6e>
 8009804:	4a0f      	ldr	r2, [pc, #60]	; (8009844 <vQueueAddToRegistry+0x98>)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d104      	bne.n	800981a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	4a0b      	ldr	r2, [pc, #44]	; (8009844 <vQueueAddToRegistry+0x98>)
 8009816:	4413      	add	r3, r2
 8009818:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	3301      	adds	r3, #1
 800981e:	617b      	str	r3, [r7, #20]
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2b07      	cmp	r3, #7
 8009824:	d9dd      	bls.n	80097e2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d005      	beq.n	8009838 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8009838:	bf00      	nop
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	20000920 	.word	0x20000920

08009848 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009858:	f001 fd7e 	bl	800b358 <vPortEnterCritical>
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009862:	b25b      	sxtb	r3, r3
 8009864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009868:	d103      	bne.n	8009872 <vQueueWaitForMessageRestricted+0x2a>
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009878:	b25b      	sxtb	r3, r3
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987e:	d103      	bne.n	8009888 <vQueueWaitForMessageRestricted+0x40>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009888:	f001 fd96 	bl	800b3b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	3324      	adds	r3, #36	; 0x24
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	68b9      	ldr	r1, [r7, #8]
 800989c:	4618      	mov	r0, r3
 800989e:	f000 fca7 	bl	800a1f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80098a2:	6978      	ldr	r0, [r7, #20]
 80098a4:	f7ff ff02 	bl	80096ac <prvUnlockQueue>
    }
 80098a8:	bf00      	nop
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08c      	sub	sp, #48	; 0x30
 80098b4:	af04      	add	r7, sp, #16
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	4613      	mov	r3, r2
 80098be:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80098c0:	88fb      	ldrh	r3, [r7, #6]
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f001 fe29 	bl	800b51c <pvPortMalloc>
 80098ca:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d013      	beq.n	80098fa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098d2:	2058      	movs	r0, #88	; 0x58
 80098d4:	f001 fe22 	bl	800b51c <pvPortMalloc>
 80098d8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d008      	beq.n	80098f2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80098e0:	2258      	movs	r2, #88	; 0x58
 80098e2:	2100      	movs	r1, #0
 80098e4:	69f8      	ldr	r0, [r7, #28]
 80098e6:	f002 fa20 	bl	800bd2a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	631a      	str	r2, [r3, #48]	; 0x30
 80098f0:	e005      	b.n	80098fe <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80098f2:	6978      	ldr	r0, [r7, #20]
 80098f4:	f001 fecc 	bl	800b690 <vPortFree>
 80098f8:	e001      	b.n	80098fe <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d013      	beq.n	800992c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009904:	88fa      	ldrh	r2, [r7, #6]
 8009906:	2300      	movs	r3, #0
 8009908:	9303      	str	r3, [sp, #12]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	9302      	str	r3, [sp, #8]
 800990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	68b9      	ldr	r1, [r7, #8]
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 f80e 	bl	800993c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009920:	69f8      	ldr	r0, [r7, #28]
 8009922:	f000 f899 	bl	8009a58 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009926:	2301      	movs	r3, #1
 8009928:	61bb      	str	r3, [r7, #24]
 800992a:	e002      	b.n	8009932 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800992c:	f04f 33ff 	mov.w	r3, #4294967295
 8009930:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009932:	69bb      	ldr	r3, [r7, #24]
    }
 8009934:	4618      	mov	r0, r3
 8009936:	3720      	adds	r7, #32
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	461a      	mov	r2, r3
 8009954:	21a5      	movs	r1, #165	; 0xa5
 8009956:	f002 f9e8 	bl	800bd2a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009964:	3b01      	subs	r3, #1
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	f023 0307 	bic.w	r3, r3, #7
 8009972:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <prvInitialiseNewTask+0x58>
        __asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	617b      	str	r3, [r7, #20]
    }
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d01e      	beq.n	80099d8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800999a:	2300      	movs	r3, #0
 800999c:	61fb      	str	r3, [r7, #28]
 800999e:	e012      	b.n	80099c6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	4413      	add	r3, r2
 80099a6:	7819      	ldrb	r1, [r3, #0]
 80099a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	4413      	add	r3, r2
 80099ae:	3334      	adds	r3, #52	; 0x34
 80099b0:	460a      	mov	r2, r1
 80099b2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	4413      	add	r3, r2
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d006      	beq.n	80099ce <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	3301      	adds	r3, #1
 80099c4:	61fb      	str	r3, [r7, #28]
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	2b09      	cmp	r3, #9
 80099ca:	d9e9      	bls.n	80099a0 <prvInitialiseNewTask+0x64>
 80099cc:	e000      	b.n	80099d0 <prvInitialiseNewTask+0x94>
            {
                break;
 80099ce:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	2b04      	cmp	r3, #4
 80099dc:	d90a      	bls.n	80099f4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	613b      	str	r3, [r7, #16]
    }
 80099f0:	bf00      	nop
 80099f2:	e7fe      	b.n	80099f2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	2b04      	cmp	r3, #4
 80099f8:	d901      	bls.n	80099fe <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099fa:	2304      	movs	r3, #4
 80099fc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a02:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a08:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7ff f8f6 	bl	8008c00 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	3318      	adds	r3, #24
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff f8f1 	bl	8008c00 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a22:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	f1c3 0205 	rsb	r2, r3, #5
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a32:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	68f9      	ldr	r1, [r7, #12]
 8009a38:	69b8      	ldr	r0, [r7, #24]
 8009a3a:	f001 fb5f 	bl	800b0fc <pxPortInitialiseStack>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a4e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009a50:	bf00      	nop
 8009a52:	3720      	adds	r7, #32
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009a60:	f001 fc7a 	bl	800b358 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009a64:	4b40      	ldr	r3, [pc, #256]	; (8009b68 <prvAddNewTaskToReadyList+0x110>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	4a3f      	ldr	r2, [pc, #252]	; (8009b68 <prvAddNewTaskToReadyList+0x110>)
 8009a6c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009a6e:	4b3f      	ldr	r3, [pc, #252]	; (8009b6c <prvAddNewTaskToReadyList+0x114>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d109      	bne.n	8009a8a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009a76:	4a3d      	ldr	r2, [pc, #244]	; (8009b6c <prvAddNewTaskToReadyList+0x114>)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a7c:	4b3a      	ldr	r3, [pc, #232]	; (8009b68 <prvAddNewTaskToReadyList+0x110>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d110      	bne.n	8009aa6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009a84:	f000 fd70 	bl	800a568 <prvInitialiseTaskLists>
 8009a88:	e00d      	b.n	8009aa6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009a8a:	4b39      	ldr	r3, [pc, #228]	; (8009b70 <prvAddNewTaskToReadyList+0x118>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d109      	bne.n	8009aa6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a92:	4b36      	ldr	r3, [pc, #216]	; (8009b6c <prvAddNewTaskToReadyList+0x114>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d802      	bhi.n	8009aa6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009aa0:	4a32      	ldr	r2, [pc, #200]	; (8009b6c <prvAddNewTaskToReadyList+0x114>)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009aa6:	4b33      	ldr	r3, [pc, #204]	; (8009b74 <prvAddNewTaskToReadyList+0x11c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	4a31      	ldr	r2, [pc, #196]	; (8009b74 <prvAddNewTaskToReadyList+0x11c>)
 8009aae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ab0:	4b30      	ldr	r3, [pc, #192]	; (8009b74 <prvAddNewTaskToReadyList+0x11c>)
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	2201      	movs	r2, #1
 8009abe:	409a      	lsls	r2, r3
 8009ac0:	4b2d      	ldr	r3, [pc, #180]	; (8009b78 <prvAddNewTaskToReadyList+0x120>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	4a2c      	ldr	r2, [pc, #176]	; (8009b78 <prvAddNewTaskToReadyList+0x120>)
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ace:	492b      	ldr	r1, [pc, #172]	; (8009b7c <prvAddNewTaskToReadyList+0x124>)
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	440b      	add	r3, r1
 8009ada:	3304      	adds	r3, #4
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	609a      	str	r2, [r3, #8]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	60da      	str	r2, [r3, #12]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	3204      	adds	r2, #4
 8009af6:	605a      	str	r2, [r3, #4]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	1d1a      	adds	r2, r3, #4
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	609a      	str	r2, [r3, #8]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b04:	4613      	mov	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4a1b      	ldr	r2, [pc, #108]	; (8009b7c <prvAddNewTaskToReadyList+0x124>)
 8009b0e:	441a      	add	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	615a      	str	r2, [r3, #20]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b18:	4918      	ldr	r1, [pc, #96]	; (8009b7c <prvAddNewTaskToReadyList+0x124>)
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	440b      	add	r3, r1
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	1c59      	adds	r1, r3, #1
 8009b28:	4814      	ldr	r0, [pc, #80]	; (8009b7c <prvAddNewTaskToReadyList+0x124>)
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4403      	add	r3, r0
 8009b34:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009b36:	f001 fc3f 	bl	800b3b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	; (8009b70 <prvAddNewTaskToReadyList+0x118>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00e      	beq.n	8009b60 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b42:	4b0a      	ldr	r3, [pc, #40]	; (8009b6c <prvAddNewTaskToReadyList+0x114>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d207      	bcs.n	8009b60 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009b50:	4b0b      	ldr	r3, [pc, #44]	; (8009b80 <prvAddNewTaskToReadyList+0x128>)
 8009b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20000a38 	.word	0x20000a38
 8009b6c:	20000960 	.word	0x20000960
 8009b70:	20000a44 	.word	0x20000a44
 8009b74:	20000a54 	.word	0x20000a54
 8009b78:	20000a40 	.word	0x20000a40
 8009b7c:	20000964 	.word	0x20000964
 8009b80:	e000ed04 	.word	0xe000ed04

08009b84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d017      	beq.n	8009bc6 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8009b96:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <vTaskDelay+0x60>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00a      	beq.n	8009bb4 <vTaskDelay+0x30>
        __asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	60bb      	str	r3, [r7, #8]
    }
 8009bb0:	bf00      	nop
 8009bb2:	e7fe      	b.n	8009bb2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009bb4:	f000 f86c 	bl	8009c90 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009bb8:	2100      	movs	r1, #0
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 ff9a 	bl	800aaf4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009bc0:	f000 f874 	bl	8009cac <xTaskResumeAll>
 8009bc4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d107      	bne.n	8009bdc <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8009bcc:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <vTaskDelay+0x64>)
 8009bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009bdc:	bf00      	nop
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20000a60 	.word	0x20000a60
 8009be8:	e000ed04 	.word	0xe000ed04

08009bec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8009bf2:	4b20      	ldr	r3, [pc, #128]	; (8009c74 <vTaskStartScheduler+0x88>)
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	2282      	movs	r2, #130	; 0x82
 8009bfe:	491e      	ldr	r1, [pc, #120]	; (8009c78 <vTaskStartScheduler+0x8c>)
 8009c00:	481e      	ldr	r0, [pc, #120]	; (8009c7c <vTaskStartScheduler+0x90>)
 8009c02:	f7ff fe55 	bl	80098b0 <xTaskCreate>
 8009c06:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d102      	bne.n	8009c14 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8009c0e:	f000 fff1 	bl	800abf4 <xTimerCreateTimerTask>
 8009c12:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d116      	bne.n	8009c48 <vTaskStartScheduler+0x5c>
        __asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	60bb      	str	r3, [r7, #8]
    }
 8009c2c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8009c2e:	4b14      	ldr	r3, [pc, #80]	; (8009c80 <vTaskStartScheduler+0x94>)
 8009c30:	f04f 32ff 	mov.w	r2, #4294967295
 8009c34:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009c36:	4b13      	ldr	r3, [pc, #76]	; (8009c84 <vTaskStartScheduler+0x98>)
 8009c38:	2201      	movs	r2, #1
 8009c3a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c3c:	4b12      	ldr	r3, [pc, #72]	; (8009c88 <vTaskStartScheduler+0x9c>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8009c42:	f001 fae7 	bl	800b214 <xPortStartScheduler>
 8009c46:	e00e      	b.n	8009c66 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4e:	d10a      	bne.n	8009c66 <vTaskStartScheduler+0x7a>
        __asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	607b      	str	r3, [r7, #4]
    }
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009c66:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <vTaskStartScheduler+0xa0>)
 8009c68:	681b      	ldr	r3, [r3, #0]
}
 8009c6a:	bf00      	nop
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000a5c 	.word	0x20000a5c
 8009c78:	0800ce08 	.word	0x0800ce08
 8009c7c:	0800a539 	.word	0x0800a539
 8009c80:	20000a58 	.word	0x20000a58
 8009c84:	20000a44 	.word	0x20000a44
 8009c88:	20000a3c 	.word	0x20000a3c
 8009c8c:	2000002c 	.word	0x2000002c

08009c90 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009c94:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <vTaskSuspendAll+0x18>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	4a03      	ldr	r2, [pc, #12]	; (8009ca8 <vTaskSuspendAll+0x18>)
 8009c9c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009c9e:	bf00      	nop
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	20000a60 	.word	0x20000a60

08009cac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b088      	sub	sp, #32
 8009cb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009cba:	4b71      	ldr	r3, [pc, #452]	; (8009e80 <xTaskResumeAll+0x1d4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <xTaskResumeAll+0x2c>
        __asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	607b      	str	r3, [r7, #4]
    }
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009cd8:	f001 fb3e 	bl	800b358 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009cdc:	4b68      	ldr	r3, [pc, #416]	; (8009e80 <xTaskResumeAll+0x1d4>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	4a67      	ldr	r2, [pc, #412]	; (8009e80 <xTaskResumeAll+0x1d4>)
 8009ce4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ce6:	4b66      	ldr	r3, [pc, #408]	; (8009e80 <xTaskResumeAll+0x1d4>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f040 80c0 	bne.w	8009e70 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cf0:	4b64      	ldr	r3, [pc, #400]	; (8009e84 <xTaskResumeAll+0x1d8>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 80bb 	beq.w	8009e70 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cfa:	e08a      	b.n	8009e12 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfc:	4b62      	ldr	r3, [pc, #392]	; (8009e88 <xTaskResumeAll+0x1dc>)
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d08:	613b      	str	r3, [r7, #16]
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	69fa      	ldr	r2, [r7, #28]
 8009d10:	6a12      	ldr	r2, [r2, #32]
 8009d12:	609a      	str	r2, [r3, #8]
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	6a1b      	ldr	r3, [r3, #32]
 8009d18:	69fa      	ldr	r2, [r7, #28]
 8009d1a:	69d2      	ldr	r2, [r2, #28]
 8009d1c:	605a      	str	r2, [r3, #4]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	3318      	adds	r3, #24
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d103      	bne.n	8009d32 <xTaskResumeAll+0x86>
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	6a1a      	ldr	r2, [r3, #32]
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	605a      	str	r2, [r3, #4]
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	2200      	movs	r2, #0
 8009d36:	629a      	str	r2, [r3, #40]	; 0x28
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	1e5a      	subs	r2, r3, #1
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	69fa      	ldr	r2, [r7, #28]
 8009d4e:	68d2      	ldr	r2, [r2, #12]
 8009d50:	609a      	str	r2, [r3, #8]
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	6892      	ldr	r2, [r2, #8]
 8009d5a:	605a      	str	r2, [r3, #4]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	3304      	adds	r3, #4
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d103      	bne.n	8009d70 <xTaskResumeAll+0xc4>
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	605a      	str	r2, [r3, #4]
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	2200      	movs	r2, #0
 8009d74:	615a      	str	r2, [r3, #20]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	1e5a      	subs	r2, r3, #1
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d84:	2201      	movs	r2, #1
 8009d86:	409a      	lsls	r2, r3
 8009d88:	4b40      	ldr	r3, [pc, #256]	; (8009e8c <xTaskResumeAll+0x1e0>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	4a3f      	ldr	r2, [pc, #252]	; (8009e8c <xTaskResumeAll+0x1e0>)
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d96:	493e      	ldr	r1, [pc, #248]	; (8009e90 <xTaskResumeAll+0x1e4>)
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	440b      	add	r3, r1
 8009da2:	3304      	adds	r3, #4
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60bb      	str	r3, [r7, #8]
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	609a      	str	r2, [r3, #8]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	689a      	ldr	r2, [r3, #8]
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	60da      	str	r2, [r3, #12]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	3204      	adds	r2, #4
 8009dbe:	605a      	str	r2, [r3, #4]
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	1d1a      	adds	r2, r3, #4
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	609a      	str	r2, [r3, #8]
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4a2e      	ldr	r2, [pc, #184]	; (8009e90 <xTaskResumeAll+0x1e4>)
 8009dd6:	441a      	add	r2, r3
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	615a      	str	r2, [r3, #20]
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de0:	492b      	ldr	r1, [pc, #172]	; (8009e90 <xTaskResumeAll+0x1e4>)
 8009de2:	4613      	mov	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	440b      	add	r3, r1
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	1c59      	adds	r1, r3, #1
 8009df0:	4827      	ldr	r0, [pc, #156]	; (8009e90 <xTaskResumeAll+0x1e4>)
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4403      	add	r3, r0
 8009dfc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e02:	4b24      	ldr	r3, [pc, #144]	; (8009e94 <xTaskResumeAll+0x1e8>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d302      	bcc.n	8009e12 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8009e0c:	4b22      	ldr	r3, [pc, #136]	; (8009e98 <xTaskResumeAll+0x1ec>)
 8009e0e:	2201      	movs	r2, #1
 8009e10:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e12:	4b1d      	ldr	r3, [pc, #116]	; (8009e88 <xTaskResumeAll+0x1dc>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f47f af70 	bne.w	8009cfc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009e22:	f000 fc1f 	bl	800a664 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e26:	4b1d      	ldr	r3, [pc, #116]	; (8009e9c <xTaskResumeAll+0x1f0>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d010      	beq.n	8009e54 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009e32:	f000 f847 	bl	8009ec4 <xTaskIncrementTick>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8009e3c:	4b16      	ldr	r3, [pc, #88]	; (8009e98 <xTaskResumeAll+0x1ec>)
 8009e3e:	2201      	movs	r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1f1      	bne.n	8009e32 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8009e4e:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <xTaskResumeAll+0x1f0>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009e54:	4b10      	ldr	r3, [pc, #64]	; (8009e98 <xTaskResumeAll+0x1ec>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d009      	beq.n	8009e70 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009e60:	4b0f      	ldr	r3, [pc, #60]	; (8009ea0 <xTaskResumeAll+0x1f4>)
 8009e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009e70:	f001 faa2 	bl	800b3b8 <vPortExitCritical>

    return xAlreadyYielded;
 8009e74:	69bb      	ldr	r3, [r7, #24]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000a60 	.word	0x20000a60
 8009e84:	20000a38 	.word	0x20000a38
 8009e88:	200009f8 	.word	0x200009f8
 8009e8c:	20000a40 	.word	0x20000a40
 8009e90:	20000964 	.word	0x20000964
 8009e94:	20000960 	.word	0x20000960
 8009e98:	20000a4c 	.word	0x20000a4c
 8009e9c:	20000a48 	.word	0x20000a48
 8009ea0:	e000ed04 	.word	0xe000ed04

08009ea4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <xTaskGetTickCount+0x1c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009eb0:	687b      	ldr	r3, [r7, #4]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	20000a3c 	.word	0x20000a3c

08009ec4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	; 0x28
 8009ec8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ece:	4b7d      	ldr	r3, [pc, #500]	; (800a0c4 <xTaskIncrementTick+0x200>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f040 80ec 	bne.w	800a0b0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ed8:	4b7b      	ldr	r3, [pc, #492]	; (800a0c8 <xTaskIncrementTick+0x204>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3301      	adds	r3, #1
 8009ede:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009ee0:	4a79      	ldr	r2, [pc, #484]	; (800a0c8 <xTaskIncrementTick+0x204>)
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d120      	bne.n	8009f2e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8009eec:	4b77      	ldr	r3, [pc, #476]	; (800a0cc <xTaskIncrementTick+0x208>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <xTaskIncrementTick+0x48>
        __asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	607b      	str	r3, [r7, #4]
    }
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <xTaskIncrementTick+0x46>
 8009f0c:	4b6f      	ldr	r3, [pc, #444]	; (800a0cc <xTaskIncrementTick+0x208>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	61fb      	str	r3, [r7, #28]
 8009f12:	4b6f      	ldr	r3, [pc, #444]	; (800a0d0 <xTaskIncrementTick+0x20c>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a6d      	ldr	r2, [pc, #436]	; (800a0cc <xTaskIncrementTick+0x208>)
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	4a6d      	ldr	r2, [pc, #436]	; (800a0d0 <xTaskIncrementTick+0x20c>)
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	4b6c      	ldr	r3, [pc, #432]	; (800a0d4 <xTaskIncrementTick+0x210>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3301      	adds	r3, #1
 8009f26:	4a6b      	ldr	r2, [pc, #428]	; (800a0d4 <xTaskIncrementTick+0x210>)
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	f000 fb9b 	bl	800a664 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009f2e:	4b6a      	ldr	r3, [pc, #424]	; (800a0d8 <xTaskIncrementTick+0x214>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6a3a      	ldr	r2, [r7, #32]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	f0c0 80a6 	bcc.w	800a086 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f3a:	4b64      	ldr	r3, [pc, #400]	; (800a0cc <xTaskIncrementTick+0x208>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d104      	bne.n	8009f4e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f44:	4b64      	ldr	r3, [pc, #400]	; (800a0d8 <xTaskIncrementTick+0x214>)
 8009f46:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4a:	601a      	str	r2, [r3, #0]
                    break;
 8009f4c:	e09b      	b.n	800a086 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f4e:	4b5f      	ldr	r3, [pc, #380]	; (800a0cc <xTaskIncrementTick+0x208>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8009f5e:	6a3a      	ldr	r2, [r7, #32]
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d203      	bcs.n	8009f6e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009f66:	4a5c      	ldr	r2, [pc, #368]	; (800a0d8 <xTaskIncrementTick+0x214>)
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009f6c:	e08b      	b.n	800a086 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	68d2      	ldr	r2, [r2, #12]
 8009f7c:	609a      	str	r2, [r3, #8]
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	6892      	ldr	r2, [r2, #8]
 8009f86:	605a      	str	r2, [r3, #4]
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d103      	bne.n	8009f9c <xTaskIncrementTick+0xd8>
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	68da      	ldr	r2, [r3, #12]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	605a      	str	r2, [r3, #4]
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	615a      	str	r2, [r3, #20]
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	1e5a      	subs	r2, r3, #1
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d01e      	beq.n	8009ff2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	69ba      	ldr	r2, [r7, #24]
 8009fc0:	6a12      	ldr	r2, [r2, #32]
 8009fc2:	609a      	str	r2, [r3, #8]
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	69ba      	ldr	r2, [r7, #24]
 8009fca:	69d2      	ldr	r2, [r2, #28]
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	3318      	adds	r3, #24
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d103      	bne.n	8009fe2 <xTaskIncrementTick+0x11e>
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	6a1a      	ldr	r2, [r3, #32]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	605a      	str	r2, [r3, #4]
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	1e5a      	subs	r2, r3, #1
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	409a      	lsls	r2, r3
 8009ffa:	4b38      	ldr	r3, [pc, #224]	; (800a0dc <xTaskIncrementTick+0x218>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	4a36      	ldr	r2, [pc, #216]	; (800a0dc <xTaskIncrementTick+0x218>)
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a008:	4935      	ldr	r1, [pc, #212]	; (800a0e0 <xTaskIncrementTick+0x21c>)
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	440b      	add	r3, r1
 800a014:	3304      	adds	r3, #4
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	60bb      	str	r3, [r7, #8]
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	609a      	str	r2, [r3, #8]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	689a      	ldr	r2, [r3, #8]
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	60da      	str	r2, [r3, #12]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	3204      	adds	r2, #4
 800a030:	605a      	str	r2, [r3, #4]
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	1d1a      	adds	r2, r3, #4
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	609a      	str	r2, [r3, #8]
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4a26      	ldr	r2, [pc, #152]	; (800a0e0 <xTaskIncrementTick+0x21c>)
 800a048:	441a      	add	r2, r3
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	615a      	str	r2, [r3, #20]
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a052:	4923      	ldr	r1, [pc, #140]	; (800a0e0 <xTaskIncrementTick+0x21c>)
 800a054:	4613      	mov	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	440b      	add	r3, r1
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	1c59      	adds	r1, r3, #1
 800a062:	481f      	ldr	r0, [pc, #124]	; (800a0e0 <xTaskIncrementTick+0x21c>)
 800a064:	4613      	mov	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4403      	add	r3, r0
 800a06e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a074:	4b1b      	ldr	r3, [pc, #108]	; (800a0e4 <xTaskIncrementTick+0x220>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	429a      	cmp	r2, r3
 800a07c:	f67f af5d 	bls.w	8009f3a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800a080:	2301      	movs	r3, #1
 800a082:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a084:	e759      	b.n	8009f3a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a086:	4b17      	ldr	r3, [pc, #92]	; (800a0e4 <xTaskIncrementTick+0x220>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08c:	4914      	ldr	r1, [pc, #80]	; (800a0e0 <xTaskIncrementTick+0x21c>)
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	440b      	add	r3, r1
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d901      	bls.n	800a0a2 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800a0a2:	4b11      	ldr	r3, [pc, #68]	; (800a0e8 <xTaskIncrementTick+0x224>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d007      	beq.n	800a0ba <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ae:	e004      	b.n	800a0ba <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a0b0:	4b0e      	ldr	r3, [pc, #56]	; (800a0ec <xTaskIncrementTick+0x228>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	4a0d      	ldr	r2, [pc, #52]	; (800a0ec <xTaskIncrementTick+0x228>)
 800a0b8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3728      	adds	r7, #40	; 0x28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	20000a60 	.word	0x20000a60
 800a0c8:	20000a3c 	.word	0x20000a3c
 800a0cc:	200009f0 	.word	0x200009f0
 800a0d0:	200009f4 	.word	0x200009f4
 800a0d4:	20000a50 	.word	0x20000a50
 800a0d8:	20000a58 	.word	0x20000a58
 800a0dc:	20000a40 	.word	0x20000a40
 800a0e0:	20000964 	.word	0x20000964
 800a0e4:	20000960 	.word	0x20000960
 800a0e8:	20000a4c 	.word	0x20000a4c
 800a0ec:	20000a48 	.word	0x20000a48

0800a0f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0f6:	4b27      	ldr	r3, [pc, #156]	; (800a194 <vTaskSwitchContext+0xa4>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a0fe:	4b26      	ldr	r3, [pc, #152]	; (800a198 <vTaskSwitchContext+0xa8>)
 800a100:	2201      	movs	r2, #1
 800a102:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800a104:	e03f      	b.n	800a186 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800a106:	4b24      	ldr	r3, [pc, #144]	; (800a198 <vTaskSwitchContext+0xa8>)
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a10c:	4b23      	ldr	r3, [pc, #140]	; (800a19c <vTaskSwitchContext+0xac>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	fab3 f383 	clz	r3, r3
 800a118:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a11a:	7afb      	ldrb	r3, [r7, #11]
 800a11c:	f1c3 031f 	rsb	r3, r3, #31
 800a120:	617b      	str	r3, [r7, #20]
 800a122:	491f      	ldr	r1, [pc, #124]	; (800a1a0 <vTaskSwitchContext+0xb0>)
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	4613      	mov	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	440b      	add	r3, r1
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10a      	bne.n	800a14c <vTaskSwitchContext+0x5c>
        __asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	607b      	str	r3, [r7, #4]
    }
 800a148:	bf00      	nop
 800a14a:	e7fe      	b.n	800a14a <vTaskSwitchContext+0x5a>
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	4613      	mov	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4a12      	ldr	r2, [pc, #72]	; (800a1a0 <vTaskSwitchContext+0xb0>)
 800a158:	4413      	add	r3, r2
 800a15a:	613b      	str	r3, [r7, #16]
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	605a      	str	r2, [r3, #4]
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	3308      	adds	r3, #8
 800a16e:	429a      	cmp	r2, r3
 800a170:	d104      	bne.n	800a17c <vTaskSwitchContext+0x8c>
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	605a      	str	r2, [r3, #4]
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	4a08      	ldr	r2, [pc, #32]	; (800a1a4 <vTaskSwitchContext+0xb4>)
 800a184:	6013      	str	r3, [r2, #0]
}
 800a186:	bf00      	nop
 800a188:	371c      	adds	r7, #28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	20000a60 	.word	0x20000a60
 800a198:	20000a4c 	.word	0x20000a4c
 800a19c:	20000a40 	.word	0x20000a40
 800a1a0:	20000964 	.word	0x20000964
 800a1a4:	20000960 	.word	0x20000960

0800a1a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10a      	bne.n	800a1ce <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	60fb      	str	r3, [r7, #12]
    }
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1ce:	4b07      	ldr	r3, [pc, #28]	; (800a1ec <vTaskPlaceOnEventList+0x44>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3318      	adds	r3, #24
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7fe fd1f 	bl	8008c1a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1dc:	2101      	movs	r1, #1
 800a1de:	6838      	ldr	r0, [r7, #0]
 800a1e0:	f000 fc88 	bl	800aaf4 <prvAddCurrentTaskToDelayedList>
}
 800a1e4:	bf00      	nop
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20000960 	.word	0x20000960

0800a1f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	613b      	str	r3, [r7, #16]
    }
 800a214:	bf00      	nop
 800a216:	e7fe      	b.n	800a216 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	617b      	str	r3, [r7, #20]
 800a21e:	4b16      	ldr	r3, [pc, #88]	; (800a278 <vTaskPlaceOnEventListRestricted+0x88>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	61da      	str	r2, [r3, #28]
 800a226:	4b14      	ldr	r3, [pc, #80]	; (800a278 <vTaskPlaceOnEventListRestricted+0x88>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	6892      	ldr	r2, [r2, #8]
 800a22e:	621a      	str	r2, [r3, #32]
 800a230:	4b11      	ldr	r3, [pc, #68]	; (800a278 <vTaskPlaceOnEventListRestricted+0x88>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	3218      	adds	r2, #24
 800a23a:	605a      	str	r2, [r3, #4]
 800a23c:	4b0e      	ldr	r3, [pc, #56]	; (800a278 <vTaskPlaceOnEventListRestricted+0x88>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f103 0218 	add.w	r2, r3, #24
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	609a      	str	r2, [r3, #8]
 800a248:	4b0b      	ldr	r3, [pc, #44]	; (800a278 <vTaskPlaceOnEventListRestricted+0x88>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	629a      	str	r2, [r3, #40]	; 0x28
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800a260:	f04f 33ff 	mov.w	r3, #4294967295
 800a264:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a266:	6879      	ldr	r1, [r7, #4]
 800a268:	68b8      	ldr	r0, [r7, #8]
 800a26a:	f000 fc43 	bl	800aaf4 <prvAddCurrentTaskToDelayedList>
    }
 800a26e:	bf00      	nop
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	20000960 	.word	0x20000960

0800a27c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a27c:	b480      	push	{r7}
 800a27e:	b08b      	sub	sp, #44	; 0x2c
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10a      	bne.n	800a2a8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	60fb      	str	r3, [r7, #12]
    }
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ac:	61fb      	str	r3, [r7, #28]
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	6a3a      	ldr	r2, [r7, #32]
 800a2b4:	6a12      	ldr	r2, [r2, #32]
 800a2b6:	609a      	str	r2, [r3, #8]
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	6a3a      	ldr	r2, [r7, #32]
 800a2be:	69d2      	ldr	r2, [r2, #28]
 800a2c0:	605a      	str	r2, [r3, #4]
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	3318      	adds	r3, #24
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d103      	bne.n	800a2d6 <xTaskRemoveFromEventList+0x5a>
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	6a1a      	ldr	r2, [r3, #32]
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	605a      	str	r2, [r3, #4]
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	629a      	str	r2, [r3, #40]	; 0x28
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	1e5a      	subs	r2, r3, #1
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2e6:	4b4a      	ldr	r3, [pc, #296]	; (800a410 <xTaskRemoveFromEventList+0x194>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d15e      	bne.n	800a3ac <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	6a3b      	ldr	r3, [r7, #32]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	6a3a      	ldr	r2, [r7, #32]
 800a2fa:	68d2      	ldr	r2, [r2, #12]
 800a2fc:	609a      	str	r2, [r3, #8]
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	6a3a      	ldr	r2, [r7, #32]
 800a304:	6892      	ldr	r2, [r2, #8]
 800a306:	605a      	str	r2, [r3, #4]
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	3304      	adds	r3, #4
 800a310:	429a      	cmp	r2, r3
 800a312:	d103      	bne.n	800a31c <xTaskRemoveFromEventList+0xa0>
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	68da      	ldr	r2, [r3, #12]
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	605a      	str	r2, [r3, #4]
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	2200      	movs	r2, #0
 800a320:	615a      	str	r2, [r3, #20]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	1e5a      	subs	r2, r3, #1
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	2201      	movs	r2, #1
 800a332:	409a      	lsls	r2, r3
 800a334:	4b37      	ldr	r3, [pc, #220]	; (800a414 <xTaskRemoveFromEventList+0x198>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4313      	orrs	r3, r2
 800a33a:	4a36      	ldr	r2, [pc, #216]	; (800a414 <xTaskRemoveFromEventList+0x198>)
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a342:	4935      	ldr	r1, [pc, #212]	; (800a418 <xTaskRemoveFromEventList+0x19c>)
 800a344:	4613      	mov	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	440b      	add	r3, r1
 800a34e:	3304      	adds	r3, #4
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	613b      	str	r3, [r7, #16]
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	609a      	str	r2, [r3, #8]
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	60da      	str	r2, [r3, #12]
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	6a3a      	ldr	r2, [r7, #32]
 800a368:	3204      	adds	r2, #4
 800a36a:	605a      	str	r2, [r3, #4]
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	1d1a      	adds	r2, r3, #4
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	609a      	str	r2, [r3, #8]
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4a25      	ldr	r2, [pc, #148]	; (800a418 <xTaskRemoveFromEventList+0x19c>)
 800a382:	441a      	add	r2, r3
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	615a      	str	r2, [r3, #20]
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38c:	4922      	ldr	r1, [pc, #136]	; (800a418 <xTaskRemoveFromEventList+0x19c>)
 800a38e:	4613      	mov	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	440b      	add	r3, r1
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	1c59      	adds	r1, r3, #1
 800a39c:	481e      	ldr	r0, [pc, #120]	; (800a418 <xTaskRemoveFromEventList+0x19c>)
 800a39e:	4613      	mov	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4403      	add	r3, r0
 800a3a8:	6019      	str	r1, [r3, #0]
 800a3aa:	e01b      	b.n	800a3e4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a3ac:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <xTaskRemoveFromEventList+0x1a0>)
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	61bb      	str	r3, [r7, #24]
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	61da      	str	r2, [r3, #28]
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	621a      	str	r2, [r3, #32]
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	6a3a      	ldr	r2, [r7, #32]
 800a3c6:	3218      	adds	r2, #24
 800a3c8:	605a      	str	r2, [r3, #4]
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	f103 0218 	add.w	r2, r3, #24
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	609a      	str	r2, [r3, #8]
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	4a11      	ldr	r2, [pc, #68]	; (800a41c <xTaskRemoveFromEventList+0x1a0>)
 800a3d8:	629a      	str	r2, [r3, #40]	; 0x28
 800a3da:	4b10      	ldr	r3, [pc, #64]	; (800a41c <xTaskRemoveFromEventList+0x1a0>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	4a0e      	ldr	r2, [pc, #56]	; (800a41c <xTaskRemoveFromEventList+0x1a0>)
 800a3e2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e8:	4b0d      	ldr	r3, [pc, #52]	; (800a420 <xTaskRemoveFromEventList+0x1a4>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d905      	bls.n	800a3fe <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a3f6:	4b0b      	ldr	r3, [pc, #44]	; (800a424 <xTaskRemoveFromEventList+0x1a8>)
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]
 800a3fc:	e001      	b.n	800a402 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800a3fe:	2300      	movs	r3, #0
 800a400:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a404:	4618      	mov	r0, r3
 800a406:	372c      	adds	r7, #44	; 0x2c
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	20000a60 	.word	0x20000a60
 800a414:	20000a40 	.word	0x20000a40
 800a418:	20000964 	.word	0x20000964
 800a41c:	200009f8 	.word	0x200009f8
 800a420:	20000960 	.word	0x20000960
 800a424:	20000a4c 	.word	0x20000a4c

0800a428 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a430:	4b06      	ldr	r3, [pc, #24]	; (800a44c <vTaskInternalSetTimeOutState+0x24>)
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <vTaskInternalSetTimeOutState+0x28>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	605a      	str	r2, [r3, #4]
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	20000a50 	.word	0x20000a50
 800a450:	20000a3c 	.word	0x20000a3c

0800a454 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	613b      	str	r3, [r7, #16]
    }
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60fb      	str	r3, [r7, #12]
    }
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800a496:	f000 ff5f 	bl	800b358 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a49a:	4b1f      	ldr	r3, [pc, #124]	; (800a518 <xTaskCheckForTimeOut+0xc4>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b2:	d102      	bne.n	800a4ba <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	61fb      	str	r3, [r7, #28]
 800a4b8:	e026      	b.n	800a508 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	4b17      	ldr	r3, [pc, #92]	; (800a51c <xTaskCheckForTimeOut+0xc8>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d00a      	beq.n	800a4dc <xTaskCheckForTimeOut+0x88>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	69ba      	ldr	r2, [r7, #24]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d305      	bcc.n	800a4dc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	e015      	b.n	800a508 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d20b      	bcs.n	800a4fe <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	1ad2      	subs	r2, r2, r3
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7ff ff98 	bl	800a428 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	61fb      	str	r3, [r7, #28]
 800a4fc:	e004      	b.n	800a508 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2200      	movs	r2, #0
 800a502:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a508:	f000 ff56 	bl	800b3b8 <vPortExitCritical>

    return xReturn;
 800a50c:	69fb      	ldr	r3, [r7, #28]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3720      	adds	r7, #32
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20000a3c 	.word	0x20000a3c
 800a51c:	20000a50 	.word	0x20000a50

0800a520 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a520:	b480      	push	{r7}
 800a522:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a524:	4b03      	ldr	r3, [pc, #12]	; (800a534 <vTaskMissedYield+0x14>)
 800a526:	2201      	movs	r2, #1
 800a528:	601a      	str	r2, [r3, #0]
}
 800a52a:	bf00      	nop
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20000a4c 	.word	0x20000a4c

0800a538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a540:	f000 f852 	bl	800a5e8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a544:	4b06      	ldr	r3, [pc, #24]	; (800a560 <prvIdleTask+0x28>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d9f9      	bls.n	800a540 <prvIdleTask+0x8>
            {
                taskYIELD();
 800a54c:	4b05      	ldr	r3, [pc, #20]	; (800a564 <prvIdleTask+0x2c>)
 800a54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800a55c:	e7f0      	b.n	800a540 <prvIdleTask+0x8>
 800a55e:	bf00      	nop
 800a560:	20000964 	.word	0x20000964
 800a564:	e000ed04 	.word	0xe000ed04

0800a568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a56e:	2300      	movs	r3, #0
 800a570:	607b      	str	r3, [r7, #4]
 800a572:	e00c      	b.n	800a58e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4a12      	ldr	r2, [pc, #72]	; (800a5c8 <prvInitialiseTaskLists+0x60>)
 800a580:	4413      	add	r3, r2
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe fb1c 	bl	8008bc0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3301      	adds	r3, #1
 800a58c:	607b      	str	r3, [r7, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b04      	cmp	r3, #4
 800a592:	d9ef      	bls.n	800a574 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a594:	480d      	ldr	r0, [pc, #52]	; (800a5cc <prvInitialiseTaskLists+0x64>)
 800a596:	f7fe fb13 	bl	8008bc0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a59a:	480d      	ldr	r0, [pc, #52]	; (800a5d0 <prvInitialiseTaskLists+0x68>)
 800a59c:	f7fe fb10 	bl	8008bc0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a5a0:	480c      	ldr	r0, [pc, #48]	; (800a5d4 <prvInitialiseTaskLists+0x6c>)
 800a5a2:	f7fe fb0d 	bl	8008bc0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800a5a6:	480c      	ldr	r0, [pc, #48]	; (800a5d8 <prvInitialiseTaskLists+0x70>)
 800a5a8:	f7fe fb0a 	bl	8008bc0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800a5ac:	480b      	ldr	r0, [pc, #44]	; (800a5dc <prvInitialiseTaskLists+0x74>)
 800a5ae:	f7fe fb07 	bl	8008bc0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a5b2:	4b0b      	ldr	r3, [pc, #44]	; (800a5e0 <prvInitialiseTaskLists+0x78>)
 800a5b4:	4a05      	ldr	r2, [pc, #20]	; (800a5cc <prvInitialiseTaskLists+0x64>)
 800a5b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <prvInitialiseTaskLists+0x7c>)
 800a5ba:	4a05      	ldr	r2, [pc, #20]	; (800a5d0 <prvInitialiseTaskLists+0x68>)
 800a5bc:	601a      	str	r2, [r3, #0]
}
 800a5be:	bf00      	nop
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20000964 	.word	0x20000964
 800a5cc:	200009c8 	.word	0x200009c8
 800a5d0:	200009dc 	.word	0x200009dc
 800a5d4:	200009f8 	.word	0x200009f8
 800a5d8:	20000a0c 	.word	0x20000a0c
 800a5dc:	20000a24 	.word	0x20000a24
 800a5e0:	200009f0 	.word	0x200009f0
 800a5e4:	200009f4 	.word	0x200009f4

0800a5e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5ee:	e019      	b.n	800a624 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800a5f0:	f000 feb2 	bl	800b358 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5f4:	4b10      	ldr	r3, [pc, #64]	; (800a638 <prvCheckTasksWaitingTermination+0x50>)
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	3304      	adds	r3, #4
 800a600:	4618      	mov	r0, r3
 800a602:	f7fe fb43 	bl	8008c8c <uxListRemove>
                --uxCurrentNumberOfTasks;
 800a606:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <prvCheckTasksWaitingTermination+0x54>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	4a0b      	ldr	r2, [pc, #44]	; (800a63c <prvCheckTasksWaitingTermination+0x54>)
 800a60e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800a610:	4b0b      	ldr	r3, [pc, #44]	; (800a640 <prvCheckTasksWaitingTermination+0x58>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3b01      	subs	r3, #1
 800a616:	4a0a      	ldr	r2, [pc, #40]	; (800a640 <prvCheckTasksWaitingTermination+0x58>)
 800a618:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800a61a:	f000 fecd 	bl	800b3b8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f810 	bl	800a644 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a624:	4b06      	ldr	r3, [pc, #24]	; (800a640 <prvCheckTasksWaitingTermination+0x58>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1e1      	bne.n	800a5f0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	20000a0c 	.word	0x20000a0c
 800a63c:	20000a38 	.word	0x20000a38
 800a640:	20000a20 	.word	0x20000a20

0800a644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a650:	4618      	mov	r0, r3
 800a652:	f001 f81d 	bl	800b690 <vPortFree>
            vPortFree( pxTCB );
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f001 f81a 	bl	800b690 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a664:	b480      	push	{r7}
 800a666:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <prvResetNextTaskUnblockTime+0x30>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a672:	4b09      	ldr	r3, [pc, #36]	; (800a698 <prvResetNextTaskUnblockTime+0x34>)
 800a674:	f04f 32ff 	mov.w	r2, #4294967295
 800a678:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a67a:	e005      	b.n	800a688 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a67c:	4b05      	ldr	r3, [pc, #20]	; (800a694 <prvResetNextTaskUnblockTime+0x30>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a04      	ldr	r2, [pc, #16]	; (800a698 <prvResetNextTaskUnblockTime+0x34>)
 800a686:	6013      	str	r3, [r2, #0]
}
 800a688:	bf00      	nop
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	200009f0 	.word	0x200009f0
 800a698:	20000a58 	.word	0x20000a58

0800a69c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a6a2:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <xTaskGetSchedulerState+0x34>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d102      	bne.n	800a6b0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	607b      	str	r3, [r7, #4]
 800a6ae:	e008      	b.n	800a6c2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6b0:	4b08      	ldr	r3, [pc, #32]	; (800a6d4 <xTaskGetSchedulerState+0x38>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d102      	bne.n	800a6be <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	607b      	str	r3, [r7, #4]
 800a6bc:	e001      	b.n	800a6c2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a6c2:	687b      	ldr	r3, [r7, #4]
    }
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	20000a44 	.word	0x20000a44
 800a6d4:	20000a60 	.word	0x20000a60

0800a6d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 8087 	beq.w	800a7fe <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f4:	4b44      	ldr	r3, [pc, #272]	; (800a808 <xTaskPriorityInherit+0x130>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d276      	bcs.n	800a7ec <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	db06      	blt.n	800a714 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a706:	4b40      	ldr	r3, [pc, #256]	; (800a808 <xTaskPriorityInherit+0x130>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	f1c3 0205 	rsb	r2, r3, #5
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	6959      	ldr	r1, [r3, #20]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4a39      	ldr	r2, [pc, #228]	; (800a80c <xTaskPriorityInherit+0x134>)
 800a726:	4413      	add	r3, r2
 800a728:	4299      	cmp	r1, r3
 800a72a:	d157      	bne.n	800a7dc <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	3304      	adds	r3, #4
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe faab 	bl	8008c8c <uxListRemove>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10a      	bne.n	800a752 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a740:	2201      	movs	r2, #1
 800a742:	fa02 f303 	lsl.w	r3, r2, r3
 800a746:	43da      	mvns	r2, r3
 800a748:	4b31      	ldr	r3, [pc, #196]	; (800a810 <xTaskPriorityInherit+0x138>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4013      	ands	r3, r2
 800a74e:	4a30      	ldr	r2, [pc, #192]	; (800a810 <xTaskPriorityInherit+0x138>)
 800a750:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a752:	4b2d      	ldr	r3, [pc, #180]	; (800a808 <xTaskPriorityInherit+0x130>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	2201      	movs	r2, #1
 800a762:	409a      	lsls	r2, r3
 800a764:	4b2a      	ldr	r3, [pc, #168]	; (800a810 <xTaskPriorityInherit+0x138>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4313      	orrs	r3, r2
 800a76a:	4a29      	ldr	r2, [pc, #164]	; (800a810 <xTaskPriorityInherit+0x138>)
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a772:	4926      	ldr	r1, [pc, #152]	; (800a80c <xTaskPriorityInherit+0x134>)
 800a774:	4613      	mov	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	440b      	add	r3, r1
 800a77e:	3304      	adds	r3, #4
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	609a      	str	r2, [r3, #8]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	689a      	ldr	r2, [r3, #8]
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	60da      	str	r2, [r3, #12]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	3204      	adds	r2, #4
 800a79a:	605a      	str	r2, [r3, #4]
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	1d1a      	adds	r2, r3, #4
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	609a      	str	r2, [r3, #8]
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4a16      	ldr	r2, [pc, #88]	; (800a80c <xTaskPriorityInherit+0x134>)
 800a7b2:	441a      	add	r2, r3
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	615a      	str	r2, [r3, #20]
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7bc:	4913      	ldr	r1, [pc, #76]	; (800a80c <xTaskPriorityInherit+0x134>)
 800a7be:	4613      	mov	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	440b      	add	r3, r1
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	1c59      	adds	r1, r3, #1
 800a7cc:	480f      	ldr	r0, [pc, #60]	; (800a80c <xTaskPriorityInherit+0x134>)
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	4403      	add	r3, r0
 800a7d8:	6019      	str	r1, [r3, #0]
 800a7da:	e004      	b.n	800a7e6 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a7dc:	4b0a      	ldr	r3, [pc, #40]	; (800a808 <xTaskPriorityInherit+0x130>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	617b      	str	r3, [r7, #20]
 800a7ea:	e008      	b.n	800a7fe <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7f0:	4b05      	ldr	r3, [pc, #20]	; (800a808 <xTaskPriorityInherit+0x130>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d201      	bcs.n	800a7fe <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a7fe:	697b      	ldr	r3, [r7, #20]
    }
 800a800:	4618      	mov	r0, r3
 800a802:	3718      	adds	r7, #24
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	20000960 	.word	0x20000960
 800a80c:	20000964 	.word	0x20000964
 800a810:	20000a40 	.word	0x20000a40

0800a814 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800a820:	2300      	movs	r3, #0
 800a822:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	f000 808c 	beq.w	800a944 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a82c:	4b48      	ldr	r3, [pc, #288]	; (800a950 <xTaskPriorityDisinherit+0x13c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	429a      	cmp	r2, r3
 800a834:	d00a      	beq.n	800a84c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	613b      	str	r3, [r7, #16]
    }
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10a      	bne.n	800a86a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	60fb      	str	r3, [r7, #12]
    }
 800a866:	bf00      	nop
 800a868:	e7fe      	b.n	800a868 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a86e:	1e5a      	subs	r2, r3, #1
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d061      	beq.n	800a944 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a884:	2b00      	cmp	r3, #0
 800a886:	d15d      	bne.n	800a944 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	3304      	adds	r3, #4
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fe f9fd 	bl	8008c8c <uxListRemove>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89c:	2201      	movs	r2, #1
 800a89e:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a2:	43da      	mvns	r2, r3
 800a8a4:	4b2b      	ldr	r3, [pc, #172]	; (800a954 <xTaskPriorityDisinherit+0x140>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	4a2a      	ldr	r2, [pc, #168]	; (800a954 <xTaskPriorityDisinherit+0x140>)
 800a8ac:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ba:	f1c3 0205 	rsb	r2, r3, #5
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	409a      	lsls	r2, r3
 800a8ca:	4b22      	ldr	r3, [pc, #136]	; (800a954 <xTaskPriorityDisinherit+0x140>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	4a20      	ldr	r2, [pc, #128]	; (800a954 <xTaskPriorityDisinherit+0x140>)
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d8:	491f      	ldr	r1, [pc, #124]	; (800a958 <xTaskPriorityDisinherit+0x144>)
 800a8da:	4613      	mov	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	440b      	add	r3, r1
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	609a      	str	r2, [r3, #8]
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	689a      	ldr	r2, [r3, #8]
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	60da      	str	r2, [r3, #12]
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	69ba      	ldr	r2, [r7, #24]
 800a8fe:	3204      	adds	r2, #4
 800a900:	605a      	str	r2, [r3, #4]
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	1d1a      	adds	r2, r3, #4
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	609a      	str	r2, [r3, #8]
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90e:	4613      	mov	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4a10      	ldr	r2, [pc, #64]	; (800a958 <xTaskPriorityDisinherit+0x144>)
 800a918:	441a      	add	r2, r3
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	615a      	str	r2, [r3, #20]
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a922:	490d      	ldr	r1, [pc, #52]	; (800a958 <xTaskPriorityDisinherit+0x144>)
 800a924:	4613      	mov	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	440b      	add	r3, r1
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	1c59      	adds	r1, r3, #1
 800a932:	4809      	ldr	r0, [pc, #36]	; (800a958 <xTaskPriorityDisinherit+0x144>)
 800a934:	4613      	mov	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4403      	add	r3, r0
 800a93e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a940:	2301      	movs	r3, #1
 800a942:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a944:	69fb      	ldr	r3, [r7, #28]
    }
 800a946:	4618      	mov	r0, r3
 800a948:	3720      	adds	r7, #32
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	20000960 	.word	0x20000960
 800a954:	20000a40 	.word	0x20000a40
 800a958:	20000964 	.word	0x20000964

0800a95c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08a      	sub	sp, #40	; 0x28
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a96a:	2301      	movs	r3, #1
 800a96c:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 80a1 	beq.w	800aab8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10a      	bne.n	800a994 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	613b      	str	r3, [r7, #16]
    }
 800a990:	bf00      	nop
 800a992:	e7fe      	b.n	800a992 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d902      	bls.n	800a9a4 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a2:	e002      	b.n	800a9aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9a8:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800a9aa:	6a3b      	ldr	r3, [r7, #32]
 800a9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	f000 8081 	beq.w	800aab8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ba:	69fa      	ldr	r2, [r7, #28]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d17b      	bne.n	800aab8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800a9c0:	4b3f      	ldr	r3, [pc, #252]	; (800aac0 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6a3a      	ldr	r2, [r7, #32]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d10a      	bne.n	800a9e0 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	60fb      	str	r3, [r7, #12]
    }
 800a9dc:	bf00      	nop
 800a9de:	e7fe      	b.n	800a9de <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a9e0:	6a3b      	ldr	r3, [r7, #32]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e4:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ea:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	db04      	blt.n	800a9fe <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f6:	f1c3 0205 	rsb	r2, r3, #5
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	6959      	ldr	r1, [r3, #20]
 800aa02:	69ba      	ldr	r2, [r7, #24]
 800aa04:	4613      	mov	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4413      	add	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4a2d      	ldr	r2, [pc, #180]	; (800aac4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800aa0e:	4413      	add	r3, r2
 800aa10:	4299      	cmp	r1, r3
 800aa12:	d151      	bne.n	800aab8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	3304      	adds	r3, #4
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fe f937 	bl	8008c8c <uxListRemove>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10a      	bne.n	800aa3a <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	2201      	movs	r2, #1
 800aa2a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa2e:	43da      	mvns	r2, r3
 800aa30:	4b25      	ldr	r3, [pc, #148]	; (800aac8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4013      	ands	r3, r2
 800aa36:	4a24      	ldr	r2, [pc, #144]	; (800aac8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa38:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3e:	2201      	movs	r2, #1
 800aa40:	409a      	lsls	r2, r3
 800aa42:	4b21      	ldr	r3, [pc, #132]	; (800aac8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	4a1f      	ldr	r2, [pc, #124]	; (800aac8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800aa4a:	6013      	str	r3, [r2, #0]
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa50:	491c      	ldr	r1, [pc, #112]	; (800aac4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800aa52:	4613      	mov	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	440b      	add	r3, r1
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	617b      	str	r3, [r7, #20]
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	609a      	str	r2, [r3, #8]
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	60da      	str	r2, [r3, #12]
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	6a3a      	ldr	r2, [r7, #32]
 800aa76:	3204      	adds	r2, #4
 800aa78:	605a      	str	r2, [r3, #4]
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	1d1a      	adds	r2, r3, #4
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	609a      	str	r2, [r3, #8]
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa86:	4613      	mov	r3, r2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4413      	add	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4a0d      	ldr	r2, [pc, #52]	; (800aac4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800aa90:	441a      	add	r2, r3
 800aa92:	6a3b      	ldr	r3, [r7, #32]
 800aa94:	615a      	str	r2, [r3, #20]
 800aa96:	6a3b      	ldr	r3, [r7, #32]
 800aa98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9a:	490a      	ldr	r1, [pc, #40]	; (800aac4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	440b      	add	r3, r1
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	1c59      	adds	r1, r3, #1
 800aaaa:	4806      	ldr	r0, [pc, #24]	; (800aac4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800aaac:	4613      	mov	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4413      	add	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4403      	add	r3, r0
 800aab6:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800aab8:	bf00      	nop
 800aaba:	3728      	adds	r7, #40	; 0x28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000960 	.word	0x20000960
 800aac4:	20000964 	.word	0x20000964
 800aac8:	20000a40 	.word	0x20000a40

0800aacc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800aacc:	b480      	push	{r7}
 800aace:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800aad0:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d004      	beq.n	800aae2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800aad8:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aade:	3201      	adds	r2, #1
 800aae0:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800aae2:	4b03      	ldr	r3, [pc, #12]	; (800aaf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800aae4:	681b      	ldr	r3, [r3, #0]
    }
 800aae6:	4618      	mov	r0, r3
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	20000960 	.word	0x20000960

0800aaf4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800aafe:	4b36      	ldr	r3, [pc, #216]	; (800abd8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab04:	4b35      	ldr	r3, [pc, #212]	; (800abdc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe f8be 	bl	8008c8c <uxListRemove>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10b      	bne.n	800ab2e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ab16:	4b31      	ldr	r3, [pc, #196]	; (800abdc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab22:	43da      	mvns	r2, r3
 800ab24:	4b2e      	ldr	r3, [pc, #184]	; (800abe0 <prvAddCurrentTaskToDelayedList+0xec>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4013      	ands	r3, r2
 800ab2a:	4a2d      	ldr	r2, [pc, #180]	; (800abe0 <prvAddCurrentTaskToDelayedList+0xec>)
 800ab2c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab34:	d124      	bne.n	800ab80 <prvAddCurrentTaskToDelayedList+0x8c>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d021      	beq.n	800ab80 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab3c:	4b29      	ldr	r3, [pc, #164]	; (800abe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	613b      	str	r3, [r7, #16]
 800ab42:	4b26      	ldr	r3, [pc, #152]	; (800abdc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	609a      	str	r2, [r3, #8]
 800ab4a:	4b24      	ldr	r3, [pc, #144]	; (800abdc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	6892      	ldr	r2, [r2, #8]
 800ab52:	60da      	str	r2, [r3, #12]
 800ab54:	4b21      	ldr	r3, [pc, #132]	; (800abdc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	3204      	adds	r2, #4
 800ab5e:	605a      	str	r2, [r3, #4]
 800ab60:	4b1e      	ldr	r3, [pc, #120]	; (800abdc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	1d1a      	adds	r2, r3, #4
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	609a      	str	r2, [r3, #8]
 800ab6a:	4b1c      	ldr	r3, [pc, #112]	; (800abdc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a1d      	ldr	r2, [pc, #116]	; (800abe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ab70:	615a      	str	r2, [r3, #20]
 800ab72:	4b1c      	ldr	r3, [pc, #112]	; (800abe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3301      	adds	r3, #1
 800ab78:	4a1a      	ldr	r2, [pc, #104]	; (800abe4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ab7e:	e026      	b.n	800abce <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4413      	add	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab88:	4b14      	ldr	r3, [pc, #80]	; (800abdc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d209      	bcs.n	800abac <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab98:	4b13      	ldr	r3, [pc, #76]	; (800abe8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	4b0f      	ldr	r3, [pc, #60]	; (800abdc <prvAddCurrentTaskToDelayedList+0xe8>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	3304      	adds	r3, #4
 800aba2:	4619      	mov	r1, r3
 800aba4:	4610      	mov	r0, r2
 800aba6:	f7fe f838 	bl	8008c1a <vListInsert>
}
 800abaa:	e010      	b.n	800abce <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abac:	4b0f      	ldr	r3, [pc, #60]	; (800abec <prvAddCurrentTaskToDelayedList+0xf8>)
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	4b0a      	ldr	r3, [pc, #40]	; (800abdc <prvAddCurrentTaskToDelayedList+0xe8>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3304      	adds	r3, #4
 800abb6:	4619      	mov	r1, r3
 800abb8:	4610      	mov	r0, r2
 800abba:	f7fe f82e 	bl	8008c1a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800abbe:	4b0c      	ldr	r3, [pc, #48]	; (800abf0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d202      	bcs.n	800abce <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800abc8:	4a09      	ldr	r2, [pc, #36]	; (800abf0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6013      	str	r3, [r2, #0]
}
 800abce:	bf00      	nop
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000a3c 	.word	0x20000a3c
 800abdc:	20000960 	.word	0x20000960
 800abe0:	20000a40 	.word	0x20000a40
 800abe4:	20000a24 	.word	0x20000a24
 800abe8:	200009f4 	.word	0x200009f4
 800abec:	200009f0 	.word	0x200009f0
 800abf0:	20000a58 	.word	0x20000a58

0800abf4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800abfa:	2300      	movs	r3, #0
 800abfc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800abfe:	f000 fa47 	bl	800b090 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800ac02:	4b11      	ldr	r3, [pc, #68]	; (800ac48 <xTimerCreateTimerTask+0x54>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00b      	beq.n	800ac22 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800ac0a:	4b10      	ldr	r3, [pc, #64]	; (800ac4c <xTimerCreateTimerTask+0x58>)
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	2302      	movs	r3, #2
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	2300      	movs	r3, #0
 800ac14:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ac18:	490d      	ldr	r1, [pc, #52]	; (800ac50 <xTimerCreateTimerTask+0x5c>)
 800ac1a:	480e      	ldr	r0, [pc, #56]	; (800ac54 <xTimerCreateTimerTask+0x60>)
 800ac1c:	f7fe fe48 	bl	80098b0 <xTaskCreate>
 800ac20:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10a      	bne.n	800ac3e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	603b      	str	r3, [r7, #0]
    }
 800ac3a:	bf00      	nop
 800ac3c:	e7fe      	b.n	800ac3c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800ac3e:	687b      	ldr	r3, [r7, #4]
    }
 800ac40:	4618      	mov	r0, r3
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	20000a94 	.word	0x20000a94
 800ac4c:	20000a98 	.word	0x20000a98
 800ac50:	0800ce10 	.word	0x0800ce10
 800ac54:	0800acfd 	.word	0x0800acfd

0800ac58 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800ac64:	e008      	b.n	800ac78 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6a1b      	ldr	r3, [r3, #32]
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	699a      	ldr	r2, [r3, #24]
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	18d1      	adds	r1, r2, r3
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f000 f8dd 	bl	800ae44 <prvInsertTimerInActiveList>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1ea      	bne.n	800ac66 <prvReloadTimer+0xe>
        }
    }
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
	...

0800ac9c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca6:	4b14      	ldr	r3, [pc, #80]	; (800acf8 <prvProcessExpiredTimer+0x5c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fd ffe9 	bl	8008c8c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	6879      	ldr	r1, [r7, #4]
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f7ff ffc3 	bl	800ac58 <prvReloadTimer>
 800acd2:	e008      	b.n	800ace6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acda:	f023 0301 	bic.w	r3, r3, #1
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	4798      	blx	r3
    }
 800acee:	bf00      	nop
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20000a8c 	.word	0x20000a8c

0800acfc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad04:	f107 0308 	add.w	r3, r7, #8
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 f857 	bl	800adbc <prvGetNextExpireTime>
 800ad0e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	4619      	mov	r1, r3
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f803 	bl	800ad20 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800ad1a:	f000 f8d5 	bl	800aec8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad1e:	e7f1      	b.n	800ad04 <prvTimerTask+0x8>

0800ad20 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800ad2a:	f7fe ffb1 	bl	8009c90 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad2e:	f107 0308 	add.w	r3, r7, #8
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 f866 	bl	800ae04 <prvSampleTimeNow>
 800ad38:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d130      	bne.n	800ada2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d10a      	bne.n	800ad5c <prvProcessTimerOrBlockTask+0x3c>
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d806      	bhi.n	800ad5c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800ad4e:	f7fe ffad 	bl	8009cac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff ffa1 	bl	800ac9c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800ad5a:	e024      	b.n	800ada6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d008      	beq.n	800ad74 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad62:	4b13      	ldr	r3, [pc, #76]	; (800adb0 <prvProcessTimerOrBlockTask+0x90>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d101      	bne.n	800ad70 <prvProcessTimerOrBlockTask+0x50>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e000      	b.n	800ad72 <prvProcessTimerOrBlockTask+0x52>
 800ad70:	2300      	movs	r3, #0
 800ad72:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad74:	4b0f      	ldr	r3, [pc, #60]	; (800adb4 <prvProcessTimerOrBlockTask+0x94>)
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	4619      	mov	r1, r3
 800ad82:	f7fe fd61 	bl	8009848 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800ad86:	f7fe ff91 	bl	8009cac <xTaskResumeAll>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800ad90:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <prvProcessTimerOrBlockTask+0x98>)
 800ad92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	f3bf 8f6f 	isb	sy
    }
 800ada0:	e001      	b.n	800ada6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800ada2:	f7fe ff83 	bl	8009cac <xTaskResumeAll>
    }
 800ada6:	bf00      	nop
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20000a90 	.word	0x20000a90
 800adb4:	20000a94 	.word	0x20000a94
 800adb8:	e000ed04 	.word	0xe000ed04

0800adbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800adc4:	4b0e      	ldr	r3, [pc, #56]	; (800ae00 <prvGetNextExpireTime+0x44>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <prvGetNextExpireTime+0x16>
 800adce:	2201      	movs	r2, #1
 800add0:	e000      	b.n	800add4 <prvGetNextExpireTime+0x18>
 800add2:	2200      	movs	r2, #0
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d105      	bne.n	800adec <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <prvGetNextExpireTime+0x44>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	60fb      	str	r3, [r7, #12]
 800adea:	e001      	b.n	800adf0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800adec:	2300      	movs	r3, #0
 800adee:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800adf0:	68fb      	ldr	r3, [r7, #12]
    }
 800adf2:	4618      	mov	r0, r3
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	20000a8c 	.word	0x20000a8c

0800ae04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800ae0c:	f7ff f84a 	bl	8009ea4 <xTaskGetTickCount>
 800ae10:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800ae12:	4b0b      	ldr	r3, [pc, #44]	; (800ae40 <prvSampleTimeNow+0x3c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d205      	bcs.n	800ae28 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800ae1c:	f000 f912 	bl	800b044 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	e002      	b.n	800ae2e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800ae2e:	4a04      	ldr	r2, [pc, #16]	; (800ae40 <prvSampleTimeNow+0x3c>)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800ae34:	68fb      	ldr	r3, [r7, #12]
    }
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20000a9c 	.word	0x20000a9c

0800ae44 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800ae52:	2300      	movs	r3, #0
 800ae54:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d812      	bhi.n	800ae90 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	1ad2      	subs	r2, r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d302      	bcc.n	800ae7e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	e01b      	b.n	800aeb6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae7e:	4b10      	ldr	r3, [pc, #64]	; (800aec0 <prvInsertTimerInActiveList+0x7c>)
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4619      	mov	r1, r3
 800ae88:	4610      	mov	r0, r2
 800ae8a:	f7fd fec6 	bl	8008c1a <vListInsert>
 800ae8e:	e012      	b.n	800aeb6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d206      	bcs.n	800aea6 <prvInsertTimerInActiveList+0x62>
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d302      	bcc.n	800aea6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800aea0:	2301      	movs	r3, #1
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e007      	b.n	800aeb6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aea6:	4b07      	ldr	r3, [pc, #28]	; (800aec4 <prvInsertTimerInActiveList+0x80>)
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3304      	adds	r3, #4
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	f7fd feb2 	bl	8008c1a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800aeb6:	697b      	ldr	r3, [r7, #20]
    }
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	20000a90 	.word	0x20000a90
 800aec4:	20000a8c 	.word	0x20000a8c

0800aec8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b088      	sub	sp, #32
 800aecc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aece:	e0a6      	b.n	800b01e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f2c0 80a3 	blt.w	800b01e <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d004      	beq.n	800aeee <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	3304      	adds	r3, #4
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fd fecf 	bl	8008c8c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aeee:	1d3b      	adds	r3, r7, #4
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7ff ff87 	bl	800ae04 <prvSampleTimeNow>
 800aef6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	3b01      	subs	r3, #1
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	f200 808d 	bhi.w	800b01c <prvProcessReceivedCommands+0x154>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <prvProcessReceivedCommands+0x40>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800af2d 	.word	0x0800af2d
 800af10:	0800af95 	.word	0x0800af95
 800af14:	0800afa9 	.word	0x0800afa9
 800af18:	0800aff3 	.word	0x0800aff3
 800af1c:	0800af2d 	.word	0x0800af2d
 800af20:	0800af2d 	.word	0x0800af2d
 800af24:	0800af95 	.word	0x0800af95
 800af28:	0800afa9 	.word	0x0800afa9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af32:	f043 0301 	orr.w	r3, r3, #1
 800af36:	b2da      	uxtb	r2, r3
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	18d1      	adds	r1, r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	69ba      	ldr	r2, [r7, #24]
 800af4a:	69f8      	ldr	r0, [r7, #28]
 800af4c:	f7ff ff7a 	bl	800ae44 <prvInsertTimerInActiveList>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d063      	beq.n	800b01e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	d009      	beq.n	800af78 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	4413      	add	r3, r2
 800af6c:	69ba      	ldr	r2, [r7, #24]
 800af6e:	4619      	mov	r1, r3
 800af70:	69f8      	ldr	r0, [r7, #28]
 800af72:	f7ff fe71 	bl	800ac58 <prvReloadTimer>
 800af76:	e008      	b.n	800af8a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af7e:	f023 0301 	bic.w	r3, r3, #1
 800af82:	b2da      	uxtb	r2, r3
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	69f8      	ldr	r0, [r7, #28]
 800af90:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800af92:	e044      	b.n	800b01e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af9a:	f023 0301 	bic.w	r3, r3, #1
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800afa6:	e03a      	b.n	800b01e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afae:	f043 0301 	orr.w	r3, r3, #1
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10a      	bne.n	800afde <prvProcessReceivedCommands+0x116>
        __asm volatile
 800afc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afcc:	f383 8811 	msr	BASEPRI, r3
 800afd0:	f3bf 8f6f 	isb	sy
 800afd4:	f3bf 8f4f 	dsb	sy
 800afd8:	617b      	str	r3, [r7, #20]
    }
 800afda:	bf00      	nop
 800afdc:	e7fe      	b.n	800afdc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	699a      	ldr	r2, [r3, #24]
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	18d1      	adds	r1, r2, r3
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	69f8      	ldr	r0, [r7, #28]
 800afec:	f7ff ff2a 	bl	800ae44 <prvInsertTimerInActiveList>
                        break;
 800aff0:	e015      	b.n	800b01e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b00      	cmp	r3, #0
 800affe:	d103      	bne.n	800b008 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800b000:	69f8      	ldr	r0, [r7, #28]
 800b002:	f000 fb45 	bl	800b690 <vPortFree>
 800b006:	e00a      	b.n	800b01e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b00e:	f023 0301 	bic.w	r3, r3, #1
 800b012:	b2da      	uxtb	r2, r3
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b01a:	e000      	b.n	800b01e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b01c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b01e:	4b08      	ldr	r3, [pc, #32]	; (800b040 <prvProcessReceivedCommands+0x178>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f107 0108 	add.w	r1, r7, #8
 800b026:	2200      	movs	r2, #0
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fe f8b9 	bl	80091a0 <xQueueReceive>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	f47f af4d 	bne.w	800aed0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800b036:	bf00      	nop
 800b038:	bf00      	nop
 800b03a:	3720      	adds	r7, #32
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	20000a94 	.word	0x20000a94

0800b044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b04a:	e009      	b.n	800b060 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b04c:	4b0e      	ldr	r3, [pc, #56]	; (800b088 <prvSwitchTimerLists+0x44>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800b056:	f04f 31ff 	mov.w	r1, #4294967295
 800b05a:	6838      	ldr	r0, [r7, #0]
 800b05c:	f7ff fe1e 	bl	800ac9c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b060:	4b09      	ldr	r3, [pc, #36]	; (800b088 <prvSwitchTimerLists+0x44>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1f0      	bne.n	800b04c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800b06a:	4b07      	ldr	r3, [pc, #28]	; (800b088 <prvSwitchTimerLists+0x44>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800b070:	4b06      	ldr	r3, [pc, #24]	; (800b08c <prvSwitchTimerLists+0x48>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a04      	ldr	r2, [pc, #16]	; (800b088 <prvSwitchTimerLists+0x44>)
 800b076:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b078:	4a04      	ldr	r2, [pc, #16]	; (800b08c <prvSwitchTimerLists+0x48>)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6013      	str	r3, [r2, #0]
    }
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	20000a8c 	.word	0x20000a8c
 800b08c:	20000a90 	.word	0x20000a90

0800b090 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b090:	b580      	push	{r7, lr}
 800b092:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b094:	f000 f960 	bl	800b358 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b098:	4b12      	ldr	r3, [pc, #72]	; (800b0e4 <prvCheckForValidListAndQueue+0x54>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d11d      	bne.n	800b0dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800b0a0:	4811      	ldr	r0, [pc, #68]	; (800b0e8 <prvCheckForValidListAndQueue+0x58>)
 800b0a2:	f7fd fd8d 	bl	8008bc0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b0a6:	4811      	ldr	r0, [pc, #68]	; (800b0ec <prvCheckForValidListAndQueue+0x5c>)
 800b0a8:	f7fd fd8a 	bl	8008bc0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b0ac:	4b10      	ldr	r3, [pc, #64]	; (800b0f0 <prvCheckForValidListAndQueue+0x60>)
 800b0ae:	4a0e      	ldr	r2, [pc, #56]	; (800b0e8 <prvCheckForValidListAndQueue+0x58>)
 800b0b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b0b2:	4b10      	ldr	r3, [pc, #64]	; (800b0f4 <prvCheckForValidListAndQueue+0x64>)
 800b0b4:	4a0d      	ldr	r2, [pc, #52]	; (800b0ec <prvCheckForValidListAndQueue+0x5c>)
 800b0b6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	210c      	movs	r1, #12
 800b0bc:	200a      	movs	r0, #10
 800b0be:	f7fd fe9f 	bl	8008e00 <xQueueGenericCreate>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	4a07      	ldr	r2, [pc, #28]	; (800b0e4 <prvCheckForValidListAndQueue+0x54>)
 800b0c6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800b0c8:	4b06      	ldr	r3, [pc, #24]	; (800b0e4 <prvCheckForValidListAndQueue+0x54>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d005      	beq.n	800b0dc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b0d0:	4b04      	ldr	r3, [pc, #16]	; (800b0e4 <prvCheckForValidListAndQueue+0x54>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4908      	ldr	r1, [pc, #32]	; (800b0f8 <prvCheckForValidListAndQueue+0x68>)
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fe fb68 	bl	80097ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b0dc:	f000 f96c 	bl	800b3b8 <vPortExitCritical>
    }
 800b0e0:	bf00      	nop
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	20000a94 	.word	0x20000a94
 800b0e8:	20000a64 	.word	0x20000a64
 800b0ec:	20000a78 	.word	0x20000a78
 800b0f0:	20000a8c 	.word	0x20000a8c
 800b0f4:	20000a90 	.word	0x20000a90
 800b0f8:	0800ce18 	.word	0x0800ce18

0800b0fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3b04      	subs	r3, #4
 800b10c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b114:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3b04      	subs	r3, #4
 800b11a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f023 0201 	bic.w	r2, r3, #1
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	3b04      	subs	r3, #4
 800b12a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b12c:	4a0c      	ldr	r2, [pc, #48]	; (800b160 <pxPortInitialiseStack+0x64>)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3b14      	subs	r3, #20
 800b136:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3b04      	subs	r3, #4
 800b142:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f06f 0202 	mvn.w	r2, #2
 800b14a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	3b20      	subs	r3, #32
 800b150:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b152:	68fb      	ldr	r3, [r7, #12]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr
 800b160:	0800b165 	.word	0x0800b165

0800b164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b16e:	4b12      	ldr	r3, [pc, #72]	; (800b1b8 <prvTaskExitError+0x54>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b176:	d00a      	beq.n	800b18e <prvTaskExitError+0x2a>
        __asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	60fb      	str	r3, [r7, #12]
    }
 800b18a:	bf00      	nop
 800b18c:	e7fe      	b.n	800b18c <prvTaskExitError+0x28>
        __asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	60bb      	str	r3, [r7, #8]
    }
 800b1a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b1a2:	bf00      	nop
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d0fc      	beq.n	800b1a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b1aa:	bf00      	nop
 800b1ac:	bf00      	nop
 800b1ae:	3714      	adds	r7, #20
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	20000030 	.word	0x20000030
 800b1bc:	00000000 	.word	0x00000000

0800b1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800b1c0:	4b07      	ldr	r3, [pc, #28]	; (800b1e0 <pxCurrentTCBConst2>)
 800b1c2:	6819      	ldr	r1, [r3, #0]
 800b1c4:	6808      	ldr	r0, [r1, #0]
 800b1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ca:	f380 8809 	msr	PSP, r0
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f04f 0000 	mov.w	r0, #0
 800b1d6:	f380 8811 	msr	BASEPRI, r0
 800b1da:	4770      	bx	lr
 800b1dc:	f3af 8000 	nop.w

0800b1e0 <pxCurrentTCBConst2>:
 800b1e0:	20000960 	.word	0x20000960
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800b1e4:	bf00      	nop
 800b1e6:	bf00      	nop

0800b1e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b1e8:	4808      	ldr	r0, [pc, #32]	; (800b20c <prvPortStartFirstTask+0x24>)
 800b1ea:	6800      	ldr	r0, [r0, #0]
 800b1ec:	6800      	ldr	r0, [r0, #0]
 800b1ee:	f380 8808 	msr	MSP, r0
 800b1f2:	f04f 0000 	mov.w	r0, #0
 800b1f6:	f380 8814 	msr	CONTROL, r0
 800b1fa:	b662      	cpsie	i
 800b1fc:	b661      	cpsie	f
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	df00      	svc	0
 800b208:	bf00      	nop
 800b20a:	0000      	.short	0x0000
 800b20c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800b210:	bf00      	nop
 800b212:	bf00      	nop

0800b214 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b21a:	4b46      	ldr	r3, [pc, #280]	; (800b334 <xPortStartScheduler+0x120>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a46      	ldr	r2, [pc, #280]	; (800b338 <xPortStartScheduler+0x124>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d10a      	bne.n	800b23a <xPortStartScheduler+0x26>
        __asm volatile
 800b224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b228:	f383 8811 	msr	BASEPRI, r3
 800b22c:	f3bf 8f6f 	isb	sy
 800b230:	f3bf 8f4f 	dsb	sy
 800b234:	613b      	str	r3, [r7, #16]
    }
 800b236:	bf00      	nop
 800b238:	e7fe      	b.n	800b238 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b23a:	4b3e      	ldr	r3, [pc, #248]	; (800b334 <xPortStartScheduler+0x120>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a3f      	ldr	r2, [pc, #252]	; (800b33c <xPortStartScheduler+0x128>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d10a      	bne.n	800b25a <xPortStartScheduler+0x46>
        __asm volatile
 800b244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b248:	f383 8811 	msr	BASEPRI, r3
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	60fb      	str	r3, [r7, #12]
    }
 800b256:	bf00      	nop
 800b258:	e7fe      	b.n	800b258 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b25a:	4b39      	ldr	r3, [pc, #228]	; (800b340 <xPortStartScheduler+0x12c>)
 800b25c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	b2db      	uxtb	r3, r3
 800b264:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	22ff      	movs	r2, #255	; 0xff
 800b26a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	b2db      	uxtb	r3, r3
 800b272:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b274:	78fb      	ldrb	r3, [r7, #3]
 800b276:	b2db      	uxtb	r3, r3
 800b278:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	4b31      	ldr	r3, [pc, #196]	; (800b344 <xPortStartScheduler+0x130>)
 800b280:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b282:	4b31      	ldr	r3, [pc, #196]	; (800b348 <xPortStartScheduler+0x134>)
 800b284:	2207      	movs	r2, #7
 800b286:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b288:	e009      	b.n	800b29e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800b28a:	4b2f      	ldr	r3, [pc, #188]	; (800b348 <xPortStartScheduler+0x134>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	3b01      	subs	r3, #1
 800b290:	4a2d      	ldr	r2, [pc, #180]	; (800b348 <xPortStartScheduler+0x134>)
 800b292:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b294:	78fb      	ldrb	r3, [r7, #3]
 800b296:	b2db      	uxtb	r3, r3
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b29e:	78fb      	ldrb	r3, [r7, #3]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a6:	2b80      	cmp	r3, #128	; 0x80
 800b2a8:	d0ef      	beq.n	800b28a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2aa:	4b27      	ldr	r3, [pc, #156]	; (800b348 <xPortStartScheduler+0x134>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f1c3 0307 	rsb	r3, r3, #7
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	d00a      	beq.n	800b2cc <xPortStartScheduler+0xb8>
        __asm volatile
 800b2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ba:	f383 8811 	msr	BASEPRI, r3
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	60bb      	str	r3, [r7, #8]
    }
 800b2c8:	bf00      	nop
 800b2ca:	e7fe      	b.n	800b2ca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2cc:	4b1e      	ldr	r3, [pc, #120]	; (800b348 <xPortStartScheduler+0x134>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	021b      	lsls	r3, r3, #8
 800b2d2:	4a1d      	ldr	r2, [pc, #116]	; (800b348 <xPortStartScheduler+0x134>)
 800b2d4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2d6:	4b1c      	ldr	r3, [pc, #112]	; (800b348 <xPortStartScheduler+0x134>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2de:	4a1a      	ldr	r2, [pc, #104]	; (800b348 <xPortStartScheduler+0x134>)
 800b2e0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b2ea:	4b18      	ldr	r3, [pc, #96]	; (800b34c <xPortStartScheduler+0x138>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a17      	ldr	r2, [pc, #92]	; (800b34c <xPortStartScheduler+0x138>)
 800b2f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b2f6:	4b15      	ldr	r3, [pc, #84]	; (800b34c <xPortStartScheduler+0x138>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a14      	ldr	r2, [pc, #80]	; (800b34c <xPortStartScheduler+0x138>)
 800b2fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b300:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b302:	f000 f8db 	bl	800b4bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b306:	4b12      	ldr	r3, [pc, #72]	; (800b350 <xPortStartScheduler+0x13c>)
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b30c:	f000 f8fa 	bl	800b504 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b310:	4b10      	ldr	r3, [pc, #64]	; (800b354 <xPortStartScheduler+0x140>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a0f      	ldr	r2, [pc, #60]	; (800b354 <xPortStartScheduler+0x140>)
 800b316:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b31a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b31c:	f7ff ff64 	bl	800b1e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b320:	f7fe fee6 	bl	800a0f0 <vTaskSwitchContext>
    prvTaskExitError();
 800b324:	f7ff ff1e 	bl	800b164 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	e000ed00 	.word	0xe000ed00
 800b338:	410fc271 	.word	0x410fc271
 800b33c:	410fc270 	.word	0x410fc270
 800b340:	e000e400 	.word	0xe000e400
 800b344:	20000aa0 	.word	0x20000aa0
 800b348:	20000aa4 	.word	0x20000aa4
 800b34c:	e000ed20 	.word	0xe000ed20
 800b350:	20000030 	.word	0x20000030
 800b354:	e000ef34 	.word	0xe000ef34

0800b358 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
        __asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	607b      	str	r3, [r7, #4]
    }
 800b370:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800b372:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <vPortEnterCritical+0x58>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3301      	adds	r3, #1
 800b378:	4a0d      	ldr	r2, [pc, #52]	; (800b3b0 <vPortEnterCritical+0x58>)
 800b37a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800b37c:	4b0c      	ldr	r3, [pc, #48]	; (800b3b0 <vPortEnterCritical+0x58>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d10f      	bne.n	800b3a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b384:	4b0b      	ldr	r3, [pc, #44]	; (800b3b4 <vPortEnterCritical+0x5c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00a      	beq.n	800b3a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	603b      	str	r3, [r7, #0]
    }
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <vPortEnterCritical+0x4a>
    }
}
 800b3a4:	bf00      	nop
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr
 800b3b0:	20000030 	.word	0x20000030
 800b3b4:	e000ed04 	.word	0xe000ed04

0800b3b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800b3be:	4b12      	ldr	r3, [pc, #72]	; (800b408 <vPortExitCritical+0x50>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10a      	bne.n	800b3dc <vPortExitCritical+0x24>
        __asm volatile
 800b3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ca:	f383 8811 	msr	BASEPRI, r3
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	607b      	str	r3, [r7, #4]
    }
 800b3d8:	bf00      	nop
 800b3da:	e7fe      	b.n	800b3da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800b3dc:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <vPortExitCritical+0x50>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	4a09      	ldr	r2, [pc, #36]	; (800b408 <vPortExitCritical+0x50>)
 800b3e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800b3e6:	4b08      	ldr	r3, [pc, #32]	; (800b408 <vPortExitCritical+0x50>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d105      	bne.n	800b3fa <vPortExitCritical+0x42>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800b3f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800b3fa:	bf00      	nop
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20000030 	.word	0x20000030
 800b40c:	00000000 	.word	0x00000000

0800b410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800b410:	f3ef 8009 	mrs	r0, PSP
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	4b15      	ldr	r3, [pc, #84]	; (800b470 <pxCurrentTCBConst>)
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	f01e 0f10 	tst.w	lr, #16
 800b420:	bf08      	it	eq
 800b422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42a:	6010      	str	r0, [r2, #0]
 800b42c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b430:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b434:	f380 8811 	msr	BASEPRI, r0
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f7fe fe56 	bl	800a0f0 <vTaskSwitchContext>
 800b444:	f04f 0000 	mov.w	r0, #0
 800b448:	f380 8811 	msr	BASEPRI, r0
 800b44c:	bc09      	pop	{r0, r3}
 800b44e:	6819      	ldr	r1, [r3, #0]
 800b450:	6808      	ldr	r0, [r1, #0]
 800b452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b456:	f01e 0f10 	tst.w	lr, #16
 800b45a:	bf08      	it	eq
 800b45c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b460:	f380 8809 	msr	PSP, r0
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	f3af 8000 	nop.w

0800b470 <pxCurrentTCBConst>:
 800b470:	20000960 	.word	0x20000960
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop

0800b478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
        __asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	607b      	str	r3, [r7, #4]
    }
 800b490:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b492:	f7fe fd17 	bl	8009ec4 <xTaskIncrementTick>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d003      	beq.n	800b4a4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b49c:	4b06      	ldr	r3, [pc, #24]	; (800b4b8 <SysTick_Handler+0x40>)
 800b49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4a2:	601a      	str	r2, [r3, #0]
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	f383 8811 	msr	BASEPRI, r3
    }
 800b4ae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	e000ed04 	.word	0xe000ed04

0800b4bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4c0:	4b0b      	ldr	r3, [pc, #44]	; (800b4f0 <vPortSetupTimerInterrupt+0x34>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4c6:	4b0b      	ldr	r3, [pc, #44]	; (800b4f4 <vPortSetupTimerInterrupt+0x38>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4cc:	4b0a      	ldr	r3, [pc, #40]	; (800b4f8 <vPortSetupTimerInterrupt+0x3c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a0a      	ldr	r2, [pc, #40]	; (800b4fc <vPortSetupTimerInterrupt+0x40>)
 800b4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4d6:	099b      	lsrs	r3, r3, #6
 800b4d8:	4a09      	ldr	r2, [pc, #36]	; (800b500 <vPortSetupTimerInterrupt+0x44>)
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4de:	4b04      	ldr	r3, [pc, #16]	; (800b4f0 <vPortSetupTimerInterrupt+0x34>)
 800b4e0:	2207      	movs	r2, #7
 800b4e2:	601a      	str	r2, [r3, #0]
}
 800b4e4:	bf00      	nop
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	e000e010 	.word	0xe000e010
 800b4f4:	e000e018 	.word	0xe000e018
 800b4f8:	20000000 	.word	0x20000000
 800b4fc:	10624dd3 	.word	0x10624dd3
 800b500:	e000e014 	.word	0xe000e014

0800b504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b514 <vPortEnableVFP+0x10>
 800b508:	6801      	ldr	r1, [r0, #0]
 800b50a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b50e:	6001      	str	r1, [r0, #0]
 800b510:	4770      	bx	lr
 800b512:	0000      	.short	0x0000
 800b514:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b518:	bf00      	nop
 800b51a:	bf00      	nop

0800b51c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08a      	sub	sp, #40	; 0x28
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800b524:	2300      	movs	r3, #0
 800b526:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800b528:	f7fe fbb2 	bl	8009c90 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b52c:	4b53      	ldr	r3, [pc, #332]	; (800b67c <pvPortMalloc+0x160>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d101      	bne.n	800b538 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b534:	f000 f908 	bl	800b748 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d012      	beq.n	800b564 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800b53e:	2208      	movs	r2, #8
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f003 0307 	and.w	r3, r3, #7
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	3308      	adds	r3, #8
 800b54a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	43db      	mvns	r3, r3
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	429a      	cmp	r2, r3
 800b554:	d804      	bhi.n	800b560 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	4413      	add	r3, r2
 800b55c:	607b      	str	r3, [r7, #4]
 800b55e:	e001      	b.n	800b564 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	db70      	blt.n	800b64c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d06d      	beq.n	800b64c <pvPortMalloc+0x130>
 800b570:	4b43      	ldr	r3, [pc, #268]	; (800b680 <pvPortMalloc+0x164>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	429a      	cmp	r2, r3
 800b578:	d868      	bhi.n	800b64c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b57a:	4b42      	ldr	r3, [pc, #264]	; (800b684 <pvPortMalloc+0x168>)
 800b57c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800b57e:	4b41      	ldr	r3, [pc, #260]	; (800b684 <pvPortMalloc+0x168>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b584:	e004      	b.n	800b590 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	429a      	cmp	r2, r3
 800b598:	d903      	bls.n	800b5a2 <pvPortMalloc+0x86>
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1f1      	bne.n	800b586 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b5a2:	4b36      	ldr	r3, [pc, #216]	; (800b67c <pvPortMalloc+0x160>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d04f      	beq.n	800b64c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2208      	movs	r2, #8
 800b5b2:	4413      	add	r3, r2
 800b5b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	6a3b      	ldr	r3, [r7, #32]
 800b5bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	685a      	ldr	r2, [r3, #4]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	1ad2      	subs	r2, r2, r3
 800b5c6:	2308      	movs	r3, #8
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d91f      	bls.n	800b60e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f003 0307 	and.w	r3, r3, #7
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00a      	beq.n	800b5f6 <pvPortMalloc+0xda>
        __asm volatile
 800b5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e4:	f383 8811 	msr	BASEPRI, r3
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	613b      	str	r3, [r7, #16]
    }
 800b5f2:	bf00      	nop
 800b5f4:	e7fe      	b.n	800b5f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	1ad2      	subs	r2, r2, r3
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b608:	6978      	ldr	r0, [r7, #20]
 800b60a:	f000 f8f9 	bl	800b800 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b60e:	4b1c      	ldr	r3, [pc, #112]	; (800b680 <pvPortMalloc+0x164>)
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	4a19      	ldr	r2, [pc, #100]	; (800b680 <pvPortMalloc+0x164>)
 800b61a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b61c:	4b18      	ldr	r3, [pc, #96]	; (800b680 <pvPortMalloc+0x164>)
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	4b19      	ldr	r3, [pc, #100]	; (800b688 <pvPortMalloc+0x16c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	429a      	cmp	r2, r3
 800b626:	d203      	bcs.n	800b630 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b628:	4b15      	ldr	r3, [pc, #84]	; (800b680 <pvPortMalloc+0x164>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a16      	ldr	r2, [pc, #88]	; (800b688 <pvPortMalloc+0x16c>)
 800b62e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800b63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63e:	2200      	movs	r2, #0
 800b640:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800b642:	4b12      	ldr	r3, [pc, #72]	; (800b68c <pvPortMalloc+0x170>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3301      	adds	r3, #1
 800b648:	4a10      	ldr	r2, [pc, #64]	; (800b68c <pvPortMalloc+0x170>)
 800b64a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b64c:	f7fe fb2e 	bl	8009cac <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	f003 0307 	and.w	r3, r3, #7
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00a      	beq.n	800b670 <pvPortMalloc+0x154>
        __asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	60fb      	str	r3, [r7, #12]
    }
 800b66c:	bf00      	nop
 800b66e:	e7fe      	b.n	800b66e <pvPortMalloc+0x152>
    return pvReturn;
 800b670:	69fb      	ldr	r3, [r7, #28]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3728      	adds	r7, #40	; 0x28
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	200136b0 	.word	0x200136b0
 800b680:	200136b4 	.word	0x200136b4
 800b684:	200136a8 	.word	0x200136a8
 800b688:	200136b8 	.word	0x200136b8
 800b68c:	200136bc 	.word	0x200136bc

0800b690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d049      	beq.n	800b736 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800b6a2:	2308      	movs	r3, #8
 800b6a4:	425b      	negs	r3, r3
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	db0a      	blt.n	800b6ce <vPortFree+0x3e>
        __asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	60fb      	str	r3, [r7, #12]
    }
 800b6ca:	bf00      	nop
 800b6cc:	e7fe      	b.n	800b6cc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <vPortFree+0x5c>
        __asm volatile
 800b6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
 800b6e6:	60bb      	str	r3, [r7, #8]
    }
 800b6e8:	bf00      	nop
 800b6ea:	e7fe      	b.n	800b6ea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	0fdb      	lsrs	r3, r3, #31
 800b6f2:	f003 0301 	and.w	r3, r3, #1
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01c      	beq.n	800b736 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d118      	bne.n	800b736 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800b710:	f7fe fabe 	bl	8009c90 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	4b09      	ldr	r3, [pc, #36]	; (800b740 <vPortFree+0xb0>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4413      	add	r3, r2
 800b71e:	4a08      	ldr	r2, [pc, #32]	; (800b740 <vPortFree+0xb0>)
 800b720:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b722:	6938      	ldr	r0, [r7, #16]
 800b724:	f000 f86c 	bl	800b800 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800b728:	4b06      	ldr	r3, [pc, #24]	; (800b744 <vPortFree+0xb4>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3301      	adds	r3, #1
 800b72e:	4a05      	ldr	r2, [pc, #20]	; (800b744 <vPortFree+0xb4>)
 800b730:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800b732:	f7fe fabb 	bl	8009cac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800b736:	bf00      	nop
 800b738:	3718      	adds	r7, #24
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	200136b4 	.word	0x200136b4
 800b744:	200136c0 	.word	0x200136c0

0800b748 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b74e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800b752:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b754:	4b25      	ldr	r3, [pc, #148]	; (800b7ec <prvHeapInit+0xa4>)
 800b756:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f003 0307 	and.w	r3, r3, #7
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00c      	beq.n	800b77c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	3307      	adds	r3, #7
 800b766:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f023 0307 	bic.w	r3, r3, #7
 800b76e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	4a1d      	ldr	r2, [pc, #116]	; (800b7ec <prvHeapInit+0xa4>)
 800b778:	4413      	add	r3, r2
 800b77a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b780:	4a1b      	ldr	r2, [pc, #108]	; (800b7f0 <prvHeapInit+0xa8>)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800b786:	4b1a      	ldr	r3, [pc, #104]	; (800b7f0 <prvHeapInit+0xa8>)
 800b788:	2200      	movs	r2, #0
 800b78a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	4413      	add	r3, r2
 800b792:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800b794:	2208      	movs	r2, #8
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	1a9b      	subs	r3, r3, r2
 800b79a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f023 0307 	bic.w	r3, r3, #7
 800b7a2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	4a13      	ldr	r2, [pc, #76]	; (800b7f4 <prvHeapInit+0xac>)
 800b7a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800b7aa:	4b12      	ldr	r3, [pc, #72]	; (800b7f4 <prvHeapInit+0xac>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800b7b2:	4b10      	ldr	r3, [pc, #64]	; (800b7f4 <prvHeapInit+0xac>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	1ad2      	subs	r2, r2, r3
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <prvHeapInit+0xac>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	4a08      	ldr	r2, [pc, #32]	; (800b7f8 <prvHeapInit+0xb0>)
 800b7d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	4a07      	ldr	r2, [pc, #28]	; (800b7fc <prvHeapInit+0xb4>)
 800b7de:	6013      	str	r3, [r2, #0]
}
 800b7e0:	bf00      	nop
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	20000aa8 	.word	0x20000aa8
 800b7f0:	200136a8 	.word	0x200136a8
 800b7f4:	200136b0 	.word	0x200136b0
 800b7f8:	200136b8 	.word	0x200136b8
 800b7fc:	200136b4 	.word	0x200136b4

0800b800 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b808:	4b28      	ldr	r3, [pc, #160]	; (800b8ac <prvInsertBlockIntoFreeList+0xac>)
 800b80a:	60fb      	str	r3, [r7, #12]
 800b80c:	e002      	b.n	800b814 <prvInsertBlockIntoFreeList+0x14>
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d8f7      	bhi.n	800b80e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	4413      	add	r3, r2
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d108      	bne.n	800b842 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	441a      	add	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	441a      	add	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	429a      	cmp	r2, r3
 800b854:	d118      	bne.n	800b888 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	4b15      	ldr	r3, [pc, #84]	; (800b8b0 <prvInsertBlockIntoFreeList+0xb0>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d00d      	beq.n	800b87e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	441a      	add	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	e008      	b.n	800b890 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b87e:	4b0c      	ldr	r3, [pc, #48]	; (800b8b0 <prvInsertBlockIntoFreeList+0xb0>)
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	601a      	str	r2, [r3, #0]
 800b886:	e003      	b.n	800b890 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	429a      	cmp	r2, r3
 800b896:	d002      	beq.n	800b89e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b89e:	bf00      	nop
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	200136a8 	.word	0x200136a8
 800b8b0:	200136b0 	.word	0x200136b0

0800b8b4 <malloc>:
 800b8b4:	4b02      	ldr	r3, [pc, #8]	; (800b8c0 <malloc+0xc>)
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	6818      	ldr	r0, [r3, #0]
 800b8ba:	f000 b82b 	b.w	800b914 <_malloc_r>
 800b8be:	bf00      	nop
 800b8c0:	2000008c 	.word	0x2000008c

0800b8c4 <free>:
 800b8c4:	4b02      	ldr	r3, [pc, #8]	; (800b8d0 <free+0xc>)
 800b8c6:	4601      	mov	r1, r0
 800b8c8:	6818      	ldr	r0, [r3, #0]
 800b8ca:	f000 bb11 	b.w	800bef0 <_free_r>
 800b8ce:	bf00      	nop
 800b8d0:	2000008c 	.word	0x2000008c

0800b8d4 <sbrk_aligned>:
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	4e0e      	ldr	r6, [pc, #56]	; (800b910 <sbrk_aligned+0x3c>)
 800b8d8:	460c      	mov	r4, r1
 800b8da:	6831      	ldr	r1, [r6, #0]
 800b8dc:	4605      	mov	r5, r0
 800b8de:	b911      	cbnz	r1, 800b8e6 <sbrk_aligned+0x12>
 800b8e0:	f000 fa8c 	bl	800bdfc <_sbrk_r>
 800b8e4:	6030      	str	r0, [r6, #0]
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	f000 fa87 	bl	800bdfc <_sbrk_r>
 800b8ee:	1c43      	adds	r3, r0, #1
 800b8f0:	d00a      	beq.n	800b908 <sbrk_aligned+0x34>
 800b8f2:	1cc4      	adds	r4, r0, #3
 800b8f4:	f024 0403 	bic.w	r4, r4, #3
 800b8f8:	42a0      	cmp	r0, r4
 800b8fa:	d007      	beq.n	800b90c <sbrk_aligned+0x38>
 800b8fc:	1a21      	subs	r1, r4, r0
 800b8fe:	4628      	mov	r0, r5
 800b900:	f000 fa7c 	bl	800bdfc <_sbrk_r>
 800b904:	3001      	adds	r0, #1
 800b906:	d101      	bne.n	800b90c <sbrk_aligned+0x38>
 800b908:	f04f 34ff 	mov.w	r4, #4294967295
 800b90c:	4620      	mov	r0, r4
 800b90e:	bd70      	pop	{r4, r5, r6, pc}
 800b910:	200136c8 	.word	0x200136c8

0800b914 <_malloc_r>:
 800b914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b918:	1ccd      	adds	r5, r1, #3
 800b91a:	f025 0503 	bic.w	r5, r5, #3
 800b91e:	3508      	adds	r5, #8
 800b920:	2d0c      	cmp	r5, #12
 800b922:	bf38      	it	cc
 800b924:	250c      	movcc	r5, #12
 800b926:	2d00      	cmp	r5, #0
 800b928:	4607      	mov	r7, r0
 800b92a:	db01      	blt.n	800b930 <_malloc_r+0x1c>
 800b92c:	42a9      	cmp	r1, r5
 800b92e:	d905      	bls.n	800b93c <_malloc_r+0x28>
 800b930:	230c      	movs	r3, #12
 800b932:	603b      	str	r3, [r7, #0]
 800b934:	2600      	movs	r6, #0
 800b936:	4630      	mov	r0, r6
 800b938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b93c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba10 <_malloc_r+0xfc>
 800b940:	f000 f868 	bl	800ba14 <__malloc_lock>
 800b944:	f8d8 3000 	ldr.w	r3, [r8]
 800b948:	461c      	mov	r4, r3
 800b94a:	bb5c      	cbnz	r4, 800b9a4 <_malloc_r+0x90>
 800b94c:	4629      	mov	r1, r5
 800b94e:	4638      	mov	r0, r7
 800b950:	f7ff ffc0 	bl	800b8d4 <sbrk_aligned>
 800b954:	1c43      	adds	r3, r0, #1
 800b956:	4604      	mov	r4, r0
 800b958:	d155      	bne.n	800ba06 <_malloc_r+0xf2>
 800b95a:	f8d8 4000 	ldr.w	r4, [r8]
 800b95e:	4626      	mov	r6, r4
 800b960:	2e00      	cmp	r6, #0
 800b962:	d145      	bne.n	800b9f0 <_malloc_r+0xdc>
 800b964:	2c00      	cmp	r4, #0
 800b966:	d048      	beq.n	800b9fa <_malloc_r+0xe6>
 800b968:	6823      	ldr	r3, [r4, #0]
 800b96a:	4631      	mov	r1, r6
 800b96c:	4638      	mov	r0, r7
 800b96e:	eb04 0903 	add.w	r9, r4, r3
 800b972:	f000 fa43 	bl	800bdfc <_sbrk_r>
 800b976:	4581      	cmp	r9, r0
 800b978:	d13f      	bne.n	800b9fa <_malloc_r+0xe6>
 800b97a:	6821      	ldr	r1, [r4, #0]
 800b97c:	1a6d      	subs	r5, r5, r1
 800b97e:	4629      	mov	r1, r5
 800b980:	4638      	mov	r0, r7
 800b982:	f7ff ffa7 	bl	800b8d4 <sbrk_aligned>
 800b986:	3001      	adds	r0, #1
 800b988:	d037      	beq.n	800b9fa <_malloc_r+0xe6>
 800b98a:	6823      	ldr	r3, [r4, #0]
 800b98c:	442b      	add	r3, r5
 800b98e:	6023      	str	r3, [r4, #0]
 800b990:	f8d8 3000 	ldr.w	r3, [r8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d038      	beq.n	800ba0a <_malloc_r+0xf6>
 800b998:	685a      	ldr	r2, [r3, #4]
 800b99a:	42a2      	cmp	r2, r4
 800b99c:	d12b      	bne.n	800b9f6 <_malloc_r+0xe2>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	605a      	str	r2, [r3, #4]
 800b9a2:	e00f      	b.n	800b9c4 <_malloc_r+0xb0>
 800b9a4:	6822      	ldr	r2, [r4, #0]
 800b9a6:	1b52      	subs	r2, r2, r5
 800b9a8:	d41f      	bmi.n	800b9ea <_malloc_r+0xd6>
 800b9aa:	2a0b      	cmp	r2, #11
 800b9ac:	d917      	bls.n	800b9de <_malloc_r+0xca>
 800b9ae:	1961      	adds	r1, r4, r5
 800b9b0:	42a3      	cmp	r3, r4
 800b9b2:	6025      	str	r5, [r4, #0]
 800b9b4:	bf18      	it	ne
 800b9b6:	6059      	strne	r1, [r3, #4]
 800b9b8:	6863      	ldr	r3, [r4, #4]
 800b9ba:	bf08      	it	eq
 800b9bc:	f8c8 1000 	streq.w	r1, [r8]
 800b9c0:	5162      	str	r2, [r4, r5]
 800b9c2:	604b      	str	r3, [r1, #4]
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f104 060b 	add.w	r6, r4, #11
 800b9ca:	f000 f829 	bl	800ba20 <__malloc_unlock>
 800b9ce:	f026 0607 	bic.w	r6, r6, #7
 800b9d2:	1d23      	adds	r3, r4, #4
 800b9d4:	1af2      	subs	r2, r6, r3
 800b9d6:	d0ae      	beq.n	800b936 <_malloc_r+0x22>
 800b9d8:	1b9b      	subs	r3, r3, r6
 800b9da:	50a3      	str	r3, [r4, r2]
 800b9dc:	e7ab      	b.n	800b936 <_malloc_r+0x22>
 800b9de:	42a3      	cmp	r3, r4
 800b9e0:	6862      	ldr	r2, [r4, #4]
 800b9e2:	d1dd      	bne.n	800b9a0 <_malloc_r+0x8c>
 800b9e4:	f8c8 2000 	str.w	r2, [r8]
 800b9e8:	e7ec      	b.n	800b9c4 <_malloc_r+0xb0>
 800b9ea:	4623      	mov	r3, r4
 800b9ec:	6864      	ldr	r4, [r4, #4]
 800b9ee:	e7ac      	b.n	800b94a <_malloc_r+0x36>
 800b9f0:	4634      	mov	r4, r6
 800b9f2:	6876      	ldr	r6, [r6, #4]
 800b9f4:	e7b4      	b.n	800b960 <_malloc_r+0x4c>
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	e7cc      	b.n	800b994 <_malloc_r+0x80>
 800b9fa:	230c      	movs	r3, #12
 800b9fc:	603b      	str	r3, [r7, #0]
 800b9fe:	4638      	mov	r0, r7
 800ba00:	f000 f80e 	bl	800ba20 <__malloc_unlock>
 800ba04:	e797      	b.n	800b936 <_malloc_r+0x22>
 800ba06:	6025      	str	r5, [r4, #0]
 800ba08:	e7dc      	b.n	800b9c4 <_malloc_r+0xb0>
 800ba0a:	605b      	str	r3, [r3, #4]
 800ba0c:	deff      	udf	#255	; 0xff
 800ba0e:	bf00      	nop
 800ba10:	200136c4 	.word	0x200136c4

0800ba14 <__malloc_lock>:
 800ba14:	4801      	ldr	r0, [pc, #4]	; (800ba1c <__malloc_lock+0x8>)
 800ba16:	f000 ba3d 	b.w	800be94 <__retarget_lock_acquire_recursive>
 800ba1a:	bf00      	nop
 800ba1c:	2001380c 	.word	0x2001380c

0800ba20 <__malloc_unlock>:
 800ba20:	4801      	ldr	r0, [pc, #4]	; (800ba28 <__malloc_unlock+0x8>)
 800ba22:	f000 ba38 	b.w	800be96 <__retarget_lock_release_recursive>
 800ba26:	bf00      	nop
 800ba28:	2001380c 	.word	0x2001380c

0800ba2c <srand>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4b10      	ldr	r3, [pc, #64]	; (800ba70 <srand+0x44>)
 800ba30:	681d      	ldr	r5, [r3, #0]
 800ba32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ba34:	4604      	mov	r4, r0
 800ba36:	b9b3      	cbnz	r3, 800ba66 <srand+0x3a>
 800ba38:	2018      	movs	r0, #24
 800ba3a:	f7ff ff3b 	bl	800b8b4 <malloc>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	6328      	str	r0, [r5, #48]	; 0x30
 800ba42:	b920      	cbnz	r0, 800ba4e <srand+0x22>
 800ba44:	4b0b      	ldr	r3, [pc, #44]	; (800ba74 <srand+0x48>)
 800ba46:	480c      	ldr	r0, [pc, #48]	; (800ba78 <srand+0x4c>)
 800ba48:	2146      	movs	r1, #70	; 0x46
 800ba4a:	f000 fa33 	bl	800beb4 <__assert_func>
 800ba4e:	490b      	ldr	r1, [pc, #44]	; (800ba7c <srand+0x50>)
 800ba50:	4b0b      	ldr	r3, [pc, #44]	; (800ba80 <srand+0x54>)
 800ba52:	e9c0 1300 	strd	r1, r3, [r0]
 800ba56:	4b0b      	ldr	r3, [pc, #44]	; (800ba84 <srand+0x58>)
 800ba58:	6083      	str	r3, [r0, #8]
 800ba5a:	230b      	movs	r3, #11
 800ba5c:	8183      	strh	r3, [r0, #12]
 800ba5e:	2100      	movs	r1, #0
 800ba60:	2001      	movs	r0, #1
 800ba62:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ba66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ba68:	2200      	movs	r2, #0
 800ba6a:	611c      	str	r4, [r3, #16]
 800ba6c:	615a      	str	r2, [r3, #20]
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}
 800ba70:	2000008c 	.word	0x2000008c
 800ba74:	0800ce38 	.word	0x0800ce38
 800ba78:	0800ce4f 	.word	0x0800ce4f
 800ba7c:	abcd330e 	.word	0xabcd330e
 800ba80:	e66d1234 	.word	0xe66d1234
 800ba84:	0005deec 	.word	0x0005deec

0800ba88 <rand>:
 800ba88:	4b16      	ldr	r3, [pc, #88]	; (800bae4 <rand+0x5c>)
 800ba8a:	b510      	push	{r4, lr}
 800ba8c:	681c      	ldr	r4, [r3, #0]
 800ba8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ba90:	b9b3      	cbnz	r3, 800bac0 <rand+0x38>
 800ba92:	2018      	movs	r0, #24
 800ba94:	f7ff ff0e 	bl	800b8b4 <malloc>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	6320      	str	r0, [r4, #48]	; 0x30
 800ba9c:	b920      	cbnz	r0, 800baa8 <rand+0x20>
 800ba9e:	4b12      	ldr	r3, [pc, #72]	; (800bae8 <rand+0x60>)
 800baa0:	4812      	ldr	r0, [pc, #72]	; (800baec <rand+0x64>)
 800baa2:	2152      	movs	r1, #82	; 0x52
 800baa4:	f000 fa06 	bl	800beb4 <__assert_func>
 800baa8:	4911      	ldr	r1, [pc, #68]	; (800baf0 <rand+0x68>)
 800baaa:	4b12      	ldr	r3, [pc, #72]	; (800baf4 <rand+0x6c>)
 800baac:	e9c0 1300 	strd	r1, r3, [r0]
 800bab0:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <rand+0x70>)
 800bab2:	6083      	str	r3, [r0, #8]
 800bab4:	230b      	movs	r3, #11
 800bab6:	8183      	strh	r3, [r0, #12]
 800bab8:	2100      	movs	r1, #0
 800baba:	2001      	movs	r0, #1
 800babc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bac0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bac2:	480e      	ldr	r0, [pc, #56]	; (800bafc <rand+0x74>)
 800bac4:	690b      	ldr	r3, [r1, #16]
 800bac6:	694c      	ldr	r4, [r1, #20]
 800bac8:	4a0d      	ldr	r2, [pc, #52]	; (800bb00 <rand+0x78>)
 800baca:	4358      	muls	r0, r3
 800bacc:	fb02 0004 	mla	r0, r2, r4, r0
 800bad0:	fba3 3202 	umull	r3, r2, r3, r2
 800bad4:	3301      	adds	r3, #1
 800bad6:	eb40 0002 	adc.w	r0, r0, r2
 800bada:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bade:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bae2:	bd10      	pop	{r4, pc}
 800bae4:	2000008c 	.word	0x2000008c
 800bae8:	0800ce38 	.word	0x0800ce38
 800baec:	0800ce4f 	.word	0x0800ce4f
 800baf0:	abcd330e 	.word	0xabcd330e
 800baf4:	e66d1234 	.word	0xe66d1234
 800baf8:	0005deec 	.word	0x0005deec
 800bafc:	5851f42d 	.word	0x5851f42d
 800bb00:	4c957f2d 	.word	0x4c957f2d

0800bb04 <std>:
 800bb04:	2300      	movs	r3, #0
 800bb06:	b510      	push	{r4, lr}
 800bb08:	4604      	mov	r4, r0
 800bb0a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb12:	6083      	str	r3, [r0, #8]
 800bb14:	8181      	strh	r1, [r0, #12]
 800bb16:	6643      	str	r3, [r0, #100]	; 0x64
 800bb18:	81c2      	strh	r2, [r0, #14]
 800bb1a:	6183      	str	r3, [r0, #24]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	2208      	movs	r2, #8
 800bb20:	305c      	adds	r0, #92	; 0x5c
 800bb22:	f000 f902 	bl	800bd2a <memset>
 800bb26:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <std+0x38>)
 800bb28:	6263      	str	r3, [r4, #36]	; 0x24
 800bb2a:	4b05      	ldr	r3, [pc, #20]	; (800bb40 <std+0x3c>)
 800bb2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb2e:	4b05      	ldr	r3, [pc, #20]	; (800bb44 <std+0x40>)
 800bb30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <std+0x44>)
 800bb34:	6224      	str	r4, [r4, #32]
 800bb36:	6323      	str	r3, [r4, #48]	; 0x30
 800bb38:	bd10      	pop	{r4, pc}
 800bb3a:	bf00      	nop
 800bb3c:	0800bca5 	.word	0x0800bca5
 800bb40:	0800bcc7 	.word	0x0800bcc7
 800bb44:	0800bcff 	.word	0x0800bcff
 800bb48:	0800bd23 	.word	0x0800bd23

0800bb4c <stdio_exit_handler>:
 800bb4c:	4a02      	ldr	r2, [pc, #8]	; (800bb58 <stdio_exit_handler+0xc>)
 800bb4e:	4903      	ldr	r1, [pc, #12]	; (800bb5c <stdio_exit_handler+0x10>)
 800bb50:	4803      	ldr	r0, [pc, #12]	; (800bb60 <stdio_exit_handler+0x14>)
 800bb52:	f000 b869 	b.w	800bc28 <_fwalk_sglue>
 800bb56:	bf00      	nop
 800bb58:	20000034 	.word	0x20000034
 800bb5c:	0800c665 	.word	0x0800c665
 800bb60:	20000040 	.word	0x20000040

0800bb64 <cleanup_stdio>:
 800bb64:	6841      	ldr	r1, [r0, #4]
 800bb66:	4b0c      	ldr	r3, [pc, #48]	; (800bb98 <cleanup_stdio+0x34>)
 800bb68:	4299      	cmp	r1, r3
 800bb6a:	b510      	push	{r4, lr}
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	d001      	beq.n	800bb74 <cleanup_stdio+0x10>
 800bb70:	f000 fd78 	bl	800c664 <_fflush_r>
 800bb74:	68a1      	ldr	r1, [r4, #8]
 800bb76:	4b09      	ldr	r3, [pc, #36]	; (800bb9c <cleanup_stdio+0x38>)
 800bb78:	4299      	cmp	r1, r3
 800bb7a:	d002      	beq.n	800bb82 <cleanup_stdio+0x1e>
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 fd71 	bl	800c664 <_fflush_r>
 800bb82:	68e1      	ldr	r1, [r4, #12]
 800bb84:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <cleanup_stdio+0x3c>)
 800bb86:	4299      	cmp	r1, r3
 800bb88:	d004      	beq.n	800bb94 <cleanup_stdio+0x30>
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb90:	f000 bd68 	b.w	800c664 <_fflush_r>
 800bb94:	bd10      	pop	{r4, pc}
 800bb96:	bf00      	nop
 800bb98:	200136cc 	.word	0x200136cc
 800bb9c:	20013734 	.word	0x20013734
 800bba0:	2001379c 	.word	0x2001379c

0800bba4 <global_stdio_init.part.0>:
 800bba4:	b510      	push	{r4, lr}
 800bba6:	4b0b      	ldr	r3, [pc, #44]	; (800bbd4 <global_stdio_init.part.0+0x30>)
 800bba8:	4c0b      	ldr	r4, [pc, #44]	; (800bbd8 <global_stdio_init.part.0+0x34>)
 800bbaa:	4a0c      	ldr	r2, [pc, #48]	; (800bbdc <global_stdio_init.part.0+0x38>)
 800bbac:	601a      	str	r2, [r3, #0]
 800bbae:	4620      	mov	r0, r4
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	2104      	movs	r1, #4
 800bbb4:	f7ff ffa6 	bl	800bb04 <std>
 800bbb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	2109      	movs	r1, #9
 800bbc0:	f7ff ffa0 	bl	800bb04 <std>
 800bbc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bbc8:	2202      	movs	r2, #2
 800bbca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbce:	2112      	movs	r1, #18
 800bbd0:	f7ff bf98 	b.w	800bb04 <std>
 800bbd4:	20013804 	.word	0x20013804
 800bbd8:	200136cc 	.word	0x200136cc
 800bbdc:	0800bb4d 	.word	0x0800bb4d

0800bbe0 <__sfp_lock_acquire>:
 800bbe0:	4801      	ldr	r0, [pc, #4]	; (800bbe8 <__sfp_lock_acquire+0x8>)
 800bbe2:	f000 b957 	b.w	800be94 <__retarget_lock_acquire_recursive>
 800bbe6:	bf00      	nop
 800bbe8:	2001380d 	.word	0x2001380d

0800bbec <__sfp_lock_release>:
 800bbec:	4801      	ldr	r0, [pc, #4]	; (800bbf4 <__sfp_lock_release+0x8>)
 800bbee:	f000 b952 	b.w	800be96 <__retarget_lock_release_recursive>
 800bbf2:	bf00      	nop
 800bbf4:	2001380d 	.word	0x2001380d

0800bbf8 <__sinit>:
 800bbf8:	b510      	push	{r4, lr}
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	f7ff fff0 	bl	800bbe0 <__sfp_lock_acquire>
 800bc00:	6a23      	ldr	r3, [r4, #32]
 800bc02:	b11b      	cbz	r3, 800bc0c <__sinit+0x14>
 800bc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc08:	f7ff bff0 	b.w	800bbec <__sfp_lock_release>
 800bc0c:	4b04      	ldr	r3, [pc, #16]	; (800bc20 <__sinit+0x28>)
 800bc0e:	6223      	str	r3, [r4, #32]
 800bc10:	4b04      	ldr	r3, [pc, #16]	; (800bc24 <__sinit+0x2c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1f5      	bne.n	800bc04 <__sinit+0xc>
 800bc18:	f7ff ffc4 	bl	800bba4 <global_stdio_init.part.0>
 800bc1c:	e7f2      	b.n	800bc04 <__sinit+0xc>
 800bc1e:	bf00      	nop
 800bc20:	0800bb65 	.word	0x0800bb65
 800bc24:	20013804 	.word	0x20013804

0800bc28 <_fwalk_sglue>:
 800bc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc2c:	4607      	mov	r7, r0
 800bc2e:	4688      	mov	r8, r1
 800bc30:	4614      	mov	r4, r2
 800bc32:	2600      	movs	r6, #0
 800bc34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc38:	f1b9 0901 	subs.w	r9, r9, #1
 800bc3c:	d505      	bpl.n	800bc4a <_fwalk_sglue+0x22>
 800bc3e:	6824      	ldr	r4, [r4, #0]
 800bc40:	2c00      	cmp	r4, #0
 800bc42:	d1f7      	bne.n	800bc34 <_fwalk_sglue+0xc>
 800bc44:	4630      	mov	r0, r6
 800bc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d907      	bls.n	800bc60 <_fwalk_sglue+0x38>
 800bc50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc54:	3301      	adds	r3, #1
 800bc56:	d003      	beq.n	800bc60 <_fwalk_sglue+0x38>
 800bc58:	4629      	mov	r1, r5
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	47c0      	blx	r8
 800bc5e:	4306      	orrs	r6, r0
 800bc60:	3568      	adds	r5, #104	; 0x68
 800bc62:	e7e9      	b.n	800bc38 <_fwalk_sglue+0x10>

0800bc64 <siprintf>:
 800bc64:	b40e      	push	{r1, r2, r3}
 800bc66:	b500      	push	{lr}
 800bc68:	b09c      	sub	sp, #112	; 0x70
 800bc6a:	ab1d      	add	r3, sp, #116	; 0x74
 800bc6c:	9002      	str	r0, [sp, #8]
 800bc6e:	9006      	str	r0, [sp, #24]
 800bc70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc74:	4809      	ldr	r0, [pc, #36]	; (800bc9c <siprintf+0x38>)
 800bc76:	9107      	str	r1, [sp, #28]
 800bc78:	9104      	str	r1, [sp, #16]
 800bc7a:	4909      	ldr	r1, [pc, #36]	; (800bca0 <siprintf+0x3c>)
 800bc7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc80:	9105      	str	r1, [sp, #20]
 800bc82:	6800      	ldr	r0, [r0, #0]
 800bc84:	9301      	str	r3, [sp, #4]
 800bc86:	a902      	add	r1, sp, #8
 800bc88:	f000 f9d8 	bl	800c03c <_svfiprintf_r>
 800bc8c:	9b02      	ldr	r3, [sp, #8]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	701a      	strb	r2, [r3, #0]
 800bc92:	b01c      	add	sp, #112	; 0x70
 800bc94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc98:	b003      	add	sp, #12
 800bc9a:	4770      	bx	lr
 800bc9c:	2000008c 	.word	0x2000008c
 800bca0:	ffff0208 	.word	0xffff0208

0800bca4 <__sread>:
 800bca4:	b510      	push	{r4, lr}
 800bca6:	460c      	mov	r4, r1
 800bca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcac:	f000 f894 	bl	800bdd8 <_read_r>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	bfab      	itete	ge
 800bcb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcb6:	89a3      	ldrhlt	r3, [r4, #12]
 800bcb8:	181b      	addge	r3, r3, r0
 800bcba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcbe:	bfac      	ite	ge
 800bcc0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcc2:	81a3      	strhlt	r3, [r4, #12]
 800bcc4:	bd10      	pop	{r4, pc}

0800bcc6 <__swrite>:
 800bcc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcca:	461f      	mov	r7, r3
 800bccc:	898b      	ldrh	r3, [r1, #12]
 800bcce:	05db      	lsls	r3, r3, #23
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	4616      	mov	r6, r2
 800bcd6:	d505      	bpl.n	800bce4 <__swrite+0x1e>
 800bcd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcdc:	2302      	movs	r3, #2
 800bcde:	2200      	movs	r2, #0
 800bce0:	f000 f868 	bl	800bdb4 <_lseek_r>
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcee:	81a3      	strh	r3, [r4, #12]
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfa:	f000 b88f 	b.w	800be1c <_write_r>

0800bcfe <__sseek>:
 800bcfe:	b510      	push	{r4, lr}
 800bd00:	460c      	mov	r4, r1
 800bd02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd06:	f000 f855 	bl	800bdb4 <_lseek_r>
 800bd0a:	1c43      	adds	r3, r0, #1
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	bf15      	itete	ne
 800bd10:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd1a:	81a3      	strheq	r3, [r4, #12]
 800bd1c:	bf18      	it	ne
 800bd1e:	81a3      	strhne	r3, [r4, #12]
 800bd20:	bd10      	pop	{r4, pc}

0800bd22 <__sclose>:
 800bd22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd26:	f000 b823 	b.w	800bd70 <_close_r>

0800bd2a <memset>:
 800bd2a:	4402      	add	r2, r0
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d100      	bne.n	800bd34 <memset+0xa>
 800bd32:	4770      	bx	lr
 800bd34:	f803 1b01 	strb.w	r1, [r3], #1
 800bd38:	e7f9      	b.n	800bd2e <memset+0x4>
	...

0800bd3c <time>:
 800bd3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd3e:	4b0b      	ldr	r3, [pc, #44]	; (800bd6c <time+0x30>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	4669      	mov	r1, sp
 800bd44:	4604      	mov	r4, r0
 800bd46:	6818      	ldr	r0, [r3, #0]
 800bd48:	f000 f822 	bl	800bd90 <_gettimeofday_r>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	bfbe      	ittt	lt
 800bd50:	f04f 32ff 	movlt.w	r2, #4294967295
 800bd54:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd58:	e9cd 2300 	strdlt	r2, r3, [sp]
 800bd5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd60:	b10c      	cbz	r4, 800bd66 <time+0x2a>
 800bd62:	e9c4 0100 	strd	r0, r1, [r4]
 800bd66:	b004      	add	sp, #16
 800bd68:	bd10      	pop	{r4, pc}
 800bd6a:	bf00      	nop
 800bd6c:	2000008c 	.word	0x2000008c

0800bd70 <_close_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d06      	ldr	r5, [pc, #24]	; (800bd8c <_close_r+0x1c>)
 800bd74:	2300      	movs	r3, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	602b      	str	r3, [r5, #0]
 800bd7c:	f7f5 f9ad 	bl	80010da <_close>
 800bd80:	1c43      	adds	r3, r0, #1
 800bd82:	d102      	bne.n	800bd8a <_close_r+0x1a>
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	b103      	cbz	r3, 800bd8a <_close_r+0x1a>
 800bd88:	6023      	str	r3, [r4, #0]
 800bd8a:	bd38      	pop	{r3, r4, r5, pc}
 800bd8c:	20013808 	.word	0x20013808

0800bd90 <_gettimeofday_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d07      	ldr	r5, [pc, #28]	; (800bdb0 <_gettimeofday_r+0x20>)
 800bd94:	2300      	movs	r3, #0
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	602b      	str	r3, [r5, #0]
 800bd9e:	f000 ff95 	bl	800cccc <_gettimeofday>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	d102      	bne.n	800bdac <_gettimeofday_r+0x1c>
 800bda6:	682b      	ldr	r3, [r5, #0]
 800bda8:	b103      	cbz	r3, 800bdac <_gettimeofday_r+0x1c>
 800bdaa:	6023      	str	r3, [r4, #0]
 800bdac:	bd38      	pop	{r3, r4, r5, pc}
 800bdae:	bf00      	nop
 800bdb0:	20013808 	.word	0x20013808

0800bdb4 <_lseek_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4d07      	ldr	r5, [pc, #28]	; (800bdd4 <_lseek_r+0x20>)
 800bdb8:	4604      	mov	r4, r0
 800bdba:	4608      	mov	r0, r1
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	602a      	str	r2, [r5, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f7f5 f9b0 	bl	8001128 <_lseek>
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d102      	bne.n	800bdd2 <_lseek_r+0x1e>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	b103      	cbz	r3, 800bdd2 <_lseek_r+0x1e>
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	20013808 	.word	0x20013808

0800bdd8 <_read_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4d07      	ldr	r5, [pc, #28]	; (800bdf8 <_read_r+0x20>)
 800bddc:	4604      	mov	r4, r0
 800bdde:	4608      	mov	r0, r1
 800bde0:	4611      	mov	r1, r2
 800bde2:	2200      	movs	r2, #0
 800bde4:	602a      	str	r2, [r5, #0]
 800bde6:	461a      	mov	r2, r3
 800bde8:	f7f5 f93e 	bl	8001068 <_read>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	d102      	bne.n	800bdf6 <_read_r+0x1e>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	b103      	cbz	r3, 800bdf6 <_read_r+0x1e>
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	20013808 	.word	0x20013808

0800bdfc <_sbrk_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d06      	ldr	r5, [pc, #24]	; (800be18 <_sbrk_r+0x1c>)
 800be00:	2300      	movs	r3, #0
 800be02:	4604      	mov	r4, r0
 800be04:	4608      	mov	r0, r1
 800be06:	602b      	str	r3, [r5, #0]
 800be08:	f7f5 f99c 	bl	8001144 <_sbrk>
 800be0c:	1c43      	adds	r3, r0, #1
 800be0e:	d102      	bne.n	800be16 <_sbrk_r+0x1a>
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	b103      	cbz	r3, 800be16 <_sbrk_r+0x1a>
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	bd38      	pop	{r3, r4, r5, pc}
 800be18:	20013808 	.word	0x20013808

0800be1c <_write_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	4d07      	ldr	r5, [pc, #28]	; (800be3c <_write_r+0x20>)
 800be20:	4604      	mov	r4, r0
 800be22:	4608      	mov	r0, r1
 800be24:	4611      	mov	r1, r2
 800be26:	2200      	movs	r2, #0
 800be28:	602a      	str	r2, [r5, #0]
 800be2a:	461a      	mov	r2, r3
 800be2c:	f7f5 f939 	bl	80010a2 <_write>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_write_r+0x1e>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_write_r+0x1e>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	20013808 	.word	0x20013808

0800be40 <__errno>:
 800be40:	4b01      	ldr	r3, [pc, #4]	; (800be48 <__errno+0x8>)
 800be42:	6818      	ldr	r0, [r3, #0]
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	2000008c 	.word	0x2000008c

0800be4c <__libc_init_array>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	4d0d      	ldr	r5, [pc, #52]	; (800be84 <__libc_init_array+0x38>)
 800be50:	4c0d      	ldr	r4, [pc, #52]	; (800be88 <__libc_init_array+0x3c>)
 800be52:	1b64      	subs	r4, r4, r5
 800be54:	10a4      	asrs	r4, r4, #2
 800be56:	2600      	movs	r6, #0
 800be58:	42a6      	cmp	r6, r4
 800be5a:	d109      	bne.n	800be70 <__libc_init_array+0x24>
 800be5c:	4d0b      	ldr	r5, [pc, #44]	; (800be8c <__libc_init_array+0x40>)
 800be5e:	4c0c      	ldr	r4, [pc, #48]	; (800be90 <__libc_init_array+0x44>)
 800be60:	f000 ff3c 	bl	800ccdc <_init>
 800be64:	1b64      	subs	r4, r4, r5
 800be66:	10a4      	asrs	r4, r4, #2
 800be68:	2600      	movs	r6, #0
 800be6a:	42a6      	cmp	r6, r4
 800be6c:	d105      	bne.n	800be7a <__libc_init_array+0x2e>
 800be6e:	bd70      	pop	{r4, r5, r6, pc}
 800be70:	f855 3b04 	ldr.w	r3, [r5], #4
 800be74:	4798      	blx	r3
 800be76:	3601      	adds	r6, #1
 800be78:	e7ee      	b.n	800be58 <__libc_init_array+0xc>
 800be7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be7e:	4798      	blx	r3
 800be80:	3601      	adds	r6, #1
 800be82:	e7f2      	b.n	800be6a <__libc_init_array+0x1e>
 800be84:	0800cf20 	.word	0x0800cf20
 800be88:	0800cf20 	.word	0x0800cf20
 800be8c:	0800cf20 	.word	0x0800cf20
 800be90:	0800cf24 	.word	0x0800cf24

0800be94 <__retarget_lock_acquire_recursive>:
 800be94:	4770      	bx	lr

0800be96 <__retarget_lock_release_recursive>:
 800be96:	4770      	bx	lr

0800be98 <memcpy>:
 800be98:	440a      	add	r2, r1
 800be9a:	4291      	cmp	r1, r2
 800be9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bea0:	d100      	bne.n	800bea4 <memcpy+0xc>
 800bea2:	4770      	bx	lr
 800bea4:	b510      	push	{r4, lr}
 800bea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beae:	4291      	cmp	r1, r2
 800beb0:	d1f9      	bne.n	800bea6 <memcpy+0xe>
 800beb2:	bd10      	pop	{r4, pc}

0800beb4 <__assert_func>:
 800beb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800beb6:	4614      	mov	r4, r2
 800beb8:	461a      	mov	r2, r3
 800beba:	4b09      	ldr	r3, [pc, #36]	; (800bee0 <__assert_func+0x2c>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4605      	mov	r5, r0
 800bec0:	68d8      	ldr	r0, [r3, #12]
 800bec2:	b14c      	cbz	r4, 800bed8 <__assert_func+0x24>
 800bec4:	4b07      	ldr	r3, [pc, #28]	; (800bee4 <__assert_func+0x30>)
 800bec6:	9100      	str	r1, [sp, #0]
 800bec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800becc:	4906      	ldr	r1, [pc, #24]	; (800bee8 <__assert_func+0x34>)
 800bece:	462b      	mov	r3, r5
 800bed0:	f000 fbf0 	bl	800c6b4 <fiprintf>
 800bed4:	f000 fc1a 	bl	800c70c <abort>
 800bed8:	4b04      	ldr	r3, [pc, #16]	; (800beec <__assert_func+0x38>)
 800beda:	461c      	mov	r4, r3
 800bedc:	e7f3      	b.n	800bec6 <__assert_func+0x12>
 800bede:	bf00      	nop
 800bee0:	2000008c 	.word	0x2000008c
 800bee4:	0800cea7 	.word	0x0800cea7
 800bee8:	0800ceb4 	.word	0x0800ceb4
 800beec:	0800cee2 	.word	0x0800cee2

0800bef0 <_free_r>:
 800bef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bef2:	2900      	cmp	r1, #0
 800bef4:	d044      	beq.n	800bf80 <_free_r+0x90>
 800bef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800befa:	9001      	str	r0, [sp, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	f1a1 0404 	sub.w	r4, r1, #4
 800bf02:	bfb8      	it	lt
 800bf04:	18e4      	addlt	r4, r4, r3
 800bf06:	f7ff fd85 	bl	800ba14 <__malloc_lock>
 800bf0a:	4a1e      	ldr	r2, [pc, #120]	; (800bf84 <_free_r+0x94>)
 800bf0c:	9801      	ldr	r0, [sp, #4]
 800bf0e:	6813      	ldr	r3, [r2, #0]
 800bf10:	b933      	cbnz	r3, 800bf20 <_free_r+0x30>
 800bf12:	6063      	str	r3, [r4, #4]
 800bf14:	6014      	str	r4, [r2, #0]
 800bf16:	b003      	add	sp, #12
 800bf18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf1c:	f7ff bd80 	b.w	800ba20 <__malloc_unlock>
 800bf20:	42a3      	cmp	r3, r4
 800bf22:	d908      	bls.n	800bf36 <_free_r+0x46>
 800bf24:	6825      	ldr	r5, [r4, #0]
 800bf26:	1961      	adds	r1, r4, r5
 800bf28:	428b      	cmp	r3, r1
 800bf2a:	bf01      	itttt	eq
 800bf2c:	6819      	ldreq	r1, [r3, #0]
 800bf2e:	685b      	ldreq	r3, [r3, #4]
 800bf30:	1949      	addeq	r1, r1, r5
 800bf32:	6021      	streq	r1, [r4, #0]
 800bf34:	e7ed      	b.n	800bf12 <_free_r+0x22>
 800bf36:	461a      	mov	r2, r3
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	b10b      	cbz	r3, 800bf40 <_free_r+0x50>
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	d9fa      	bls.n	800bf36 <_free_r+0x46>
 800bf40:	6811      	ldr	r1, [r2, #0]
 800bf42:	1855      	adds	r5, r2, r1
 800bf44:	42a5      	cmp	r5, r4
 800bf46:	d10b      	bne.n	800bf60 <_free_r+0x70>
 800bf48:	6824      	ldr	r4, [r4, #0]
 800bf4a:	4421      	add	r1, r4
 800bf4c:	1854      	adds	r4, r2, r1
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	6011      	str	r1, [r2, #0]
 800bf52:	d1e0      	bne.n	800bf16 <_free_r+0x26>
 800bf54:	681c      	ldr	r4, [r3, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	6053      	str	r3, [r2, #4]
 800bf5a:	440c      	add	r4, r1
 800bf5c:	6014      	str	r4, [r2, #0]
 800bf5e:	e7da      	b.n	800bf16 <_free_r+0x26>
 800bf60:	d902      	bls.n	800bf68 <_free_r+0x78>
 800bf62:	230c      	movs	r3, #12
 800bf64:	6003      	str	r3, [r0, #0]
 800bf66:	e7d6      	b.n	800bf16 <_free_r+0x26>
 800bf68:	6825      	ldr	r5, [r4, #0]
 800bf6a:	1961      	adds	r1, r4, r5
 800bf6c:	428b      	cmp	r3, r1
 800bf6e:	bf04      	itt	eq
 800bf70:	6819      	ldreq	r1, [r3, #0]
 800bf72:	685b      	ldreq	r3, [r3, #4]
 800bf74:	6063      	str	r3, [r4, #4]
 800bf76:	bf04      	itt	eq
 800bf78:	1949      	addeq	r1, r1, r5
 800bf7a:	6021      	streq	r1, [r4, #0]
 800bf7c:	6054      	str	r4, [r2, #4]
 800bf7e:	e7ca      	b.n	800bf16 <_free_r+0x26>
 800bf80:	b003      	add	sp, #12
 800bf82:	bd30      	pop	{r4, r5, pc}
 800bf84:	200136c4 	.word	0x200136c4

0800bf88 <__ssputs_r>:
 800bf88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf8c:	688e      	ldr	r6, [r1, #8]
 800bf8e:	461f      	mov	r7, r3
 800bf90:	42be      	cmp	r6, r7
 800bf92:	680b      	ldr	r3, [r1, #0]
 800bf94:	4682      	mov	sl, r0
 800bf96:	460c      	mov	r4, r1
 800bf98:	4690      	mov	r8, r2
 800bf9a:	d82c      	bhi.n	800bff6 <__ssputs_r+0x6e>
 800bf9c:	898a      	ldrh	r2, [r1, #12]
 800bf9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfa2:	d026      	beq.n	800bff2 <__ssputs_r+0x6a>
 800bfa4:	6965      	ldr	r5, [r4, #20]
 800bfa6:	6909      	ldr	r1, [r1, #16]
 800bfa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfac:	eba3 0901 	sub.w	r9, r3, r1
 800bfb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfb4:	1c7b      	adds	r3, r7, #1
 800bfb6:	444b      	add	r3, r9
 800bfb8:	106d      	asrs	r5, r5, #1
 800bfba:	429d      	cmp	r5, r3
 800bfbc:	bf38      	it	cc
 800bfbe:	461d      	movcc	r5, r3
 800bfc0:	0553      	lsls	r3, r2, #21
 800bfc2:	d527      	bpl.n	800c014 <__ssputs_r+0x8c>
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	f7ff fca5 	bl	800b914 <_malloc_r>
 800bfca:	4606      	mov	r6, r0
 800bfcc:	b360      	cbz	r0, 800c028 <__ssputs_r+0xa0>
 800bfce:	6921      	ldr	r1, [r4, #16]
 800bfd0:	464a      	mov	r2, r9
 800bfd2:	f7ff ff61 	bl	800be98 <memcpy>
 800bfd6:	89a3      	ldrh	r3, [r4, #12]
 800bfd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfe0:	81a3      	strh	r3, [r4, #12]
 800bfe2:	6126      	str	r6, [r4, #16]
 800bfe4:	6165      	str	r5, [r4, #20]
 800bfe6:	444e      	add	r6, r9
 800bfe8:	eba5 0509 	sub.w	r5, r5, r9
 800bfec:	6026      	str	r6, [r4, #0]
 800bfee:	60a5      	str	r5, [r4, #8]
 800bff0:	463e      	mov	r6, r7
 800bff2:	42be      	cmp	r6, r7
 800bff4:	d900      	bls.n	800bff8 <__ssputs_r+0x70>
 800bff6:	463e      	mov	r6, r7
 800bff8:	6820      	ldr	r0, [r4, #0]
 800bffa:	4632      	mov	r2, r6
 800bffc:	4641      	mov	r1, r8
 800bffe:	f000 fb6b 	bl	800c6d8 <memmove>
 800c002:	68a3      	ldr	r3, [r4, #8]
 800c004:	1b9b      	subs	r3, r3, r6
 800c006:	60a3      	str	r3, [r4, #8]
 800c008:	6823      	ldr	r3, [r4, #0]
 800c00a:	4433      	add	r3, r6
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	2000      	movs	r0, #0
 800c010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c014:	462a      	mov	r2, r5
 800c016:	f000 fb80 	bl	800c71a <_realloc_r>
 800c01a:	4606      	mov	r6, r0
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d1e0      	bne.n	800bfe2 <__ssputs_r+0x5a>
 800c020:	6921      	ldr	r1, [r4, #16]
 800c022:	4650      	mov	r0, sl
 800c024:	f7ff ff64 	bl	800bef0 <_free_r>
 800c028:	230c      	movs	r3, #12
 800c02a:	f8ca 3000 	str.w	r3, [sl]
 800c02e:	89a3      	ldrh	r3, [r4, #12]
 800c030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c034:	81a3      	strh	r3, [r4, #12]
 800c036:	f04f 30ff 	mov.w	r0, #4294967295
 800c03a:	e7e9      	b.n	800c010 <__ssputs_r+0x88>

0800c03c <_svfiprintf_r>:
 800c03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	4698      	mov	r8, r3
 800c042:	898b      	ldrh	r3, [r1, #12]
 800c044:	061b      	lsls	r3, r3, #24
 800c046:	b09d      	sub	sp, #116	; 0x74
 800c048:	4607      	mov	r7, r0
 800c04a:	460d      	mov	r5, r1
 800c04c:	4614      	mov	r4, r2
 800c04e:	d50e      	bpl.n	800c06e <_svfiprintf_r+0x32>
 800c050:	690b      	ldr	r3, [r1, #16]
 800c052:	b963      	cbnz	r3, 800c06e <_svfiprintf_r+0x32>
 800c054:	2140      	movs	r1, #64	; 0x40
 800c056:	f7ff fc5d 	bl	800b914 <_malloc_r>
 800c05a:	6028      	str	r0, [r5, #0]
 800c05c:	6128      	str	r0, [r5, #16]
 800c05e:	b920      	cbnz	r0, 800c06a <_svfiprintf_r+0x2e>
 800c060:	230c      	movs	r3, #12
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	f04f 30ff 	mov.w	r0, #4294967295
 800c068:	e0d0      	b.n	800c20c <_svfiprintf_r+0x1d0>
 800c06a:	2340      	movs	r3, #64	; 0x40
 800c06c:	616b      	str	r3, [r5, #20]
 800c06e:	2300      	movs	r3, #0
 800c070:	9309      	str	r3, [sp, #36]	; 0x24
 800c072:	2320      	movs	r3, #32
 800c074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c078:	f8cd 800c 	str.w	r8, [sp, #12]
 800c07c:	2330      	movs	r3, #48	; 0x30
 800c07e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c224 <_svfiprintf_r+0x1e8>
 800c082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c086:	f04f 0901 	mov.w	r9, #1
 800c08a:	4623      	mov	r3, r4
 800c08c:	469a      	mov	sl, r3
 800c08e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c092:	b10a      	cbz	r2, 800c098 <_svfiprintf_r+0x5c>
 800c094:	2a25      	cmp	r2, #37	; 0x25
 800c096:	d1f9      	bne.n	800c08c <_svfiprintf_r+0x50>
 800c098:	ebba 0b04 	subs.w	fp, sl, r4
 800c09c:	d00b      	beq.n	800c0b6 <_svfiprintf_r+0x7a>
 800c09e:	465b      	mov	r3, fp
 800c0a0:	4622      	mov	r2, r4
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	4638      	mov	r0, r7
 800c0a6:	f7ff ff6f 	bl	800bf88 <__ssputs_r>
 800c0aa:	3001      	adds	r0, #1
 800c0ac:	f000 80a9 	beq.w	800c202 <_svfiprintf_r+0x1c6>
 800c0b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0b2:	445a      	add	r2, fp
 800c0b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c0b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f000 80a1 	beq.w	800c202 <_svfiprintf_r+0x1c6>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0ca:	f10a 0a01 	add.w	sl, sl, #1
 800c0ce:	9304      	str	r3, [sp, #16]
 800c0d0:	9307      	str	r3, [sp, #28]
 800c0d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0d6:	931a      	str	r3, [sp, #104]	; 0x68
 800c0d8:	4654      	mov	r4, sl
 800c0da:	2205      	movs	r2, #5
 800c0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e0:	4850      	ldr	r0, [pc, #320]	; (800c224 <_svfiprintf_r+0x1e8>)
 800c0e2:	f7f4 f87d 	bl	80001e0 <memchr>
 800c0e6:	9a04      	ldr	r2, [sp, #16]
 800c0e8:	b9d8      	cbnz	r0, 800c122 <_svfiprintf_r+0xe6>
 800c0ea:	06d0      	lsls	r0, r2, #27
 800c0ec:	bf44      	itt	mi
 800c0ee:	2320      	movmi	r3, #32
 800c0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f4:	0711      	lsls	r1, r2, #28
 800c0f6:	bf44      	itt	mi
 800c0f8:	232b      	movmi	r3, #43	; 0x2b
 800c0fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c102:	2b2a      	cmp	r3, #42	; 0x2a
 800c104:	d015      	beq.n	800c132 <_svfiprintf_r+0xf6>
 800c106:	9a07      	ldr	r2, [sp, #28]
 800c108:	4654      	mov	r4, sl
 800c10a:	2000      	movs	r0, #0
 800c10c:	f04f 0c0a 	mov.w	ip, #10
 800c110:	4621      	mov	r1, r4
 800c112:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c116:	3b30      	subs	r3, #48	; 0x30
 800c118:	2b09      	cmp	r3, #9
 800c11a:	d94d      	bls.n	800c1b8 <_svfiprintf_r+0x17c>
 800c11c:	b1b0      	cbz	r0, 800c14c <_svfiprintf_r+0x110>
 800c11e:	9207      	str	r2, [sp, #28]
 800c120:	e014      	b.n	800c14c <_svfiprintf_r+0x110>
 800c122:	eba0 0308 	sub.w	r3, r0, r8
 800c126:	fa09 f303 	lsl.w	r3, r9, r3
 800c12a:	4313      	orrs	r3, r2
 800c12c:	9304      	str	r3, [sp, #16]
 800c12e:	46a2      	mov	sl, r4
 800c130:	e7d2      	b.n	800c0d8 <_svfiprintf_r+0x9c>
 800c132:	9b03      	ldr	r3, [sp, #12]
 800c134:	1d19      	adds	r1, r3, #4
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	9103      	str	r1, [sp, #12]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	bfbb      	ittet	lt
 800c13e:	425b      	neglt	r3, r3
 800c140:	f042 0202 	orrlt.w	r2, r2, #2
 800c144:	9307      	strge	r3, [sp, #28]
 800c146:	9307      	strlt	r3, [sp, #28]
 800c148:	bfb8      	it	lt
 800c14a:	9204      	strlt	r2, [sp, #16]
 800c14c:	7823      	ldrb	r3, [r4, #0]
 800c14e:	2b2e      	cmp	r3, #46	; 0x2e
 800c150:	d10c      	bne.n	800c16c <_svfiprintf_r+0x130>
 800c152:	7863      	ldrb	r3, [r4, #1]
 800c154:	2b2a      	cmp	r3, #42	; 0x2a
 800c156:	d134      	bne.n	800c1c2 <_svfiprintf_r+0x186>
 800c158:	9b03      	ldr	r3, [sp, #12]
 800c15a:	1d1a      	adds	r2, r3, #4
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	9203      	str	r2, [sp, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	bfb8      	it	lt
 800c164:	f04f 33ff 	movlt.w	r3, #4294967295
 800c168:	3402      	adds	r4, #2
 800c16a:	9305      	str	r3, [sp, #20]
 800c16c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c234 <_svfiprintf_r+0x1f8>
 800c170:	7821      	ldrb	r1, [r4, #0]
 800c172:	2203      	movs	r2, #3
 800c174:	4650      	mov	r0, sl
 800c176:	f7f4 f833 	bl	80001e0 <memchr>
 800c17a:	b138      	cbz	r0, 800c18c <_svfiprintf_r+0x150>
 800c17c:	9b04      	ldr	r3, [sp, #16]
 800c17e:	eba0 000a 	sub.w	r0, r0, sl
 800c182:	2240      	movs	r2, #64	; 0x40
 800c184:	4082      	lsls	r2, r0
 800c186:	4313      	orrs	r3, r2
 800c188:	3401      	adds	r4, #1
 800c18a:	9304      	str	r3, [sp, #16]
 800c18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c190:	4825      	ldr	r0, [pc, #148]	; (800c228 <_svfiprintf_r+0x1ec>)
 800c192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c196:	2206      	movs	r2, #6
 800c198:	f7f4 f822 	bl	80001e0 <memchr>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d038      	beq.n	800c212 <_svfiprintf_r+0x1d6>
 800c1a0:	4b22      	ldr	r3, [pc, #136]	; (800c22c <_svfiprintf_r+0x1f0>)
 800c1a2:	bb1b      	cbnz	r3, 800c1ec <_svfiprintf_r+0x1b0>
 800c1a4:	9b03      	ldr	r3, [sp, #12]
 800c1a6:	3307      	adds	r3, #7
 800c1a8:	f023 0307 	bic.w	r3, r3, #7
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	9303      	str	r3, [sp, #12]
 800c1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b2:	4433      	add	r3, r6
 800c1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b6:	e768      	b.n	800c08a <_svfiprintf_r+0x4e>
 800c1b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1bc:	460c      	mov	r4, r1
 800c1be:	2001      	movs	r0, #1
 800c1c0:	e7a6      	b.n	800c110 <_svfiprintf_r+0xd4>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	3401      	adds	r4, #1
 800c1c6:	9305      	str	r3, [sp, #20]
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	f04f 0c0a 	mov.w	ip, #10
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1d4:	3a30      	subs	r2, #48	; 0x30
 800c1d6:	2a09      	cmp	r2, #9
 800c1d8:	d903      	bls.n	800c1e2 <_svfiprintf_r+0x1a6>
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d0c6      	beq.n	800c16c <_svfiprintf_r+0x130>
 800c1de:	9105      	str	r1, [sp, #20]
 800c1e0:	e7c4      	b.n	800c16c <_svfiprintf_r+0x130>
 800c1e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e7f0      	b.n	800c1ce <_svfiprintf_r+0x192>
 800c1ec:	ab03      	add	r3, sp, #12
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	462a      	mov	r2, r5
 800c1f2:	4b0f      	ldr	r3, [pc, #60]	; (800c230 <_svfiprintf_r+0x1f4>)
 800c1f4:	a904      	add	r1, sp, #16
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	f3af 8000 	nop.w
 800c1fc:	1c42      	adds	r2, r0, #1
 800c1fe:	4606      	mov	r6, r0
 800c200:	d1d6      	bne.n	800c1b0 <_svfiprintf_r+0x174>
 800c202:	89ab      	ldrh	r3, [r5, #12]
 800c204:	065b      	lsls	r3, r3, #25
 800c206:	f53f af2d 	bmi.w	800c064 <_svfiprintf_r+0x28>
 800c20a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c20c:	b01d      	add	sp, #116	; 0x74
 800c20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c212:	ab03      	add	r3, sp, #12
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	462a      	mov	r2, r5
 800c218:	4b05      	ldr	r3, [pc, #20]	; (800c230 <_svfiprintf_r+0x1f4>)
 800c21a:	a904      	add	r1, sp, #16
 800c21c:	4638      	mov	r0, r7
 800c21e:	f000 f879 	bl	800c314 <_printf_i>
 800c222:	e7eb      	b.n	800c1fc <_svfiprintf_r+0x1c0>
 800c224:	0800cee3 	.word	0x0800cee3
 800c228:	0800ceed 	.word	0x0800ceed
 800c22c:	00000000 	.word	0x00000000
 800c230:	0800bf89 	.word	0x0800bf89
 800c234:	0800cee9 	.word	0x0800cee9

0800c238 <_printf_common>:
 800c238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c23c:	4616      	mov	r6, r2
 800c23e:	4699      	mov	r9, r3
 800c240:	688a      	ldr	r2, [r1, #8]
 800c242:	690b      	ldr	r3, [r1, #16]
 800c244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c248:	4293      	cmp	r3, r2
 800c24a:	bfb8      	it	lt
 800c24c:	4613      	movlt	r3, r2
 800c24e:	6033      	str	r3, [r6, #0]
 800c250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c254:	4607      	mov	r7, r0
 800c256:	460c      	mov	r4, r1
 800c258:	b10a      	cbz	r2, 800c25e <_printf_common+0x26>
 800c25a:	3301      	adds	r3, #1
 800c25c:	6033      	str	r3, [r6, #0]
 800c25e:	6823      	ldr	r3, [r4, #0]
 800c260:	0699      	lsls	r1, r3, #26
 800c262:	bf42      	ittt	mi
 800c264:	6833      	ldrmi	r3, [r6, #0]
 800c266:	3302      	addmi	r3, #2
 800c268:	6033      	strmi	r3, [r6, #0]
 800c26a:	6825      	ldr	r5, [r4, #0]
 800c26c:	f015 0506 	ands.w	r5, r5, #6
 800c270:	d106      	bne.n	800c280 <_printf_common+0x48>
 800c272:	f104 0a19 	add.w	sl, r4, #25
 800c276:	68e3      	ldr	r3, [r4, #12]
 800c278:	6832      	ldr	r2, [r6, #0]
 800c27a:	1a9b      	subs	r3, r3, r2
 800c27c:	42ab      	cmp	r3, r5
 800c27e:	dc26      	bgt.n	800c2ce <_printf_common+0x96>
 800c280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c284:	1e13      	subs	r3, r2, #0
 800c286:	6822      	ldr	r2, [r4, #0]
 800c288:	bf18      	it	ne
 800c28a:	2301      	movne	r3, #1
 800c28c:	0692      	lsls	r2, r2, #26
 800c28e:	d42b      	bmi.n	800c2e8 <_printf_common+0xb0>
 800c290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c294:	4649      	mov	r1, r9
 800c296:	4638      	mov	r0, r7
 800c298:	47c0      	blx	r8
 800c29a:	3001      	adds	r0, #1
 800c29c:	d01e      	beq.n	800c2dc <_printf_common+0xa4>
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	6922      	ldr	r2, [r4, #16]
 800c2a2:	f003 0306 	and.w	r3, r3, #6
 800c2a6:	2b04      	cmp	r3, #4
 800c2a8:	bf02      	ittt	eq
 800c2aa:	68e5      	ldreq	r5, [r4, #12]
 800c2ac:	6833      	ldreq	r3, [r6, #0]
 800c2ae:	1aed      	subeq	r5, r5, r3
 800c2b0:	68a3      	ldr	r3, [r4, #8]
 800c2b2:	bf0c      	ite	eq
 800c2b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2b8:	2500      	movne	r5, #0
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	bfc4      	itt	gt
 800c2be:	1a9b      	subgt	r3, r3, r2
 800c2c0:	18ed      	addgt	r5, r5, r3
 800c2c2:	2600      	movs	r6, #0
 800c2c4:	341a      	adds	r4, #26
 800c2c6:	42b5      	cmp	r5, r6
 800c2c8:	d11a      	bne.n	800c300 <_printf_common+0xc8>
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	e008      	b.n	800c2e0 <_printf_common+0xa8>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	4652      	mov	r2, sl
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	47c0      	blx	r8
 800c2d8:	3001      	adds	r0, #1
 800c2da:	d103      	bne.n	800c2e4 <_printf_common+0xac>
 800c2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	e7c6      	b.n	800c276 <_printf_common+0x3e>
 800c2e8:	18e1      	adds	r1, r4, r3
 800c2ea:	1c5a      	adds	r2, r3, #1
 800c2ec:	2030      	movs	r0, #48	; 0x30
 800c2ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2f2:	4422      	add	r2, r4
 800c2f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2fc:	3302      	adds	r3, #2
 800c2fe:	e7c7      	b.n	800c290 <_printf_common+0x58>
 800c300:	2301      	movs	r3, #1
 800c302:	4622      	mov	r2, r4
 800c304:	4649      	mov	r1, r9
 800c306:	4638      	mov	r0, r7
 800c308:	47c0      	blx	r8
 800c30a:	3001      	adds	r0, #1
 800c30c:	d0e6      	beq.n	800c2dc <_printf_common+0xa4>
 800c30e:	3601      	adds	r6, #1
 800c310:	e7d9      	b.n	800c2c6 <_printf_common+0x8e>
	...

0800c314 <_printf_i>:
 800c314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c318:	7e0f      	ldrb	r7, [r1, #24]
 800c31a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c31c:	2f78      	cmp	r7, #120	; 0x78
 800c31e:	4691      	mov	r9, r2
 800c320:	4680      	mov	r8, r0
 800c322:	460c      	mov	r4, r1
 800c324:	469a      	mov	sl, r3
 800c326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c32a:	d807      	bhi.n	800c33c <_printf_i+0x28>
 800c32c:	2f62      	cmp	r7, #98	; 0x62
 800c32e:	d80a      	bhi.n	800c346 <_printf_i+0x32>
 800c330:	2f00      	cmp	r7, #0
 800c332:	f000 80d4 	beq.w	800c4de <_printf_i+0x1ca>
 800c336:	2f58      	cmp	r7, #88	; 0x58
 800c338:	f000 80c0 	beq.w	800c4bc <_printf_i+0x1a8>
 800c33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c344:	e03a      	b.n	800c3bc <_printf_i+0xa8>
 800c346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c34a:	2b15      	cmp	r3, #21
 800c34c:	d8f6      	bhi.n	800c33c <_printf_i+0x28>
 800c34e:	a101      	add	r1, pc, #4	; (adr r1, 800c354 <_printf_i+0x40>)
 800c350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c354:	0800c3ad 	.word	0x0800c3ad
 800c358:	0800c3c1 	.word	0x0800c3c1
 800c35c:	0800c33d 	.word	0x0800c33d
 800c360:	0800c33d 	.word	0x0800c33d
 800c364:	0800c33d 	.word	0x0800c33d
 800c368:	0800c33d 	.word	0x0800c33d
 800c36c:	0800c3c1 	.word	0x0800c3c1
 800c370:	0800c33d 	.word	0x0800c33d
 800c374:	0800c33d 	.word	0x0800c33d
 800c378:	0800c33d 	.word	0x0800c33d
 800c37c:	0800c33d 	.word	0x0800c33d
 800c380:	0800c4c5 	.word	0x0800c4c5
 800c384:	0800c3ed 	.word	0x0800c3ed
 800c388:	0800c47f 	.word	0x0800c47f
 800c38c:	0800c33d 	.word	0x0800c33d
 800c390:	0800c33d 	.word	0x0800c33d
 800c394:	0800c4e7 	.word	0x0800c4e7
 800c398:	0800c33d 	.word	0x0800c33d
 800c39c:	0800c3ed 	.word	0x0800c3ed
 800c3a0:	0800c33d 	.word	0x0800c33d
 800c3a4:	0800c33d 	.word	0x0800c33d
 800c3a8:	0800c487 	.word	0x0800c487
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	1d1a      	adds	r2, r3, #4
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	602a      	str	r2, [r5, #0]
 800c3b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e09f      	b.n	800c500 <_printf_i+0x1ec>
 800c3c0:	6820      	ldr	r0, [r4, #0]
 800c3c2:	682b      	ldr	r3, [r5, #0]
 800c3c4:	0607      	lsls	r7, r0, #24
 800c3c6:	f103 0104 	add.w	r1, r3, #4
 800c3ca:	6029      	str	r1, [r5, #0]
 800c3cc:	d501      	bpl.n	800c3d2 <_printf_i+0xbe>
 800c3ce:	681e      	ldr	r6, [r3, #0]
 800c3d0:	e003      	b.n	800c3da <_printf_i+0xc6>
 800c3d2:	0646      	lsls	r6, r0, #25
 800c3d4:	d5fb      	bpl.n	800c3ce <_printf_i+0xba>
 800c3d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c3da:	2e00      	cmp	r6, #0
 800c3dc:	da03      	bge.n	800c3e6 <_printf_i+0xd2>
 800c3de:	232d      	movs	r3, #45	; 0x2d
 800c3e0:	4276      	negs	r6, r6
 800c3e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3e6:	485a      	ldr	r0, [pc, #360]	; (800c550 <_printf_i+0x23c>)
 800c3e8:	230a      	movs	r3, #10
 800c3ea:	e012      	b.n	800c412 <_printf_i+0xfe>
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	6820      	ldr	r0, [r4, #0]
 800c3f0:	1d19      	adds	r1, r3, #4
 800c3f2:	6029      	str	r1, [r5, #0]
 800c3f4:	0605      	lsls	r5, r0, #24
 800c3f6:	d501      	bpl.n	800c3fc <_printf_i+0xe8>
 800c3f8:	681e      	ldr	r6, [r3, #0]
 800c3fa:	e002      	b.n	800c402 <_printf_i+0xee>
 800c3fc:	0641      	lsls	r1, r0, #25
 800c3fe:	d5fb      	bpl.n	800c3f8 <_printf_i+0xe4>
 800c400:	881e      	ldrh	r6, [r3, #0]
 800c402:	4853      	ldr	r0, [pc, #332]	; (800c550 <_printf_i+0x23c>)
 800c404:	2f6f      	cmp	r7, #111	; 0x6f
 800c406:	bf0c      	ite	eq
 800c408:	2308      	moveq	r3, #8
 800c40a:	230a      	movne	r3, #10
 800c40c:	2100      	movs	r1, #0
 800c40e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c412:	6865      	ldr	r5, [r4, #4]
 800c414:	60a5      	str	r5, [r4, #8]
 800c416:	2d00      	cmp	r5, #0
 800c418:	bfa2      	ittt	ge
 800c41a:	6821      	ldrge	r1, [r4, #0]
 800c41c:	f021 0104 	bicge.w	r1, r1, #4
 800c420:	6021      	strge	r1, [r4, #0]
 800c422:	b90e      	cbnz	r6, 800c428 <_printf_i+0x114>
 800c424:	2d00      	cmp	r5, #0
 800c426:	d04b      	beq.n	800c4c0 <_printf_i+0x1ac>
 800c428:	4615      	mov	r5, r2
 800c42a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c42e:	fb03 6711 	mls	r7, r3, r1, r6
 800c432:	5dc7      	ldrb	r7, [r0, r7]
 800c434:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c438:	4637      	mov	r7, r6
 800c43a:	42bb      	cmp	r3, r7
 800c43c:	460e      	mov	r6, r1
 800c43e:	d9f4      	bls.n	800c42a <_printf_i+0x116>
 800c440:	2b08      	cmp	r3, #8
 800c442:	d10b      	bne.n	800c45c <_printf_i+0x148>
 800c444:	6823      	ldr	r3, [r4, #0]
 800c446:	07de      	lsls	r6, r3, #31
 800c448:	d508      	bpl.n	800c45c <_printf_i+0x148>
 800c44a:	6923      	ldr	r3, [r4, #16]
 800c44c:	6861      	ldr	r1, [r4, #4]
 800c44e:	4299      	cmp	r1, r3
 800c450:	bfde      	ittt	le
 800c452:	2330      	movle	r3, #48	; 0x30
 800c454:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c458:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c45c:	1b52      	subs	r2, r2, r5
 800c45e:	6122      	str	r2, [r4, #16]
 800c460:	f8cd a000 	str.w	sl, [sp]
 800c464:	464b      	mov	r3, r9
 800c466:	aa03      	add	r2, sp, #12
 800c468:	4621      	mov	r1, r4
 800c46a:	4640      	mov	r0, r8
 800c46c:	f7ff fee4 	bl	800c238 <_printf_common>
 800c470:	3001      	adds	r0, #1
 800c472:	d14a      	bne.n	800c50a <_printf_i+0x1f6>
 800c474:	f04f 30ff 	mov.w	r0, #4294967295
 800c478:	b004      	add	sp, #16
 800c47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c47e:	6823      	ldr	r3, [r4, #0]
 800c480:	f043 0320 	orr.w	r3, r3, #32
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	4833      	ldr	r0, [pc, #204]	; (800c554 <_printf_i+0x240>)
 800c488:	2778      	movs	r7, #120	; 0x78
 800c48a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	6829      	ldr	r1, [r5, #0]
 800c492:	061f      	lsls	r7, r3, #24
 800c494:	f851 6b04 	ldr.w	r6, [r1], #4
 800c498:	d402      	bmi.n	800c4a0 <_printf_i+0x18c>
 800c49a:	065f      	lsls	r7, r3, #25
 800c49c:	bf48      	it	mi
 800c49e:	b2b6      	uxthmi	r6, r6
 800c4a0:	07df      	lsls	r7, r3, #31
 800c4a2:	bf48      	it	mi
 800c4a4:	f043 0320 	orrmi.w	r3, r3, #32
 800c4a8:	6029      	str	r1, [r5, #0]
 800c4aa:	bf48      	it	mi
 800c4ac:	6023      	strmi	r3, [r4, #0]
 800c4ae:	b91e      	cbnz	r6, 800c4b8 <_printf_i+0x1a4>
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	f023 0320 	bic.w	r3, r3, #32
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	e7a7      	b.n	800c40c <_printf_i+0xf8>
 800c4bc:	4824      	ldr	r0, [pc, #144]	; (800c550 <_printf_i+0x23c>)
 800c4be:	e7e4      	b.n	800c48a <_printf_i+0x176>
 800c4c0:	4615      	mov	r5, r2
 800c4c2:	e7bd      	b.n	800c440 <_printf_i+0x12c>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	6826      	ldr	r6, [r4, #0]
 800c4c8:	6961      	ldr	r1, [r4, #20]
 800c4ca:	1d18      	adds	r0, r3, #4
 800c4cc:	6028      	str	r0, [r5, #0]
 800c4ce:	0635      	lsls	r5, r6, #24
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	d501      	bpl.n	800c4d8 <_printf_i+0x1c4>
 800c4d4:	6019      	str	r1, [r3, #0]
 800c4d6:	e002      	b.n	800c4de <_printf_i+0x1ca>
 800c4d8:	0670      	lsls	r0, r6, #25
 800c4da:	d5fb      	bpl.n	800c4d4 <_printf_i+0x1c0>
 800c4dc:	8019      	strh	r1, [r3, #0]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	6123      	str	r3, [r4, #16]
 800c4e2:	4615      	mov	r5, r2
 800c4e4:	e7bc      	b.n	800c460 <_printf_i+0x14c>
 800c4e6:	682b      	ldr	r3, [r5, #0]
 800c4e8:	1d1a      	adds	r2, r3, #4
 800c4ea:	602a      	str	r2, [r5, #0]
 800c4ec:	681d      	ldr	r5, [r3, #0]
 800c4ee:	6862      	ldr	r2, [r4, #4]
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	f7f3 fe74 	bl	80001e0 <memchr>
 800c4f8:	b108      	cbz	r0, 800c4fe <_printf_i+0x1ea>
 800c4fa:	1b40      	subs	r0, r0, r5
 800c4fc:	6060      	str	r0, [r4, #4]
 800c4fe:	6863      	ldr	r3, [r4, #4]
 800c500:	6123      	str	r3, [r4, #16]
 800c502:	2300      	movs	r3, #0
 800c504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c508:	e7aa      	b.n	800c460 <_printf_i+0x14c>
 800c50a:	6923      	ldr	r3, [r4, #16]
 800c50c:	462a      	mov	r2, r5
 800c50e:	4649      	mov	r1, r9
 800c510:	4640      	mov	r0, r8
 800c512:	47d0      	blx	sl
 800c514:	3001      	adds	r0, #1
 800c516:	d0ad      	beq.n	800c474 <_printf_i+0x160>
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	079b      	lsls	r3, r3, #30
 800c51c:	d413      	bmi.n	800c546 <_printf_i+0x232>
 800c51e:	68e0      	ldr	r0, [r4, #12]
 800c520:	9b03      	ldr	r3, [sp, #12]
 800c522:	4298      	cmp	r0, r3
 800c524:	bfb8      	it	lt
 800c526:	4618      	movlt	r0, r3
 800c528:	e7a6      	b.n	800c478 <_printf_i+0x164>
 800c52a:	2301      	movs	r3, #1
 800c52c:	4632      	mov	r2, r6
 800c52e:	4649      	mov	r1, r9
 800c530:	4640      	mov	r0, r8
 800c532:	47d0      	blx	sl
 800c534:	3001      	adds	r0, #1
 800c536:	d09d      	beq.n	800c474 <_printf_i+0x160>
 800c538:	3501      	adds	r5, #1
 800c53a:	68e3      	ldr	r3, [r4, #12]
 800c53c:	9903      	ldr	r1, [sp, #12]
 800c53e:	1a5b      	subs	r3, r3, r1
 800c540:	42ab      	cmp	r3, r5
 800c542:	dcf2      	bgt.n	800c52a <_printf_i+0x216>
 800c544:	e7eb      	b.n	800c51e <_printf_i+0x20a>
 800c546:	2500      	movs	r5, #0
 800c548:	f104 0619 	add.w	r6, r4, #25
 800c54c:	e7f5      	b.n	800c53a <_printf_i+0x226>
 800c54e:	bf00      	nop
 800c550:	0800cef4 	.word	0x0800cef4
 800c554:	0800cf05 	.word	0x0800cf05

0800c558 <__sflush_r>:
 800c558:	898a      	ldrh	r2, [r1, #12]
 800c55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55e:	4605      	mov	r5, r0
 800c560:	0710      	lsls	r0, r2, #28
 800c562:	460c      	mov	r4, r1
 800c564:	d458      	bmi.n	800c618 <__sflush_r+0xc0>
 800c566:	684b      	ldr	r3, [r1, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	dc05      	bgt.n	800c578 <__sflush_r+0x20>
 800c56c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c56e:	2b00      	cmp	r3, #0
 800c570:	dc02      	bgt.n	800c578 <__sflush_r+0x20>
 800c572:	2000      	movs	r0, #0
 800c574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c57a:	2e00      	cmp	r6, #0
 800c57c:	d0f9      	beq.n	800c572 <__sflush_r+0x1a>
 800c57e:	2300      	movs	r3, #0
 800c580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c584:	682f      	ldr	r7, [r5, #0]
 800c586:	6a21      	ldr	r1, [r4, #32]
 800c588:	602b      	str	r3, [r5, #0]
 800c58a:	d032      	beq.n	800c5f2 <__sflush_r+0x9a>
 800c58c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c58e:	89a3      	ldrh	r3, [r4, #12]
 800c590:	075a      	lsls	r2, r3, #29
 800c592:	d505      	bpl.n	800c5a0 <__sflush_r+0x48>
 800c594:	6863      	ldr	r3, [r4, #4]
 800c596:	1ac0      	subs	r0, r0, r3
 800c598:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c59a:	b10b      	cbz	r3, 800c5a0 <__sflush_r+0x48>
 800c59c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c59e:	1ac0      	subs	r0, r0, r3
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5a6:	6a21      	ldr	r1, [r4, #32]
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	47b0      	blx	r6
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	89a3      	ldrh	r3, [r4, #12]
 800c5b0:	d106      	bne.n	800c5c0 <__sflush_r+0x68>
 800c5b2:	6829      	ldr	r1, [r5, #0]
 800c5b4:	291d      	cmp	r1, #29
 800c5b6:	d82b      	bhi.n	800c610 <__sflush_r+0xb8>
 800c5b8:	4a29      	ldr	r2, [pc, #164]	; (800c660 <__sflush_r+0x108>)
 800c5ba:	410a      	asrs	r2, r1
 800c5bc:	07d6      	lsls	r6, r2, #31
 800c5be:	d427      	bmi.n	800c610 <__sflush_r+0xb8>
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	6062      	str	r2, [r4, #4]
 800c5c4:	04d9      	lsls	r1, r3, #19
 800c5c6:	6922      	ldr	r2, [r4, #16]
 800c5c8:	6022      	str	r2, [r4, #0]
 800c5ca:	d504      	bpl.n	800c5d6 <__sflush_r+0x7e>
 800c5cc:	1c42      	adds	r2, r0, #1
 800c5ce:	d101      	bne.n	800c5d4 <__sflush_r+0x7c>
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	b903      	cbnz	r3, 800c5d6 <__sflush_r+0x7e>
 800c5d4:	6560      	str	r0, [r4, #84]	; 0x54
 800c5d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5d8:	602f      	str	r7, [r5, #0]
 800c5da:	2900      	cmp	r1, #0
 800c5dc:	d0c9      	beq.n	800c572 <__sflush_r+0x1a>
 800c5de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5e2:	4299      	cmp	r1, r3
 800c5e4:	d002      	beq.n	800c5ec <__sflush_r+0x94>
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f7ff fc82 	bl	800bef0 <_free_r>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	6360      	str	r0, [r4, #52]	; 0x34
 800c5f0:	e7c0      	b.n	800c574 <__sflush_r+0x1c>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	47b0      	blx	r6
 800c5f8:	1c41      	adds	r1, r0, #1
 800c5fa:	d1c8      	bne.n	800c58e <__sflush_r+0x36>
 800c5fc:	682b      	ldr	r3, [r5, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d0c5      	beq.n	800c58e <__sflush_r+0x36>
 800c602:	2b1d      	cmp	r3, #29
 800c604:	d001      	beq.n	800c60a <__sflush_r+0xb2>
 800c606:	2b16      	cmp	r3, #22
 800c608:	d101      	bne.n	800c60e <__sflush_r+0xb6>
 800c60a:	602f      	str	r7, [r5, #0]
 800c60c:	e7b1      	b.n	800c572 <__sflush_r+0x1a>
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c614:	81a3      	strh	r3, [r4, #12]
 800c616:	e7ad      	b.n	800c574 <__sflush_r+0x1c>
 800c618:	690f      	ldr	r7, [r1, #16]
 800c61a:	2f00      	cmp	r7, #0
 800c61c:	d0a9      	beq.n	800c572 <__sflush_r+0x1a>
 800c61e:	0793      	lsls	r3, r2, #30
 800c620:	680e      	ldr	r6, [r1, #0]
 800c622:	bf08      	it	eq
 800c624:	694b      	ldreq	r3, [r1, #20]
 800c626:	600f      	str	r7, [r1, #0]
 800c628:	bf18      	it	ne
 800c62a:	2300      	movne	r3, #0
 800c62c:	eba6 0807 	sub.w	r8, r6, r7
 800c630:	608b      	str	r3, [r1, #8]
 800c632:	f1b8 0f00 	cmp.w	r8, #0
 800c636:	dd9c      	ble.n	800c572 <__sflush_r+0x1a>
 800c638:	6a21      	ldr	r1, [r4, #32]
 800c63a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c63c:	4643      	mov	r3, r8
 800c63e:	463a      	mov	r2, r7
 800c640:	4628      	mov	r0, r5
 800c642:	47b0      	blx	r6
 800c644:	2800      	cmp	r0, #0
 800c646:	dc06      	bgt.n	800c656 <__sflush_r+0xfe>
 800c648:	89a3      	ldrh	r3, [r4, #12]
 800c64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c64e:	81a3      	strh	r3, [r4, #12]
 800c650:	f04f 30ff 	mov.w	r0, #4294967295
 800c654:	e78e      	b.n	800c574 <__sflush_r+0x1c>
 800c656:	4407      	add	r7, r0
 800c658:	eba8 0800 	sub.w	r8, r8, r0
 800c65c:	e7e9      	b.n	800c632 <__sflush_r+0xda>
 800c65e:	bf00      	nop
 800c660:	dfbffffe 	.word	0xdfbffffe

0800c664 <_fflush_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	690b      	ldr	r3, [r1, #16]
 800c668:	4605      	mov	r5, r0
 800c66a:	460c      	mov	r4, r1
 800c66c:	b913      	cbnz	r3, 800c674 <_fflush_r+0x10>
 800c66e:	2500      	movs	r5, #0
 800c670:	4628      	mov	r0, r5
 800c672:	bd38      	pop	{r3, r4, r5, pc}
 800c674:	b118      	cbz	r0, 800c67e <_fflush_r+0x1a>
 800c676:	6a03      	ldr	r3, [r0, #32]
 800c678:	b90b      	cbnz	r3, 800c67e <_fflush_r+0x1a>
 800c67a:	f7ff fabd 	bl	800bbf8 <__sinit>
 800c67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d0f3      	beq.n	800c66e <_fflush_r+0xa>
 800c686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c688:	07d0      	lsls	r0, r2, #31
 800c68a:	d404      	bmi.n	800c696 <_fflush_r+0x32>
 800c68c:	0599      	lsls	r1, r3, #22
 800c68e:	d402      	bmi.n	800c696 <_fflush_r+0x32>
 800c690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c692:	f7ff fbff 	bl	800be94 <__retarget_lock_acquire_recursive>
 800c696:	4628      	mov	r0, r5
 800c698:	4621      	mov	r1, r4
 800c69a:	f7ff ff5d 	bl	800c558 <__sflush_r>
 800c69e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6a0:	07da      	lsls	r2, r3, #31
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	d4e4      	bmi.n	800c670 <_fflush_r+0xc>
 800c6a6:	89a3      	ldrh	r3, [r4, #12]
 800c6a8:	059b      	lsls	r3, r3, #22
 800c6aa:	d4e1      	bmi.n	800c670 <_fflush_r+0xc>
 800c6ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6ae:	f7ff fbf2 	bl	800be96 <__retarget_lock_release_recursive>
 800c6b2:	e7dd      	b.n	800c670 <_fflush_r+0xc>

0800c6b4 <fiprintf>:
 800c6b4:	b40e      	push	{r1, r2, r3}
 800c6b6:	b503      	push	{r0, r1, lr}
 800c6b8:	4601      	mov	r1, r0
 800c6ba:	ab03      	add	r3, sp, #12
 800c6bc:	4805      	ldr	r0, [pc, #20]	; (800c6d4 <fiprintf+0x20>)
 800c6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c2:	6800      	ldr	r0, [r0, #0]
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	f000 f881 	bl	800c7cc <_vfiprintf_r>
 800c6ca:	b002      	add	sp, #8
 800c6cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6d0:	b003      	add	sp, #12
 800c6d2:	4770      	bx	lr
 800c6d4:	2000008c 	.word	0x2000008c

0800c6d8 <memmove>:
 800c6d8:	4288      	cmp	r0, r1
 800c6da:	b510      	push	{r4, lr}
 800c6dc:	eb01 0402 	add.w	r4, r1, r2
 800c6e0:	d902      	bls.n	800c6e8 <memmove+0x10>
 800c6e2:	4284      	cmp	r4, r0
 800c6e4:	4623      	mov	r3, r4
 800c6e6:	d807      	bhi.n	800c6f8 <memmove+0x20>
 800c6e8:	1e43      	subs	r3, r0, #1
 800c6ea:	42a1      	cmp	r1, r4
 800c6ec:	d008      	beq.n	800c700 <memmove+0x28>
 800c6ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6f6:	e7f8      	b.n	800c6ea <memmove+0x12>
 800c6f8:	4402      	add	r2, r0
 800c6fa:	4601      	mov	r1, r0
 800c6fc:	428a      	cmp	r2, r1
 800c6fe:	d100      	bne.n	800c702 <memmove+0x2a>
 800c700:	bd10      	pop	{r4, pc}
 800c702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c70a:	e7f7      	b.n	800c6fc <memmove+0x24>

0800c70c <abort>:
 800c70c:	b508      	push	{r3, lr}
 800c70e:	2006      	movs	r0, #6
 800c710:	f000 fa34 	bl	800cb7c <raise>
 800c714:	2001      	movs	r0, #1
 800c716:	f7f4 fc9d 	bl	8001054 <_exit>

0800c71a <_realloc_r>:
 800c71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c71e:	4680      	mov	r8, r0
 800c720:	4614      	mov	r4, r2
 800c722:	460e      	mov	r6, r1
 800c724:	b921      	cbnz	r1, 800c730 <_realloc_r+0x16>
 800c726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c72a:	4611      	mov	r1, r2
 800c72c:	f7ff b8f2 	b.w	800b914 <_malloc_r>
 800c730:	b92a      	cbnz	r2, 800c73e <_realloc_r+0x24>
 800c732:	f7ff fbdd 	bl	800bef0 <_free_r>
 800c736:	4625      	mov	r5, r4
 800c738:	4628      	mov	r0, r5
 800c73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c73e:	f000 fa39 	bl	800cbb4 <_malloc_usable_size_r>
 800c742:	4284      	cmp	r4, r0
 800c744:	4607      	mov	r7, r0
 800c746:	d802      	bhi.n	800c74e <_realloc_r+0x34>
 800c748:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c74c:	d812      	bhi.n	800c774 <_realloc_r+0x5a>
 800c74e:	4621      	mov	r1, r4
 800c750:	4640      	mov	r0, r8
 800c752:	f7ff f8df 	bl	800b914 <_malloc_r>
 800c756:	4605      	mov	r5, r0
 800c758:	2800      	cmp	r0, #0
 800c75a:	d0ed      	beq.n	800c738 <_realloc_r+0x1e>
 800c75c:	42bc      	cmp	r4, r7
 800c75e:	4622      	mov	r2, r4
 800c760:	4631      	mov	r1, r6
 800c762:	bf28      	it	cs
 800c764:	463a      	movcs	r2, r7
 800c766:	f7ff fb97 	bl	800be98 <memcpy>
 800c76a:	4631      	mov	r1, r6
 800c76c:	4640      	mov	r0, r8
 800c76e:	f7ff fbbf 	bl	800bef0 <_free_r>
 800c772:	e7e1      	b.n	800c738 <_realloc_r+0x1e>
 800c774:	4635      	mov	r5, r6
 800c776:	e7df      	b.n	800c738 <_realloc_r+0x1e>

0800c778 <__sfputc_r>:
 800c778:	6893      	ldr	r3, [r2, #8]
 800c77a:	3b01      	subs	r3, #1
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	b410      	push	{r4}
 800c780:	6093      	str	r3, [r2, #8]
 800c782:	da08      	bge.n	800c796 <__sfputc_r+0x1e>
 800c784:	6994      	ldr	r4, [r2, #24]
 800c786:	42a3      	cmp	r3, r4
 800c788:	db01      	blt.n	800c78e <__sfputc_r+0x16>
 800c78a:	290a      	cmp	r1, #10
 800c78c:	d103      	bne.n	800c796 <__sfputc_r+0x1e>
 800c78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c792:	f000 b935 	b.w	800ca00 <__swbuf_r>
 800c796:	6813      	ldr	r3, [r2, #0]
 800c798:	1c58      	adds	r0, r3, #1
 800c79a:	6010      	str	r0, [r2, #0]
 800c79c:	7019      	strb	r1, [r3, #0]
 800c79e:	4608      	mov	r0, r1
 800c7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <__sfputs_r>:
 800c7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a8:	4606      	mov	r6, r0
 800c7aa:	460f      	mov	r7, r1
 800c7ac:	4614      	mov	r4, r2
 800c7ae:	18d5      	adds	r5, r2, r3
 800c7b0:	42ac      	cmp	r4, r5
 800c7b2:	d101      	bne.n	800c7b8 <__sfputs_r+0x12>
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	e007      	b.n	800c7c8 <__sfputs_r+0x22>
 800c7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7bc:	463a      	mov	r2, r7
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7ff ffda 	bl	800c778 <__sfputc_r>
 800c7c4:	1c43      	adds	r3, r0, #1
 800c7c6:	d1f3      	bne.n	800c7b0 <__sfputs_r+0xa>
 800c7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7cc <_vfiprintf_r>:
 800c7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	460d      	mov	r5, r1
 800c7d2:	b09d      	sub	sp, #116	; 0x74
 800c7d4:	4614      	mov	r4, r2
 800c7d6:	4698      	mov	r8, r3
 800c7d8:	4606      	mov	r6, r0
 800c7da:	b118      	cbz	r0, 800c7e4 <_vfiprintf_r+0x18>
 800c7dc:	6a03      	ldr	r3, [r0, #32]
 800c7de:	b90b      	cbnz	r3, 800c7e4 <_vfiprintf_r+0x18>
 800c7e0:	f7ff fa0a 	bl	800bbf8 <__sinit>
 800c7e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7e6:	07d9      	lsls	r1, r3, #31
 800c7e8:	d405      	bmi.n	800c7f6 <_vfiprintf_r+0x2a>
 800c7ea:	89ab      	ldrh	r3, [r5, #12]
 800c7ec:	059a      	lsls	r2, r3, #22
 800c7ee:	d402      	bmi.n	800c7f6 <_vfiprintf_r+0x2a>
 800c7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7f2:	f7ff fb4f 	bl	800be94 <__retarget_lock_acquire_recursive>
 800c7f6:	89ab      	ldrh	r3, [r5, #12]
 800c7f8:	071b      	lsls	r3, r3, #28
 800c7fa:	d501      	bpl.n	800c800 <_vfiprintf_r+0x34>
 800c7fc:	692b      	ldr	r3, [r5, #16]
 800c7fe:	b99b      	cbnz	r3, 800c828 <_vfiprintf_r+0x5c>
 800c800:	4629      	mov	r1, r5
 800c802:	4630      	mov	r0, r6
 800c804:	f000 f93a 	bl	800ca7c <__swsetup_r>
 800c808:	b170      	cbz	r0, 800c828 <_vfiprintf_r+0x5c>
 800c80a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c80c:	07dc      	lsls	r4, r3, #31
 800c80e:	d504      	bpl.n	800c81a <_vfiprintf_r+0x4e>
 800c810:	f04f 30ff 	mov.w	r0, #4294967295
 800c814:	b01d      	add	sp, #116	; 0x74
 800c816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81a:	89ab      	ldrh	r3, [r5, #12]
 800c81c:	0598      	lsls	r0, r3, #22
 800c81e:	d4f7      	bmi.n	800c810 <_vfiprintf_r+0x44>
 800c820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c822:	f7ff fb38 	bl	800be96 <__retarget_lock_release_recursive>
 800c826:	e7f3      	b.n	800c810 <_vfiprintf_r+0x44>
 800c828:	2300      	movs	r3, #0
 800c82a:	9309      	str	r3, [sp, #36]	; 0x24
 800c82c:	2320      	movs	r3, #32
 800c82e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c832:	f8cd 800c 	str.w	r8, [sp, #12]
 800c836:	2330      	movs	r3, #48	; 0x30
 800c838:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c9ec <_vfiprintf_r+0x220>
 800c83c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c840:	f04f 0901 	mov.w	r9, #1
 800c844:	4623      	mov	r3, r4
 800c846:	469a      	mov	sl, r3
 800c848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c84c:	b10a      	cbz	r2, 800c852 <_vfiprintf_r+0x86>
 800c84e:	2a25      	cmp	r2, #37	; 0x25
 800c850:	d1f9      	bne.n	800c846 <_vfiprintf_r+0x7a>
 800c852:	ebba 0b04 	subs.w	fp, sl, r4
 800c856:	d00b      	beq.n	800c870 <_vfiprintf_r+0xa4>
 800c858:	465b      	mov	r3, fp
 800c85a:	4622      	mov	r2, r4
 800c85c:	4629      	mov	r1, r5
 800c85e:	4630      	mov	r0, r6
 800c860:	f7ff ffa1 	bl	800c7a6 <__sfputs_r>
 800c864:	3001      	adds	r0, #1
 800c866:	f000 80a9 	beq.w	800c9bc <_vfiprintf_r+0x1f0>
 800c86a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c86c:	445a      	add	r2, fp
 800c86e:	9209      	str	r2, [sp, #36]	; 0x24
 800c870:	f89a 3000 	ldrb.w	r3, [sl]
 800c874:	2b00      	cmp	r3, #0
 800c876:	f000 80a1 	beq.w	800c9bc <_vfiprintf_r+0x1f0>
 800c87a:	2300      	movs	r3, #0
 800c87c:	f04f 32ff 	mov.w	r2, #4294967295
 800c880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c884:	f10a 0a01 	add.w	sl, sl, #1
 800c888:	9304      	str	r3, [sp, #16]
 800c88a:	9307      	str	r3, [sp, #28]
 800c88c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c890:	931a      	str	r3, [sp, #104]	; 0x68
 800c892:	4654      	mov	r4, sl
 800c894:	2205      	movs	r2, #5
 800c896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89a:	4854      	ldr	r0, [pc, #336]	; (800c9ec <_vfiprintf_r+0x220>)
 800c89c:	f7f3 fca0 	bl	80001e0 <memchr>
 800c8a0:	9a04      	ldr	r2, [sp, #16]
 800c8a2:	b9d8      	cbnz	r0, 800c8dc <_vfiprintf_r+0x110>
 800c8a4:	06d1      	lsls	r1, r2, #27
 800c8a6:	bf44      	itt	mi
 800c8a8:	2320      	movmi	r3, #32
 800c8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ae:	0713      	lsls	r3, r2, #28
 800c8b0:	bf44      	itt	mi
 800c8b2:	232b      	movmi	r3, #43	; 0x2b
 800c8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c8be:	d015      	beq.n	800c8ec <_vfiprintf_r+0x120>
 800c8c0:	9a07      	ldr	r2, [sp, #28]
 800c8c2:	4654      	mov	r4, sl
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	f04f 0c0a 	mov.w	ip, #10
 800c8ca:	4621      	mov	r1, r4
 800c8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d0:	3b30      	subs	r3, #48	; 0x30
 800c8d2:	2b09      	cmp	r3, #9
 800c8d4:	d94d      	bls.n	800c972 <_vfiprintf_r+0x1a6>
 800c8d6:	b1b0      	cbz	r0, 800c906 <_vfiprintf_r+0x13a>
 800c8d8:	9207      	str	r2, [sp, #28]
 800c8da:	e014      	b.n	800c906 <_vfiprintf_r+0x13a>
 800c8dc:	eba0 0308 	sub.w	r3, r0, r8
 800c8e0:	fa09 f303 	lsl.w	r3, r9, r3
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	9304      	str	r3, [sp, #16]
 800c8e8:	46a2      	mov	sl, r4
 800c8ea:	e7d2      	b.n	800c892 <_vfiprintf_r+0xc6>
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	1d19      	adds	r1, r3, #4
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	9103      	str	r1, [sp, #12]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	bfbb      	ittet	lt
 800c8f8:	425b      	neglt	r3, r3
 800c8fa:	f042 0202 	orrlt.w	r2, r2, #2
 800c8fe:	9307      	strge	r3, [sp, #28]
 800c900:	9307      	strlt	r3, [sp, #28]
 800c902:	bfb8      	it	lt
 800c904:	9204      	strlt	r2, [sp, #16]
 800c906:	7823      	ldrb	r3, [r4, #0]
 800c908:	2b2e      	cmp	r3, #46	; 0x2e
 800c90a:	d10c      	bne.n	800c926 <_vfiprintf_r+0x15a>
 800c90c:	7863      	ldrb	r3, [r4, #1]
 800c90e:	2b2a      	cmp	r3, #42	; 0x2a
 800c910:	d134      	bne.n	800c97c <_vfiprintf_r+0x1b0>
 800c912:	9b03      	ldr	r3, [sp, #12]
 800c914:	1d1a      	adds	r2, r3, #4
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	9203      	str	r2, [sp, #12]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	bfb8      	it	lt
 800c91e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c922:	3402      	adds	r4, #2
 800c924:	9305      	str	r3, [sp, #20]
 800c926:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c9fc <_vfiprintf_r+0x230>
 800c92a:	7821      	ldrb	r1, [r4, #0]
 800c92c:	2203      	movs	r2, #3
 800c92e:	4650      	mov	r0, sl
 800c930:	f7f3 fc56 	bl	80001e0 <memchr>
 800c934:	b138      	cbz	r0, 800c946 <_vfiprintf_r+0x17a>
 800c936:	9b04      	ldr	r3, [sp, #16]
 800c938:	eba0 000a 	sub.w	r0, r0, sl
 800c93c:	2240      	movs	r2, #64	; 0x40
 800c93e:	4082      	lsls	r2, r0
 800c940:	4313      	orrs	r3, r2
 800c942:	3401      	adds	r4, #1
 800c944:	9304      	str	r3, [sp, #16]
 800c946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c94a:	4829      	ldr	r0, [pc, #164]	; (800c9f0 <_vfiprintf_r+0x224>)
 800c94c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c950:	2206      	movs	r2, #6
 800c952:	f7f3 fc45 	bl	80001e0 <memchr>
 800c956:	2800      	cmp	r0, #0
 800c958:	d03f      	beq.n	800c9da <_vfiprintf_r+0x20e>
 800c95a:	4b26      	ldr	r3, [pc, #152]	; (800c9f4 <_vfiprintf_r+0x228>)
 800c95c:	bb1b      	cbnz	r3, 800c9a6 <_vfiprintf_r+0x1da>
 800c95e:	9b03      	ldr	r3, [sp, #12]
 800c960:	3307      	adds	r3, #7
 800c962:	f023 0307 	bic.w	r3, r3, #7
 800c966:	3308      	adds	r3, #8
 800c968:	9303      	str	r3, [sp, #12]
 800c96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c96c:	443b      	add	r3, r7
 800c96e:	9309      	str	r3, [sp, #36]	; 0x24
 800c970:	e768      	b.n	800c844 <_vfiprintf_r+0x78>
 800c972:	fb0c 3202 	mla	r2, ip, r2, r3
 800c976:	460c      	mov	r4, r1
 800c978:	2001      	movs	r0, #1
 800c97a:	e7a6      	b.n	800c8ca <_vfiprintf_r+0xfe>
 800c97c:	2300      	movs	r3, #0
 800c97e:	3401      	adds	r4, #1
 800c980:	9305      	str	r3, [sp, #20]
 800c982:	4619      	mov	r1, r3
 800c984:	f04f 0c0a 	mov.w	ip, #10
 800c988:	4620      	mov	r0, r4
 800c98a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c98e:	3a30      	subs	r2, #48	; 0x30
 800c990:	2a09      	cmp	r2, #9
 800c992:	d903      	bls.n	800c99c <_vfiprintf_r+0x1d0>
 800c994:	2b00      	cmp	r3, #0
 800c996:	d0c6      	beq.n	800c926 <_vfiprintf_r+0x15a>
 800c998:	9105      	str	r1, [sp, #20]
 800c99a:	e7c4      	b.n	800c926 <_vfiprintf_r+0x15a>
 800c99c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e7f0      	b.n	800c988 <_vfiprintf_r+0x1bc>
 800c9a6:	ab03      	add	r3, sp, #12
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	462a      	mov	r2, r5
 800c9ac:	4b12      	ldr	r3, [pc, #72]	; (800c9f8 <_vfiprintf_r+0x22c>)
 800c9ae:	a904      	add	r1, sp, #16
 800c9b0:	4630      	mov	r0, r6
 800c9b2:	f3af 8000 	nop.w
 800c9b6:	4607      	mov	r7, r0
 800c9b8:	1c78      	adds	r0, r7, #1
 800c9ba:	d1d6      	bne.n	800c96a <_vfiprintf_r+0x19e>
 800c9bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9be:	07d9      	lsls	r1, r3, #31
 800c9c0:	d405      	bmi.n	800c9ce <_vfiprintf_r+0x202>
 800c9c2:	89ab      	ldrh	r3, [r5, #12]
 800c9c4:	059a      	lsls	r2, r3, #22
 800c9c6:	d402      	bmi.n	800c9ce <_vfiprintf_r+0x202>
 800c9c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9ca:	f7ff fa64 	bl	800be96 <__retarget_lock_release_recursive>
 800c9ce:	89ab      	ldrh	r3, [r5, #12]
 800c9d0:	065b      	lsls	r3, r3, #25
 800c9d2:	f53f af1d 	bmi.w	800c810 <_vfiprintf_r+0x44>
 800c9d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9d8:	e71c      	b.n	800c814 <_vfiprintf_r+0x48>
 800c9da:	ab03      	add	r3, sp, #12
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	462a      	mov	r2, r5
 800c9e0:	4b05      	ldr	r3, [pc, #20]	; (800c9f8 <_vfiprintf_r+0x22c>)
 800c9e2:	a904      	add	r1, sp, #16
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7ff fc95 	bl	800c314 <_printf_i>
 800c9ea:	e7e4      	b.n	800c9b6 <_vfiprintf_r+0x1ea>
 800c9ec:	0800cee3 	.word	0x0800cee3
 800c9f0:	0800ceed 	.word	0x0800ceed
 800c9f4:	00000000 	.word	0x00000000
 800c9f8:	0800c7a7 	.word	0x0800c7a7
 800c9fc:	0800cee9 	.word	0x0800cee9

0800ca00 <__swbuf_r>:
 800ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca02:	460e      	mov	r6, r1
 800ca04:	4614      	mov	r4, r2
 800ca06:	4605      	mov	r5, r0
 800ca08:	b118      	cbz	r0, 800ca12 <__swbuf_r+0x12>
 800ca0a:	6a03      	ldr	r3, [r0, #32]
 800ca0c:	b90b      	cbnz	r3, 800ca12 <__swbuf_r+0x12>
 800ca0e:	f7ff f8f3 	bl	800bbf8 <__sinit>
 800ca12:	69a3      	ldr	r3, [r4, #24]
 800ca14:	60a3      	str	r3, [r4, #8]
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	071a      	lsls	r2, r3, #28
 800ca1a:	d525      	bpl.n	800ca68 <__swbuf_r+0x68>
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	b31b      	cbz	r3, 800ca68 <__swbuf_r+0x68>
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	6922      	ldr	r2, [r4, #16]
 800ca24:	1a98      	subs	r0, r3, r2
 800ca26:	6963      	ldr	r3, [r4, #20]
 800ca28:	b2f6      	uxtb	r6, r6
 800ca2a:	4283      	cmp	r3, r0
 800ca2c:	4637      	mov	r7, r6
 800ca2e:	dc04      	bgt.n	800ca3a <__swbuf_r+0x3a>
 800ca30:	4621      	mov	r1, r4
 800ca32:	4628      	mov	r0, r5
 800ca34:	f7ff fe16 	bl	800c664 <_fflush_r>
 800ca38:	b9e0      	cbnz	r0, 800ca74 <__swbuf_r+0x74>
 800ca3a:	68a3      	ldr	r3, [r4, #8]
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	60a3      	str	r3, [r4, #8]
 800ca40:	6823      	ldr	r3, [r4, #0]
 800ca42:	1c5a      	adds	r2, r3, #1
 800ca44:	6022      	str	r2, [r4, #0]
 800ca46:	701e      	strb	r6, [r3, #0]
 800ca48:	6962      	ldr	r2, [r4, #20]
 800ca4a:	1c43      	adds	r3, r0, #1
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d004      	beq.n	800ca5a <__swbuf_r+0x5a>
 800ca50:	89a3      	ldrh	r3, [r4, #12]
 800ca52:	07db      	lsls	r3, r3, #31
 800ca54:	d506      	bpl.n	800ca64 <__swbuf_r+0x64>
 800ca56:	2e0a      	cmp	r6, #10
 800ca58:	d104      	bne.n	800ca64 <__swbuf_r+0x64>
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f7ff fe01 	bl	800c664 <_fflush_r>
 800ca62:	b938      	cbnz	r0, 800ca74 <__swbuf_r+0x74>
 800ca64:	4638      	mov	r0, r7
 800ca66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca68:	4621      	mov	r1, r4
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	f000 f806 	bl	800ca7c <__swsetup_r>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d0d5      	beq.n	800ca20 <__swbuf_r+0x20>
 800ca74:	f04f 37ff 	mov.w	r7, #4294967295
 800ca78:	e7f4      	b.n	800ca64 <__swbuf_r+0x64>
	...

0800ca7c <__swsetup_r>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	4b2a      	ldr	r3, [pc, #168]	; (800cb28 <__swsetup_r+0xac>)
 800ca80:	4605      	mov	r5, r0
 800ca82:	6818      	ldr	r0, [r3, #0]
 800ca84:	460c      	mov	r4, r1
 800ca86:	b118      	cbz	r0, 800ca90 <__swsetup_r+0x14>
 800ca88:	6a03      	ldr	r3, [r0, #32]
 800ca8a:	b90b      	cbnz	r3, 800ca90 <__swsetup_r+0x14>
 800ca8c:	f7ff f8b4 	bl	800bbf8 <__sinit>
 800ca90:	89a3      	ldrh	r3, [r4, #12]
 800ca92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca96:	0718      	lsls	r0, r3, #28
 800ca98:	d422      	bmi.n	800cae0 <__swsetup_r+0x64>
 800ca9a:	06d9      	lsls	r1, r3, #27
 800ca9c:	d407      	bmi.n	800caae <__swsetup_r+0x32>
 800ca9e:	2309      	movs	r3, #9
 800caa0:	602b      	str	r3, [r5, #0]
 800caa2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800caa6:	81a3      	strh	r3, [r4, #12]
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	e034      	b.n	800cb18 <__swsetup_r+0x9c>
 800caae:	0758      	lsls	r0, r3, #29
 800cab0:	d512      	bpl.n	800cad8 <__swsetup_r+0x5c>
 800cab2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cab4:	b141      	cbz	r1, 800cac8 <__swsetup_r+0x4c>
 800cab6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800caba:	4299      	cmp	r1, r3
 800cabc:	d002      	beq.n	800cac4 <__swsetup_r+0x48>
 800cabe:	4628      	mov	r0, r5
 800cac0:	f7ff fa16 	bl	800bef0 <_free_r>
 800cac4:	2300      	movs	r3, #0
 800cac6:	6363      	str	r3, [r4, #52]	; 0x34
 800cac8:	89a3      	ldrh	r3, [r4, #12]
 800caca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cace:	81a3      	strh	r3, [r4, #12]
 800cad0:	2300      	movs	r3, #0
 800cad2:	6063      	str	r3, [r4, #4]
 800cad4:	6923      	ldr	r3, [r4, #16]
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	f043 0308 	orr.w	r3, r3, #8
 800cade:	81a3      	strh	r3, [r4, #12]
 800cae0:	6923      	ldr	r3, [r4, #16]
 800cae2:	b94b      	cbnz	r3, 800caf8 <__swsetup_r+0x7c>
 800cae4:	89a3      	ldrh	r3, [r4, #12]
 800cae6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800caea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caee:	d003      	beq.n	800caf8 <__swsetup_r+0x7c>
 800caf0:	4621      	mov	r1, r4
 800caf2:	4628      	mov	r0, r5
 800caf4:	f000 f88c 	bl	800cc10 <__smakebuf_r>
 800caf8:	89a0      	ldrh	r0, [r4, #12]
 800cafa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cafe:	f010 0301 	ands.w	r3, r0, #1
 800cb02:	d00a      	beq.n	800cb1a <__swsetup_r+0x9e>
 800cb04:	2300      	movs	r3, #0
 800cb06:	60a3      	str	r3, [r4, #8]
 800cb08:	6963      	ldr	r3, [r4, #20]
 800cb0a:	425b      	negs	r3, r3
 800cb0c:	61a3      	str	r3, [r4, #24]
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	b943      	cbnz	r3, 800cb24 <__swsetup_r+0xa8>
 800cb12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb16:	d1c4      	bne.n	800caa2 <__swsetup_r+0x26>
 800cb18:	bd38      	pop	{r3, r4, r5, pc}
 800cb1a:	0781      	lsls	r1, r0, #30
 800cb1c:	bf58      	it	pl
 800cb1e:	6963      	ldrpl	r3, [r4, #20]
 800cb20:	60a3      	str	r3, [r4, #8]
 800cb22:	e7f4      	b.n	800cb0e <__swsetup_r+0x92>
 800cb24:	2000      	movs	r0, #0
 800cb26:	e7f7      	b.n	800cb18 <__swsetup_r+0x9c>
 800cb28:	2000008c 	.word	0x2000008c

0800cb2c <_raise_r>:
 800cb2c:	291f      	cmp	r1, #31
 800cb2e:	b538      	push	{r3, r4, r5, lr}
 800cb30:	4604      	mov	r4, r0
 800cb32:	460d      	mov	r5, r1
 800cb34:	d904      	bls.n	800cb40 <_raise_r+0x14>
 800cb36:	2316      	movs	r3, #22
 800cb38:	6003      	str	r3, [r0, #0]
 800cb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3e:	bd38      	pop	{r3, r4, r5, pc}
 800cb40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cb42:	b112      	cbz	r2, 800cb4a <_raise_r+0x1e>
 800cb44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb48:	b94b      	cbnz	r3, 800cb5e <_raise_r+0x32>
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 f830 	bl	800cbb0 <_getpid_r>
 800cb50:	462a      	mov	r2, r5
 800cb52:	4601      	mov	r1, r0
 800cb54:	4620      	mov	r0, r4
 800cb56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb5a:	f000 b817 	b.w	800cb8c <_kill_r>
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d00a      	beq.n	800cb78 <_raise_r+0x4c>
 800cb62:	1c59      	adds	r1, r3, #1
 800cb64:	d103      	bne.n	800cb6e <_raise_r+0x42>
 800cb66:	2316      	movs	r3, #22
 800cb68:	6003      	str	r3, [r0, #0]
 800cb6a:	2001      	movs	r0, #1
 800cb6c:	e7e7      	b.n	800cb3e <_raise_r+0x12>
 800cb6e:	2400      	movs	r4, #0
 800cb70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb74:	4628      	mov	r0, r5
 800cb76:	4798      	blx	r3
 800cb78:	2000      	movs	r0, #0
 800cb7a:	e7e0      	b.n	800cb3e <_raise_r+0x12>

0800cb7c <raise>:
 800cb7c:	4b02      	ldr	r3, [pc, #8]	; (800cb88 <raise+0xc>)
 800cb7e:	4601      	mov	r1, r0
 800cb80:	6818      	ldr	r0, [r3, #0]
 800cb82:	f7ff bfd3 	b.w	800cb2c <_raise_r>
 800cb86:	bf00      	nop
 800cb88:	2000008c 	.word	0x2000008c

0800cb8c <_kill_r>:
 800cb8c:	b538      	push	{r3, r4, r5, lr}
 800cb8e:	4d07      	ldr	r5, [pc, #28]	; (800cbac <_kill_r+0x20>)
 800cb90:	2300      	movs	r3, #0
 800cb92:	4604      	mov	r4, r0
 800cb94:	4608      	mov	r0, r1
 800cb96:	4611      	mov	r1, r2
 800cb98:	602b      	str	r3, [r5, #0]
 800cb9a:	f7f4 fa4b 	bl	8001034 <_kill>
 800cb9e:	1c43      	adds	r3, r0, #1
 800cba0:	d102      	bne.n	800cba8 <_kill_r+0x1c>
 800cba2:	682b      	ldr	r3, [r5, #0]
 800cba4:	b103      	cbz	r3, 800cba8 <_kill_r+0x1c>
 800cba6:	6023      	str	r3, [r4, #0]
 800cba8:	bd38      	pop	{r3, r4, r5, pc}
 800cbaa:	bf00      	nop
 800cbac:	20013808 	.word	0x20013808

0800cbb0 <_getpid_r>:
 800cbb0:	f7f4 ba38 	b.w	8001024 <_getpid>

0800cbb4 <_malloc_usable_size_r>:
 800cbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb8:	1f18      	subs	r0, r3, #4
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	bfbc      	itt	lt
 800cbbe:	580b      	ldrlt	r3, [r1, r0]
 800cbc0:	18c0      	addlt	r0, r0, r3
 800cbc2:	4770      	bx	lr

0800cbc4 <__swhatbuf_r>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbcc:	2900      	cmp	r1, #0
 800cbce:	b096      	sub	sp, #88	; 0x58
 800cbd0:	4615      	mov	r5, r2
 800cbd2:	461e      	mov	r6, r3
 800cbd4:	da0d      	bge.n	800cbf2 <__swhatbuf_r+0x2e>
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cbdc:	f04f 0100 	mov.w	r1, #0
 800cbe0:	bf0c      	ite	eq
 800cbe2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cbe6:	2340      	movne	r3, #64	; 0x40
 800cbe8:	2000      	movs	r0, #0
 800cbea:	6031      	str	r1, [r6, #0]
 800cbec:	602b      	str	r3, [r5, #0]
 800cbee:	b016      	add	sp, #88	; 0x58
 800cbf0:	bd70      	pop	{r4, r5, r6, pc}
 800cbf2:	466a      	mov	r2, sp
 800cbf4:	f000 f848 	bl	800cc88 <_fstat_r>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	dbec      	blt.n	800cbd6 <__swhatbuf_r+0x12>
 800cbfc:	9901      	ldr	r1, [sp, #4]
 800cbfe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cc02:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cc06:	4259      	negs	r1, r3
 800cc08:	4159      	adcs	r1, r3
 800cc0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc0e:	e7eb      	b.n	800cbe8 <__swhatbuf_r+0x24>

0800cc10 <__smakebuf_r>:
 800cc10:	898b      	ldrh	r3, [r1, #12]
 800cc12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc14:	079d      	lsls	r5, r3, #30
 800cc16:	4606      	mov	r6, r0
 800cc18:	460c      	mov	r4, r1
 800cc1a:	d507      	bpl.n	800cc2c <__smakebuf_r+0x1c>
 800cc1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	6123      	str	r3, [r4, #16]
 800cc24:	2301      	movs	r3, #1
 800cc26:	6163      	str	r3, [r4, #20]
 800cc28:	b002      	add	sp, #8
 800cc2a:	bd70      	pop	{r4, r5, r6, pc}
 800cc2c:	ab01      	add	r3, sp, #4
 800cc2e:	466a      	mov	r2, sp
 800cc30:	f7ff ffc8 	bl	800cbc4 <__swhatbuf_r>
 800cc34:	9900      	ldr	r1, [sp, #0]
 800cc36:	4605      	mov	r5, r0
 800cc38:	4630      	mov	r0, r6
 800cc3a:	f7fe fe6b 	bl	800b914 <_malloc_r>
 800cc3e:	b948      	cbnz	r0, 800cc54 <__smakebuf_r+0x44>
 800cc40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc44:	059a      	lsls	r2, r3, #22
 800cc46:	d4ef      	bmi.n	800cc28 <__smakebuf_r+0x18>
 800cc48:	f023 0303 	bic.w	r3, r3, #3
 800cc4c:	f043 0302 	orr.w	r3, r3, #2
 800cc50:	81a3      	strh	r3, [r4, #12]
 800cc52:	e7e3      	b.n	800cc1c <__smakebuf_r+0xc>
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	6020      	str	r0, [r4, #0]
 800cc58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc5c:	81a3      	strh	r3, [r4, #12]
 800cc5e:	9b00      	ldr	r3, [sp, #0]
 800cc60:	6163      	str	r3, [r4, #20]
 800cc62:	9b01      	ldr	r3, [sp, #4]
 800cc64:	6120      	str	r0, [r4, #16]
 800cc66:	b15b      	cbz	r3, 800cc80 <__smakebuf_r+0x70>
 800cc68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	f000 f81d 	bl	800ccac <_isatty_r>
 800cc72:	b128      	cbz	r0, 800cc80 <__smakebuf_r+0x70>
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	f023 0303 	bic.w	r3, r3, #3
 800cc7a:	f043 0301 	orr.w	r3, r3, #1
 800cc7e:	81a3      	strh	r3, [r4, #12]
 800cc80:	89a3      	ldrh	r3, [r4, #12]
 800cc82:	431d      	orrs	r5, r3
 800cc84:	81a5      	strh	r5, [r4, #12]
 800cc86:	e7cf      	b.n	800cc28 <__smakebuf_r+0x18>

0800cc88 <_fstat_r>:
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4d07      	ldr	r5, [pc, #28]	; (800cca8 <_fstat_r+0x20>)
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	4604      	mov	r4, r0
 800cc90:	4608      	mov	r0, r1
 800cc92:	4611      	mov	r1, r2
 800cc94:	602b      	str	r3, [r5, #0]
 800cc96:	f7f4 fa2c 	bl	80010f2 <_fstat>
 800cc9a:	1c43      	adds	r3, r0, #1
 800cc9c:	d102      	bne.n	800cca4 <_fstat_r+0x1c>
 800cc9e:	682b      	ldr	r3, [r5, #0]
 800cca0:	b103      	cbz	r3, 800cca4 <_fstat_r+0x1c>
 800cca2:	6023      	str	r3, [r4, #0]
 800cca4:	bd38      	pop	{r3, r4, r5, pc}
 800cca6:	bf00      	nop
 800cca8:	20013808 	.word	0x20013808

0800ccac <_isatty_r>:
 800ccac:	b538      	push	{r3, r4, r5, lr}
 800ccae:	4d06      	ldr	r5, [pc, #24]	; (800ccc8 <_isatty_r+0x1c>)
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	4608      	mov	r0, r1
 800ccb6:	602b      	str	r3, [r5, #0]
 800ccb8:	f7f4 fa2b 	bl	8001112 <_isatty>
 800ccbc:	1c43      	adds	r3, r0, #1
 800ccbe:	d102      	bne.n	800ccc6 <_isatty_r+0x1a>
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	b103      	cbz	r3, 800ccc6 <_isatty_r+0x1a>
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	bd38      	pop	{r3, r4, r5, pc}
 800ccc8:	20013808 	.word	0x20013808

0800cccc <_gettimeofday>:
 800cccc:	4b02      	ldr	r3, [pc, #8]	; (800ccd8 <_gettimeofday+0xc>)
 800ccce:	2258      	movs	r2, #88	; 0x58
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd6:	4770      	bx	lr
 800ccd8:	20013808 	.word	0x20013808

0800ccdc <_init>:
 800ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccde:	bf00      	nop
 800cce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce2:	bc08      	pop	{r3}
 800cce4:	469e      	mov	lr, r3
 800cce6:	4770      	bx	lr

0800cce8 <_fini>:
 800cce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccea:	bf00      	nop
 800ccec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccee:	bc08      	pop	{r3}
 800ccf0:	469e      	mov	lr, r3
 800ccf2:	4770      	bx	lr
